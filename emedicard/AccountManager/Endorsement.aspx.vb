Imports emedicardBLL
Imports System.IO
Imports System.Web.Services
Imports System.Web.Script.Services
Imports System.Web.Script.Serialization

Public Class Endorsement
    Inherits System.Web.UI.Page
    Private UserID As Integer
    Private email As String = String.Empty
    Private isCorporate As Boolean
    Private MemberCode As String
    Dim objBll As EndorsementBLL
    Public key As String = ConfigurationManager.AppSettings("encryptionKey")
    Dim bIsAllowedToUPload As Boolean = False
    Dim dtRequest As DataTable
    Public Shared sAcctCode As String = ""

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            If Request.QueryString("t") Is Nothing Then Exit Sub
            sAcctCode = Request.QueryString("a")
            If Request.QueryString("t") = 1 Then
                Dim c As New eCorporateBLL(HttpContext.Current.User.Identity.Name)
                UserID = c.UserID
                email = c.EmailAddress
                isCorporate = True
                bIsAllowedToUPload = c.IsAllowedToUpload
            Else
                Dim a As New eAccountBLL(HttpContext.Current.User.Identity.Name)
                UserID = a.UserID
                email = a.EmailAddress
                bIsAllowedToUPload = False
            End If

            'If Not IsNothing(Request.QueryString("msg")) Then
            '    If Trim(Request.QueryString("msg")) <> "" Then
            '        lblMessage.Text = Trim(Request.QueryString("msg"))
            '        lblMessage.Visible = True

            '        RadTabStrip1.Tabs(2).Selected = True
            '        pageview3.Selected = True
            '    End If
            'End If


            If Page.IsPostBack Then Exit Sub

            Dim AccountManagerBLL As New emedBLL(Request.QueryString("a"))

            LoadPrinicpalMembers()

            If Not IsPostBack Then
                If Trim(Request.QueryString("msg")) <> "" Then

                    lblMessage.Text = Trim(Request.QueryString("msg"))
                    lblMessage.Visible = True

                End If
                buttonDisabler()
                'BIND Principal Endorsement
                BindPrinicipalEndorsement()

                ' BIND DEPENDENT ENDORSEMENT
                BindDependentEndorsement()

                BindMembershipEndorsementCancelationRequest(0)
                BindMembershipEndorsementCancelationRequest(1)
            End If

            With AccountManagerBLL

                cboPlan.DataSource = .AccountPlans
                cboPlan.DataValueField = "RSPROOMRATE_ID"
                cboPlan.DataTextField = "PLAN"
                cboPlan.DataBind()

                cboPlanDep.DataSource = .AccountPlans
                cboPlanDep.DataValueField = "RSPROOMRATE_ID"
                cboPlanDep.DataTextField = "PLAN"
                cboPlanDep.DataBind()

                cboRelation.DataSource = .MembersRelationList
                cboRelation.DataValueField = "DEP_CODE"
                cboRelation.DataTextField = "DEP_DESCRIPTION"
                cboRelation.DataBind()

            End With

            'If bIsAllowedToUPload = False Then
            '    RadTabStrip1.Tabs(2).Visible = False
            '    requestdiv.Visible = False
            'End If
        Catch ex As Exception
            Response.Write(ex.Message)
            Throw New Exception(ex.Message)
        End Try
    End Sub

    Private Sub buttonDisabler()
        'SOLUTION 2: CHANGE THE BUTTON SUBMIT JS CODE SO THAT IT

        'DISABLES WHEN THE FORM IS VALID, PRIOR TO SUBMISSION

        'build the JS

        Dim sb As New StringBuilder()

        sb.Append("if (typeof(Page_ClientValidate) == 'function') { ")

        'if client-side does not validate, stop (this supports validation groups)

        'BUGFIX: must save, then restore the page validation / submission state, otherwise

        'when the validation fails, it prevents the FIRST autopostback from other controls

        sb.Append("var oldPage_IsValid = Page_IsValid; var oldPage_BlockSubmit = Page_BlockSubmit;")

        sb.Append("if (Page_ClientValidate('" + btnUpload.ValidationGroup & "') == false) {")

        sb.Append(" Page_IsValid = oldPage_IsValid; Page_BlockSubmit = oldPage_BlockSubmit; return false; }} ")

        'change button text and disable it

        sb.Append("this.value = 'Processing...';")

        sb.Append("this.disabled = true;")

        'insert the call to the framework JS code that does the postback of the form in the client

        'The default code generated by ASP (WebForm_DoPostbackWithOptions) will not

        'submit because the button is disabled (this is new in 2.0)

        sb.Append(ClientScript.GetPostBackEventReference(btnUpload, Nothing) & ";")

        'BUGFIX: MUST RETURN AFTER THIS, OTHERWISE IF THE BUTTON HAS UseSubmitBehavior=false

        'THEN ONE CLICK WILL IN FACT CAUSE 2 SUBMITS, DEFEATING THE WHOLE PURPOSE

        sb.Append("return true;")

        Dim submit_button_onclick_js As String = sb.ToString()

        btnUpload.Attributes.Add("onclick", submit_button_onclick_js)

    End Sub
    Private Sub LoadPrinicpalMembers()
        Dim EndorsementBLL As New EndorsementBLL()

        EndorsementBLL.AccountCode = Request.QueryString("a")
        cboPrincipalCode.DataSource = EndorsementBLL.PrincipalEndorsementListing
        cboPrincipalCode.DataValueField = "AppNum"
        cboPrincipalCode.DataTextField = "PrinName"
        cboPrincipalCode.DataBind()
    End Sub

    <System.Web.Services.WebMethod()> _
<ScriptMethod(ResponseFormat:=ResponseFormat.Json)> _
    Public Shared Function GetListOfPrincipals() As String
        Dim strJSON As String = String.Empty
        Dim js As New JavaScriptSerializer
        Dim dtPrn As New DataTable
        Dim objItem As DDListItem
        Dim objList As New List(Of DDListItem)


        Dim EndorsementBLL As New EndorsementBLL()

        EndorsementBLL.AccountCode = sAcctCode
        dtPrn = EndorsementBLL.GetPrincipalEndorsement

        For Each dr As DataRow In dtPrn.Rows
            objItem = New DDListItem
            objItem.value = dr("AppNum")
            objItem.description = dr("PrinName")
            objList.Add(objItem)
        Next

        strJSON = js.Serialize(objList)

        Return strJSON
    End Function

    Protected Sub btnSavePrincipal_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnSavePrincipal.Click
        Try
            lblMessage.Visible = False
            Using bll = New EndorsementBLL
                With bll
                    .Birthdate = rdBirthdate.SelectedDate
                    .CivilStatus = cboCivilStatus.SelectedValue
                    .Firstname = txtFirstname.Text
                    .Lastname = txtLastname.Text
                    .MiddleInitial = txtMiddleInitial.Text
                    .PlanCode = cboPlan.SelectedValue
                    .MemberType = "PRINCIPAL"
                    .RequestedBy = HttpContext.Current.User.Identity.Name
                    .Remarks = txtRemarks.Text
                    ' split the Plans drop down values 
                    Dim plan() As String = Split(cboPlan.SelectedItem.Text, "|")

                    .PlanDetails = Trim(plan(0))
                    .PlanRNBFor = Trim(plan(1))
                    .Sex = cboGender.SelectedValue
                    .Email = email
                    .UserID = UserID
                    .AccountCode = Request.QueryString("a")
                    If .Save(isCorporate) Then
                        Notification_SingleEndorsment(0)
                        Clear_Prin_Fields()
                        lblMessage.Visible = True
                        lblMessage.Text = "Request for additional new member was sent to MediCard."
                        lblMessage.ForeColor = Drawing.Color.Blue
                        BindPrinicipalEndorsement()
                    End If

                End With

            End Using
        Catch ex As Exception
            lblMessage.Visible = True
            lblMessage.Text = ex.Message
            lblMessage.ForeColor = Drawing.Color.Blue
            'Throw New Exception(ex.Message)
        End Try
    End Sub


    Protected Sub btnSaveDependent_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnSaveDependent.Click
        Try
            lblMessage.Visible = False

            If cboPrincipalStatus.SelectedValue = 0 Then
                If Trim(txtPrincipalCode.Text) = "" Then
                    Exit Sub
                End If

                Using bll = New EndorsementBLL
                    bll.CheckMemberValidity(txtPrincipalCode.Text, sAcctCode)

                    If Trim(bll.MemberCode) = "" Then
                        lblMessage.Visible = True
                        lblMessage.Text = "Error! Please check principal validity."
                        lblMessage.ForeColor = Drawing.Color.Red
                        Exit Sub
                    End If

                End Using

            End If

            Using bll = New EndorsementBLL
                With bll
                    .Birthdate = rdDepBirthdate.SelectedDate
                    .CivilStatus = cboDepCivilStatus.SelectedValue
                    .Firstname = txtDepFirstname.Text
                    .Lastname = txtDepLastname.Text
                    .MiddleInitial = txtDepMiddleInitial.Text
                    .PlanCode = cboPlanDep.SelectedValue
                    .MemberType = "DEPENDENT"
                    .RequestedBy = HttpContext.Current.User.Identity.Name
                    .Remarks = txtDepRemarks.Text
                    .RelationshipCode = cboRelation.SelectedValue
                    .MemberRelationshipDetail = cboRelation.SelectedItem.Text
                    .PrincipalMemberCode = String.Empty
                    .PrincipalAppNum = cboPrincipalCode.SelectedValue
                    If cboPrincipalStatus.SelectedValue = 0 Then
                        .PrincipalMemberCode = txtPrincipalCode.Text
                        .IsExistingPrincipal = True
                    End If
                    ' split the Plans drop down values 
                    Dim plan() As String = Split(cboPlan.SelectedItem.Text, "|")

                    .PlanDetails = Trim(plan(0))
                    .PlanRNBFor = Trim(plan(1))
                    .Sex = cboGender.SelectedValue
                    .Email = email
                    .UserID = UserID
                    .AccountCode = Request.QueryString("a")

                    If .SaveDependent(isCorporate) Then
                        lblMessage.Text = "Request for additional dependent was sent to MediCard."
                        lblMessage.ForeColor = Drawing.Color.White
                        lblMessage.Visible = True
                        Notification_SingleEndorsment(1)
                        Clear_Dep_Fields()
                        BindDependentEndorsement()
                    Else
                        lblMessage.Visible = True
                        lblMessage.Text = .ErrorMessage
                        lblMessage.ForeColor = Drawing.Color.Red
                    End If
                End With
            End Using
        Catch ex As Exception
            Response.Write(ex.Message)
        End Try
    End Sub

    Private Sub Notification_SingleEndorsment(ByVal iMemType As Short)
        Dim sAccountName As String = String.Empty
        Dim sAgnCode As String = String.Empty
        Dim sSender As String = String.Empty

        Using bll = New eCorporateBLL
            With bll
                .Username = EncryptDecrypt.EncryptDecrypt.Decrypt(Request.QueryString("u"), key)
                .uploaded_by = EncryptDecrypt.EncryptDecrypt.Decrypt(Request.QueryString("u"), key)
                .AccountCode = Trim(Request.QueryString("a"))
                .UserType = Trim(Request.QueryString("t"))
                Using acctBLLInfo = New AccountInformationBLL(Request.QueryString("a"), 1)
                    sAccountName = acctBLLInfo.CompanyName
                    sAgnCode = acctBLLInfo.AgentCode
                End Using

                Dim sMsg As String
                Dim sTitle As String = ddlSubject.SelectedValue
                Dim sDLink As String = String.Empty


                Using embll = New emedBLL

                    If bll.UserType = 1 Then
                        'Get eAccount
                        embll.application_type = "ecorp"
                    ElseIf bll.UserType = 2 Then
                        embll.application_type = "eaccount"
                    End If
                    If ddlSubject.Text = "Other" Then
                        embll.mail_description = "File Uploading Other"
                    Else
                        embll.mail_description = ddlSubject.Text
                    End If
                    embll.GetRecepients()

                    Dim dtCC As New DataTable
                    Dim sCC As String = String.Empty

                    Using oCorpBLL = New eCorporateBLL
                        oCorpBLL.AccountCode = Trim(Request.QueryString("a"))
                        oCorpBLL.GetAccountContactInfo()

                        embll.prm_account_code = Trim(Request.QueryString("a"))
                        embll.prm_agent_code = sAgnCode
                        dtCC = embll.GetCC()

                        For Each dr As DataRow In dtCC.Rows
                            If Trim(sCC) = "" Then
                                sCC = dr(0)
                            Else
                                sCC = sCC & "," & dr(0)
                            End If
                        Next

                        If bll.UserType = 1 Then
                            sSender = embll.GetEmail(bll.Username, "ecorp")
                        ElseIf bll.UserType = 2 Then
                            sSender = embll.GetEmail(bll.Username, "eaccount")
                        End If

                        If Trim(embll.send_to_tag) <> "" Then
                            Select Case Trim(embll.send_to_tag)
                                Case "ecorp_main"

                                    If Trim(sCC) <> "" Then
                                        sCC = sCC & " , " & embll.GetEmail("", "ecorp", "", bll.AccountCode)
                                    Else
                                        sCC = embll.GetEmail("", "ecorp", "", bll.AccountCode)
                                    End If

                                Case "eaccount_main"

                                    If Trim(sCC) <> "" Then
                                        sCC = sCC & " , " & embll.GetEmail("", "eaccount", sAgnCode, bll.AccountCode)
                                    Else
                                        sCC = embll.GetEmail("", "eaccount", sAgnCode, bll.AccountCode)
                                    End If

                            End Select
                        End If

                        'If embll.self Then
                        '    embll.send_to_email = embll.send_to_email & ", " & sSender
                        'End If

                        If Trim(embll.send_to_email) <> "" Then
                            Dim bsent As Boolean = False
                            Dim sUserFullName As String = oCorpBLL.GetUserFullName(.uploaded_by, bll.UserType)

                            sMsg = "<p> A new Membership Endorsement(Single) was filed by " & sUserFullName & " with the following details:</p>"
                            If iMemType = 0 Then
                                sMsg = sMsg & "<p>Name : " & txtFirstname.Text & " " & txtMiddleInitial.Text & " " & txtLastname.Text & "</p>"
                                sMsg = sMsg & "<p>Membersip Type : Principal</p>"
                            Else
                                sMsg = sMsg & "<p>Name : " & txtDepFirstname.Text & " " & txtDepMiddleInitial.Text & " " & txtDepLastname.Text & "</p>"
                                sMsg = sMsg & "<p>Membersip Type : Dependent</p>"
                            End If
                            sMsg = sMsg & "<p>Date time received : " & Now & "</p>"
                            'sMsg = sMsg & "<p>Remarks : " & Trim(txtUploadRemarks.Text) & "</p>"

                            Mailhelper.MailHelper.SendMailMessage("noreply@medicardphils.com", embll.send_to_email, embll.bcc, sCC, sTitle, sMsg)
                            bsent = Mailhelper.MailHelper.Sent

                            Dim sNotifyMsg As String = String.Empty
                            If bll.UserType = 1 Then
                                sNotifyMsg = "<p>Thank you for using eCorporate!</p>"
                            ElseIf bll.UserType = 2 Then
                                sNotifyMsg = "<p>Thank you for using eAccount!</p>"
                            End If
                            sNotifyMsg = sNotifyMsg & "<p>We have received your new request for Membership Endorsement.</p>"
                            If iMemType = 0 Then
                                sNotifyMsg = sNotifyMsg & "<p>Name : " & txtFirstname.Text & " " & txtMiddleInitial.Text & " " & txtLastname.Text & "</p>"
                                sNotifyMsg = sNotifyMsg & "<p>Membersip Type : Principal</p>"
                            Else
                                sNotifyMsg = sNotifyMsg & "<p>Name : " & txtDepFirstname.Text & " " & txtDepMiddleInitial.Text & " " & txtDepLastname.Text & "</p>"
                                sNotifyMsg = sNotifyMsg & "<p>Membersip Type : Dependent</p>"
                            End If
                            sNotifyMsg = sNotifyMsg & "<p>Date time received : " & Now & "</p>"
                            Mailhelper.MailHelper.SendMailMessage("noreply@medicardphils.com", sSender, "", "", sTitle, sNotifyMsg)

                        End If

                    End Using
                    'Mailhelper.MailHelper.SendMailMessage(.uploaded_by, "mgabat@medicardphils.com", "ctubig@medicardphils.com", "ctubig@medicardphils.com", sTitle, sMsg)
                End Using
            End With
        End Using
    End Sub

    Private Sub BindPrinicipalEndorsement()
        Try
            Using bll = New EndorsementBLL
                bll.AccountCode = Request.QueryString("a")
                grdPrinicipal.DataSource = bll.PrincipalEndorsementList
                grdPrinicipal.DataBind()
            End Using
        Catch ex As Exception
            Throw New Exception(ex.Message)
        End Try
    End Sub

    Private Sub BindDependentEndorsement()
        Try
            Using bll = New EndorsementBLL

                bll.AccountCode = Request.QueryString("a")
                grdDependent.DataSource = bll.DependentEndorsementList
                grdDependent.DataBind()

            End Using
        Catch ex As Exception

        End Try
    End Sub

    Private Sub BindMembershipEndorsementCancelationRequest(ByVal iRequestType As Short)
        'Try
        '    Using bll = New eCorporateBLL

        '        bll.AccountCode = Request.QueryString("a")
        '        bll.UserType = 1
        '        dtRequest = bll.GetCorporateRequestList
        '        grdRequest.DataSource = dtRequest
        '        grdRequest.DataBind()

        '    End Using
        'Catch ex As Exception

        'End Try
        Try
            Using bll = New eCorporateBLL
                If Request.QueryString("t") = "1" Then
                    bll.UserType = 1
                ElseIf Request.QueryString("t") = "2" Then
                    bll.UserType = 2
                Else
                    Exit Sub
                End If

                bll.AccountCode = Request.QueryString("a")
                bll.Request_Type = iRequestType
                dtRequest = bll.GetCorporateRequestListAll

                For Each dr As DataRow In dtRequest.Rows
                    If Len(Trim(dr(1).ToString)) > 100 Then
                        dr(1) = Right(dr(1), 100) & "..."
                        dtRequest.AcceptChanges()
                    End If
                Next

                If iRequestType = 0 Then
                    grdRequest.DataSource = dtRequest
                    grdRequest.DataBind()
                Else
                    grdClosedReq.DataSource = dtRequest
                    grdClosedReq.DataBind()
                End If


            End Using
        Catch ex As Exception

        End Try
    End Sub

    <System.Web.Services.WebMethod()> _
    <ScriptMethod(ResponseFormat:=ResponseFormat.Json)> _
    Public Shared Function CheckPrinStatus(ByVal sMemCode As String) As String
        Dim strJSON As String = String.Empty
        Dim js As New JavaScriptSerializer
        Dim objMem As New MemberDetails

        Using bll = New EndorsementBLL
            bll.CheckMemberValidity(sMemCode, sAcctCode)
            With objMem
                .MemberCode = bll.MemberCode
                .first_name = bll.Firstname
                .midinit = bll.MiddleInitial
                .last_name = bll.Lastname
            End With

        End Using

        strJSON = js.Serialize(objMem)
        Return strJSON

    End Function

    Protected Sub cboPrincipalStatus_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles cboPrincipalStatus.SelectedIndexChanged
        If cboPrincipalStatus.SelectedValue = 0 Then
            'txtPrincipalCode.Visible = True
            'cboPrincipalCode.Visible = False
            lblPrincode.Text = "Principal Code:"
        Else
            'txtPrincipalCode.Visible = False
            'cboPrincipalCode.Visible = True
            LoadPrinicpalMembers()
            lblPrincode.Text = "Principal Member: "
        End If

    End Sub

    Private Sub grdPrinicipal_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles grdPrinicipal.RowDataBound
        If e.Row.RowType = DataControlRowType.Header Then
            Dim b As Button = DirectCast(e.Row.FindControl("ButtonDelete"), Button)
            b.Attributes.Add("onclick", "return ConfirmOnDelete();")
        End If
        If e.Row.RowType = DataControlRowType.DataRow Then
            If e.Row.Cells(7).Text <> "PENDING" Then
                Dim cb As CheckBox = DirectCast(e.Row.FindControl("chkCancel"), CheckBox)
                cb.Enabled = False
            End If
        End If
    End Sub

    'Private Sub grdPrinicipal_RowDeleting(sender As Object, e As System.Web.UI.WebControls.GridViewDeleteEventArgs) Handles grdPrinicipal.RowDeleting

    '    Dim id As Integer = CInt(grdPrinicipal.DataKeys(e.RowIndex).Value)
    '    lblMessage.Visible = False
    '    Using bll = New EndorsementBLL
    '        If bll.CancelPrincipalEndorsement(id) Then
    '            lblMessage.Visible = True
    '            lblMessage.ForeColor = Drawing.Color.Blue
    '            lblMessage.Text = bll.Message
    '            BindPrinicipalEndorsement()
    '        End If
    '    End Using

    'End Sub

    Protected Sub grdPrinicipal_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles grdPrinicipal.SelectedIndexChanged

    End Sub

    Private Sub grdDependent_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles grdDependent.RowDataBound
        If e.Row.RowType = DataControlRowType.Header Then
            Dim b As Button = DirectCast(e.Row.FindControl("ButtonDelete"), Button)
            b.Attributes.Add("onclick", "return ConfirmOnDelete2();")
        End If
        If e.Row.RowType = DataControlRowType.DataRow Then
            If e.Row.Cells(8).Text <> "PENDING" Then
                Dim cb As CheckBox = DirectCast(e.Row.FindControl("chkCancel"), CheckBox)
                cb.Enabled = False
            End If
        End If
    End Sub

    Protected Sub grdRequest_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles grdRequest.RowDataBound
        'If e.Row.RowType = DataControlRowType.Header Then
        '    Dim b As Button = DirectCast(e.Row.FindControl("ButtonDelete"), Button)
        '    b.Attributes.Add("onclick", "return ConfirmOnDelete3();")
        'End If

        'If e.Row.RowType = DataControlRowType.DataRow Then
        '    If e.Row.Cells(5).Text <> "Pending" Then
        '        Dim cb As CheckBox = DirectCast(e.Row.FindControl("chkCancel"), CheckBox)
        '        cb.Enabled = False
        '    End If
        'End If
    End Sub

    Private Sub grdDependent_RowDeleting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewDeleteEventArgs) Handles grdDependent.RowDeleting
        'Dim id As Integer = CInt(grdDependent.DataKeys(e.RowIndex).Value)
        'lblMessage.Visible = False
        'Using bll = New EndorsementBLL
        '    If bll.CancelDependentEndorsement(id) Then
        '        lblMessage.Visible = True
        '        lblMessage.ForeColor = Drawing.Color.Blue
        '        lblMessage.Text = bll.Message
        '        BindDependentEndorsement()
        '    End If
        'End Using
    End Sub

    Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnCancel.Click
        Response.Redirect("MemCancelation.aspx?t=" & Request.QueryString("t") & "&c=" & Request.QueryString("c") & "&u=" & HttpUtility.UrlEncode(Request.QueryString("u")) & "&agnt=" & Request.QueryString("agnt") & "&a=" & Request.QueryString("a"))
    End Sub

    Private Sub DeleteRecords(ByVal sc As StringCollection)
        For Each item As String In sc
            Using bll = New EndorsementBLL
                bll.CancelPrincipalEndorsement(item)
            End Using
        Next
    End Sub

    Private Sub DeleteRecordsDep(ByVal sc As StringCollection)
        For Each item As String In sc
            Using bll = New EndorsementBLL
                bll.CancelDependentEndorsement(item)
            End Using
        Next
    End Sub

    Private Sub DeleteRecordsReq(ByVal sc As StringCollection)
        For Each item As String In sc
            Using bll = New eCorporateBLL
                bll.DeleteEndorsementCancelRequest(item)
            End Using
        Next
    End Sub

    Protected Sub Button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles Button1.Click
        Dim sc As New StringCollection()
        Dim id As String = String.Empty
        For i As Integer = 0 To grdPrinicipal.Rows.Count - 1
            Dim cb As CheckBox = DirectCast(grdPrinicipal.Rows(i).Cells(8).FindControl("chkCancel"), CheckBox)
            If cb IsNot Nothing Then
                If cb.Checked Then
                    id = grdPrinicipal.Rows(i).Cells(0).Text
                    sc.Add(id)
                End If
            End If
        Next
        DeleteRecords(sc)
        BindPrinicipalEndorsement()
    End Sub

    Protected Sub Button2_Click(ByVal sender As Object, ByVal e As EventArgs) Handles Button2.Click
        Dim sc As New StringCollection()
        Dim id As String = String.Empty
        For i As Integer = 0 To grdDependent.Rows.Count - 1
            Dim cb As CheckBox = DirectCast(grdDependent.Rows(i).Cells(9).FindControl("chkCancel"), CheckBox)
            If cb IsNot Nothing Then
                If cb.Checked Then
                    id = grdDependent.Rows(i).Cells(0).Text
                    sc.Add(id)
                End If
            End If
        Next
        DeleteRecordsDep(sc)
        BindDependentEndorsement()
    End Sub

    Protected Sub Button3_Click(ByVal sender As Object, ByVal e As EventArgs) Handles Button3.Click
        Try
            objBll = New EndorsementBLL
            objBll.CancelPrincipalEndorsement(1614)
        Catch ex As Exception
            Response.Write(ex.ToString)
            Response.Write(ex.InnerException.ToString)
        End Try

    End Sub

    Protected Sub Button4_Click(ByVal sender As Object, ByVal e As EventArgs) Handles Button4.Click
        Dim sc As New StringCollection()
        Dim id As String = String.Empty
        For i As Integer = 0 To grdRequest.Rows.Count - 1
            Dim cb As CheckBox = DirectCast(grdRequest.Rows(i).Cells(6).FindControl("chkCancel"), CheckBox)
            If cb IsNot Nothing Then
                If cb.Checked Then
                    id = grdRequest.Rows(i).Cells(0).Text
                    sc.Add(id)
                End If
            End If
        Next
        DeleteRecordsReq(sc)
        BindMembershipEndorsementCancelationRequest(0)
    End Sub

    Private Sub Clear_Prin_Fields()
        rdBirthdate.SelectedDate = Nothing
        cboCivilStatus.SelectedIndex = -1
        txtFirstname.Text = ""
        txtLastname.Text = ""
        txtMiddleInitial.Text = ""
        cboPlan.SelectedIndex = -1
        txtRemarks.Text = ""
        cboGender.SelectedIndex = -1
    End Sub

    Private Sub Clear_Dep_Fields()
        'cboPrincipalStatus.SelectedIndex = -1
        'txtPrincipalCode.Text = ""
        cboRelation.SelectedIndex = -1
        cboPlanDep.SelectedIndex = -1
        txtDepLastname.Text = ""
        txtDepFirstname.Text = ""
        txtDepMiddleInitial.Text = ""
        rdDepBirthdate.SelectedDate = Nothing
        cboDepGender.SelectedIndex = -1
        cboDepCivilStatus.SelectedIndex = -1
        txtDepRemarks.Text = ""
    End Sub

    Protected Sub btnUpload_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnUpload.Click

        'If Page.IsPostBack Then
        '    lblMessage.Text = "Encountered problem. Please retry again or reload the page."
        '    lblMessage.Visible = True
        '    lblMessage.CssClass = "label label-warning"
        '    Exit Sub
        'End If

        If FileUpload1.HasFile Then
            Dim bValidFile As Boolean = False
            Dim ImageFiles As HttpFileCollection = Request.Files

            ' Validation only
            For i As Integer = 0 To ImageFiles.Count - 1
                Dim file As HttpPostedFile = ImageFiles(i)
                Dim sext As String = Path.GetExtension(file.FileName)
                If file.ContentType = "application/vnd.ms-excel" Or file.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" Or file.ContentType = "application/x-zip-compressed" Or file.ContentType = "application/pdf" Or file.ContentType = "image/jpeg" Or file.ContentType = "image/png" Or file.ContentType = "image/gif" Or (file.ContentType = "application/octet-stream" AndAlso sext = ".rar") Or (file.ContentType = "application/octet-stream" AndAlso sext = ".zip") Or file.ContentType = "application/vnd.ms-excel" Then
                    If file.ContentLength <= 15750656 Then
                        bValidFile = True
                    Else
                        lblMessage.Text = "The file is too large. It must be less than or equal to 15MB."
                        lblMessage.Visible = True
                        lblMessage.CssClass = "label label-warning"
                        bValidFile = False
                        Exit For
                    End If
                Else
                    lblMessage.Text = "The file is not allowed. The allowed files are excel(.xls, .xlsx, .csv), compressed file(.zip, .rar), pdf file, images(.jpeg, .png, .gif)"
                    lblMessage.Visible = True
                    lblMessage.CssClass = "label label-warning"
                    bValidFile = False
                    Exit For
                End If
            Next
            ' end validation

            If bValidFile Then
                Dim sFile As String = ""
                Dim bIsSave As Boolean = False

                'Upload if valid
                For i As Integer = 0 To ImageFiles.Count - 1
                    Dim file As HttpPostedFile = ImageFiles(i)
                    Dim bSuccess As Boolean = False
                    Dim ssFile As String = ""
                    Try
                        ssFile = Now.ToString("yyyyMMdd-HHmmss") & "_" & Path.GetFileName(file.FileName)
                        If sFile <> "" Then
                            sFile += ";" & ssFile
                        Else
                            sFile = ssFile
                        End If

                        file.SaveAs(ConfigurationManager.AppSettings("UploadDir") & ssFile)
                        bSuccess = True

                    Catch ex As Exception
                        bSuccess = False
                    End Try

                    If bSuccess = True Then
                        Dim bFileFound As Boolean = False
                        Dim fileInfo = New FileInfo(ConfigurationManager.AppSettings("UploadDir") & ssFile)
                        If fileInfo.Exists Then
                            bFileFound = True
                        End If

                        If bFileFound = True Then
                            bIsSave = True
                        Else
                            lblMessage.Text = "Encountered problem uploading the file. Please retry again."
                            lblMessage.Visible = True
                            lblMessage.CssClass = "label label-warning"
                            Exit For
                        End If
                    Else
                        lblMessage.Text = "Encountered problem uploading the file. If have special characters in the file name, please remove or rename."
                        lblMessage.Visible = True
                        lblMessage.CssClass = "label label-warning"
                        Exit For
                    End If
                Next

                SaveData(sFile)

            End If
        Else
            SaveData("")
        End If

    End Sub

    Private Sub SaveData(ByVal sFilename As String)

        Dim lID As Long = 0

        Dim sAccountName As String = String.Empty
        Dim sAgnCode As String = String.Empty
        Dim sSender As String = String.Empty

        Using bll = New eCorporateBLL
            With bll

                .Remarks = Trim(txtUploadRemarks.Text)
                .file_path = sFilename
                .Username = EncryptDecrypt.EncryptDecrypt.Decrypt(Request.QueryString("u"), key)
                .uploaded_by = EncryptDecrypt.EncryptDecrypt.Decrypt(Request.QueryString("u"), key)
                .AccountCode = Request.QueryString("a")
                'If ddlSubject.SelectedValue = "Other" Then
                '    .Title = txtSubject.Text
                'Else
                '    .Title = ddlSubject.SelectedValue
                'End If
                .Title = ddlSubject.SelectedValue
                .Is_Mother = True
                If Not IsNothing(Request.QueryString("t")) Then
                    If Trim(Request.QueryString("t")) = "1" Then
                        .UserType = 1
                    ElseIf Trim(Request.QueryString("t")) = "2" Then
                        .UserType = 2
                    End If
                End If
                lID = .Save_Endorsement_Request()

                Using ecorp3 = New eCorporateBLL
                    ecorp3.Add_Request_Status_History(lID)
                End Using

                Using acctBLLInfo = New AccountInformationBLL(Request.QueryString("a"), 1)
                    sAccountName = acctBLLInfo.CompanyName
                    sAgnCode = acctBLLInfo.AgentCode
                End Using

                Dim sMsg As String
                Dim sTitle As String = ddlSubject.SelectedValue
                Dim sDLink As String = String.Empty
                'Dim sUpdateLink
                'sDLink = "file://uranus/ECorporateFileUpload/" & sFilename
                sDLink = ConfigurationManager.AppSettings("BaseUrl") & "/DLPage.aspx?flname=" & HttpUtility.UrlEncode(sFilename)

                'If ddlSubject.SelectedValue = "Other" Then
                '    sTitle = txtSubject.Text
                'Else
                '    sTitle = ddlSubject.SelectedValue
                'End If

                If sAccountName <> "" Then
                    sTitle = sTitle + " | " + sAccountName
                End If

                Using embll = New emedBLL

                    If bll.UserType = 1 Then
                        'Get eAccount
                        embll.application_type = "ecorp"
                    ElseIf bll.UserType = 2 Then
                        embll.application_type = "eaccount"
                    End If
                    If ddlSubject.Text = "Other" Then
                        embll.mail_description = "File Uploading Other"
                    Else
                        embll.mail_description = ddlSubject.Text
                    End If
                    embll.GetRecepients()

                    Dim dtCC As New DataTable
                    Dim sCC As String = String.Empty

                    Using oCorpBLL = New eCorporateBLL
                        oCorpBLL.AccountCode = Trim(Request.QueryString("a"))
                        oCorpBLL.GetAccountContactInfo()
                        If bll.UserType = 1 Then
                            'eCorporate
                            'Dim smail As String = embll.GetEmail("", "eaccount", sAgnCode)
                            'If embll.send_to_tag = "eaccount_main" Then
                            '    embll.send_to_email = embll.send_to_email & "," & oCorpBLL.EmailAddress
                            'End If
                        ElseIf bll.UserType = 2 Then
                            'eAccount
                            'If embll.send_to_tag = "ecorp_main" Then
                            '    embll.send_to_email = embll.send_to_email & "," & oCorpBLL.EmailAddress
                            'End If
                        End If

                        embll.prm_account_code = Trim(Request.QueryString("a"))
                        embll.prm_agent_code = sAgnCode
                        dtCC = embll.GetCC()

                        For Each dr As DataRow In dtCC.Rows
                            'If Trim(sCC) = "" Then
                            '    sCC = dr(0)
                            'Else
                            '    sCC = sCC & "," & dr(0)
                            'End If
                        Next

                        If bll.UserType = 1 Then
                            sSender = embll.GetEmail(bll.Username, "ecorp")
                            sCC = embll.GetEmail("", "ecorp", "", bll.AccountCode)
                            If Trim(sCC) = "" Then
                                sCC = embll.GetEmailCC("ecorp", bll.AccountCode)
                            End If
                        ElseIf bll.UserType = 2 Then
                            sSender = embll.GetEmail(bll.Username, "eaccount")
                            sCC = embll.GetEmailCC("eaccount", bll.AccountCode)
                        End If

                        'If Trim(embll.send_to_tag) <> "" Then
                        '    Select Case Trim(embll.send_to_tag)
                        '        Case "ecorp_main"

                        '            If Trim(sCC) <> "" Then
                        '                sCC = sCC & " , " & embll.GetEmail("", "ecorp", "", bll.AccountCode)
                        '            Else
                        '                sCC = embll.GetEmail("", "ecorp", "", bll.AccountCode)
                        '            End If

                        '        Case "eaccount_main"

                        '            If Trim(sCC) <> "" Then
                        '                sCC = sCC & " , " & embll.GetEmail("", "eaccount", sAgnCode, bll.AccountCode)
                        '            Else
                        '                sCC = embll.GetEmail("", "eaccount", sAgnCode, bll.AccountCode)
                        '            End If

                        '    End Select
                        'End If

                        'If embll.self Then
                        '    embll.send_to_email = embll.send_to_email & ", " & sSender
                        'End If

                        If Trim(embll.send_to_email) <> "" Then
                            Dim bsent As Boolean = False
                            Dim sUserFullName As String = oCorpBLL.GetUserFullName(.uploaded_by, bll.UserType)

                            'remove tabs
                            While txtUploadRemarks.Text.Contains(vbTab)
                                txtUploadRemarks.Text = txtUploadRemarks.Text.Replace(vbTab, " ")
                            End While

                            'remove nextline
                            While txtUploadRemarks.Text.Contains(vbCrLf)
                                txtUploadRemarks.Text = txtUploadRemarks.Text.Replace(vbCrLf, " ")
                            End While

                            sMsg = "<p> A new " & ddlSubject.SelectedValue & " was filed by " & sUserFullName & " with the following details:</p>"
                            sMsg = sMsg & "<p>Reference No. : " & lID & "</p>"
                            'sMsg = sMsg & "<p>Filename : <a href='" & sDLink & "' target='_blank'>" & sFilename & "</a></p>"

                            If sFilename.Contains(";") Then
                                Dim sp As String()
                                sp = sFilename.Split(New Char() {";"c})
                                For Each fname As String In sp
                                    Dim flink As String = ConfigurationManager.AppSettings("BaseUrl") & "/DLPage.aspx?flname=" & HttpUtility.UrlEncode(fname)
                                    sMsg = sMsg & "<p>Filename : <a href='" & flink & "' target='_blank'>" & fname & "</a></p>"
                                Next
                            Else
                                sMsg = sMsg & "<p>Filename : <a href='" & sDLink & "' target='_blank'>" & sFilename & "</a></p>"
                            End If

                            sMsg = sMsg & "<p>Date time received : " & Now & "</p>"
                            sMsg = sMsg & "<p>Remarks : " & Trim(Replace(Replace(txtUploadRemarks.Text, vbTab, " "), vbCrLf, " ")) & "</p>"

                            sMsg = sMsg & "<br/><p><i>If the link is not working, try copying and pasting the following link into your browser:</i></p>"
                            'sMsg = sMsg & "<p><a href='" & sDLink & "' target='_blank'>" & sDLink & "</a></p>"

                            If sFilename.Contains(";") Then
                                Dim sp As String()
                                sp = sFilename.Split(New Char() {";"c})
                                For Each fname As String In sp
                                    Dim flink As String = ConfigurationManager.AppSettings("BaseUrl") & "/DLPage.aspx?flname=" & HttpUtility.UrlEncode(fname)
                                    sMsg = sMsg & "<p><a href='" & flink & "' target='_blank'>" & flink & "</a></p>"
                                Next
                            Else
                                sMsg = sMsg & "<p><a href='" & sDLink & "' target='_blank'>" & sDLink & "</a></p>"
                            End If

                            Mailhelper.MailHelper.SendMailMessage("noreply@medicardphils.com", embll.send_to_email, embll.bcc, sCC, sTitle, sMsg)
                            bsent = Mailhelper.MailHelper.Sent

                            Dim sNotifyMsg As String = String.Empty
                            If bll.UserType = 1 Then
                                sNotifyMsg = "<p>Thank you for using eCorporate!</p>"
                            ElseIf bll.UserType = 2 Then
                                sNotifyMsg = "<p>Thank you for using eAccount!</p>"
                            End If
                            sNotifyMsg = sNotifyMsg & "<p>We have received your new request for " & ddlSubject.SelectedValue & ".</p>"
                            sNotifyMsg = sNotifyMsg & "<p>Reference No. : " & lID & "</p>"
                            'sNotifyMsg = sNotifyMsg & "<p>Filename : <a href='" & sDLink & "' target='_blank'>" & sFilename & "</a></p>"

                            If sFilename.Contains(";") Then
                                Dim sp As String()
                                sp = sFilename.Split(New Char() {";"c})
                                For Each fname As String In sp
                                    Dim flink As String = ConfigurationManager.AppSettings("BaseUrl") & "/DLPage.aspx?flname=" & HttpUtility.UrlEncode(fname)
                                    sNotifyMsg = sNotifyMsg & "<p>Filename : <a href='" & flink & "' target='_blank'>" & fname & "</a></p>"
                                Next
                            Else
                                sNotifyMsg = sNotifyMsg & "<p>Filename : <a href='" & sDLink & "' target='_blank'>" & sFilename & "</a></p>"
                            End If

                            sNotifyMsg = sNotifyMsg & "<p>Date time received : " & Now & "</p>"
                            sNotifyMsg = sNotifyMsg & "<p>Remarks : " & Trim(Replace(Replace(txtUploadRemarks.Text, vbTab, " "), vbCrLf, " ")) & "</p>"
                            Mailhelper.MailHelper.SendMailMessage("noreply@medicardphils.com", sSender, "", "", sTitle, sNotifyMsg)

                        End If

                    End Using

                    'Mailhelper.MailHelper.SendMailMessage(.uploaded_by, "mgabat@medicardphils.com", "ctubig@medicardphils.com", "ctubig@medicardphils.com", sTitle, sMsg)
                End Using

            End With

            'Response.Redirect("Endorsement.aspx?t=" & Request.QueryString("t") & "&c=" & Request.QueryString("c") & "&u=" & HttpUtility.UrlEncode(Request.QueryString("u")) & "&agnt=" & Request.QueryString("agnt") & "&a=" & Request.QueryString("a") & "&msg=The file has been uploaded.")
            Response.Redirect("Endorsement.aspx?t=" & Request.QueryString("t") & "&c=" & Request.QueryString("c") & "&u=" & HttpUtility.UrlEncode(Request.QueryString("u")) & "&agnt=" & Request.QueryString("agnt") & "&a=" & Request.QueryString("a") & "&msg=The file has been uploaded.")

        End Using
    End Sub

    Protected Sub grdRequest_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles grdRequest.RowCommand
        If (e.CommandName = "DownloadFile") Then
            ' Retrieve the row index stored in the CommandArgument property.
            Dim index As Integer = Convert.ToInt32(e.CommandArgument)

            Dim grow As GridViewRow = grdRequest.Rows(index)

            Dim sFilename As String = grdRequest.Rows(index).Cells(3).Text
            sFilename = sFilename.Replace("&nbsp;", "")
            If Trim(sFilename) = "" Then
                Exit Sub
            End If

            Response.Clear()

            Response.ClearContent()
            Response.ClearHeaders()
            Response.BufferOutput = True

            Response.AddHeader("Content-Disposition", "attachment; filename=" + sFilename)
            Response.ContentType = "application/octet-stream"
            'Response.WriteFile("F:\ECorporateFileUpload\" & sFilename)
            Response.WriteFile(ConfigurationManager.AppSettings("UploadDir") & sFilename)
            Response.End()
            HttpContext.Current.ApplicationInstance.CompleteRequest()

        ElseIf e.CommandName = "ViewDetail" Then

            Dim index As Integer = Convert.ToInt32(e.CommandArgument)
            Dim sRequestID As String = grdRequest.Rows(index).Cells(0).Text

            sRequestID = EncryptDecrypt.EncryptDecrypt.Encrypt(sRequestID, key)

            Response.Redirect("RequesDetails.aspx?t=" & Request.QueryString("t") & "&c=" & Request.QueryString("c") & "&u=" & HttpUtility.UrlEncode(Request.QueryString("u")) & "&agnt=" & Request.QueryString("agnt") & "&a=" & Request.QueryString("a") & "&dtl=" & HttpUtility.UrlEncode(sRequestID))

        End If
    End Sub

    Protected Sub grdRequest_PageIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles grdRequest.PageIndexChanged
        BindMembershipEndorsementCancelationRequest(0)
    End Sub

    Protected Sub grdRequest_PageIndexChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewPageEventArgs) Handles grdRequest.PageIndexChanging
        grdRequest.PageIndex = e.NewPageIndex
        grdRequest.DataBind()
    End Sub


    'Protected Sub grdRequest_PreRender(ByVal sender As Object, ByVal e As EventArgs) Handles grdRequest.PreRender
    '    BindMembershipEndorsementCancelationRequest(0)
    '    If grdRequest.Rows.Count > 0 Then

    '        grdRequest.UseAccessibleHeader = True

    '        grdRequest.HeaderRow.TableSection = TableRowSection.TableHeader

    '        grdRequest.FooterRow.TableSection = TableRowSection.TableFooter
    '    End If
    'End Sub

    Protected Sub grdClosedReq_PageIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles grdClosedReq.PageIndexChanged
        BindMembershipEndorsementCancelationRequest(1)
    End Sub

    Protected Sub grdClosedReq_PageIndexChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewPageEventArgs) Handles grdClosedReq.PageIndexChanging
        grdClosedReq.PageIndex = e.NewPageIndex
        grdClosedReq.DataBind()
    End Sub
End Class