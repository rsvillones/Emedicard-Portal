using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Corelib;
using Corelib.Models;
using PagedList;
using PagedList.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin;
using WebUI.Models;

namespace WebUI.Controllers
{
    [PasswordExpired(Roles = "SysAd, CanViewUsers, CanAddUsers, CanEditUsers, CanDeleteUsers")]
    public class UsersController : Controller
    {

        #region -- Struct --

        private struct AccountJson
        {
            public string id { get; set; }
            public string text { get; set; }
        }

        #endregion

        #region -- Variable Declarations --

        private ApplicationUserManager _userManager;
        private IdentityDataContext db = new IdentityDataContext();
        private LegacyDataContext legacyDb = new LegacyDataContext();
        private const string PASSWORD_DISPLAY = "###PASSWORD###";

        #endregion

        #region -- Constructor --

        public UsersController()
        {
            db.User = db.Users.FirstOrDefault(t => t.UserName == System.Web.HttpContext.Current.User.Identity.Name);
        }

        #endregion

        #region -- Properties --

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        #endregion

        #region -- Action Results --

        [Authorize(Roles = "SysAd, CanViewUsers")]
        public ActionResult Index(string sortOrder, int? page, string accountCode, string userName, string role, string messageType, string message)
        {
            var users = from t in db.Users.Include(t => t.Accounts).Include(t => t.Groups)
                        select t;

            if (User.IsInRole("ViewOnlyCreatedUsers"))
            {
                if (Helper.IsCorporateAdmin())
                {
                    var currentUser = db.Users.FirstOrDefault(t => t.UserName == User.Identity.Name);
                    var accountCodes = Helper.GetLegacyAccountCodes(db, legacyDb);
                    var userIds = db.Members.Where(t => accountCodes.Contains(t.AccountCode)).Select(t => t.UserId);
                    if (currentUser != null)
                    {
                        users = users.Where(t => userIds.Contains(t.Id) || t.CrById == currentUser.Id);
                    }
                    else
                    {
                        users = users.Where(t => userIds.Contains(t.Id));
                    }
                }
                else
                {
                    var currentUser = db.Users.FirstOrDefault(t => t.UserName == User.Identity.Name);
                    if (currentUser != null)
                    {
                        users = users.Where(t => t.CrById == currentUser.Id);
                    }
                    else
                    {
                        users = users.Where(t => 1 == 2);
                    }
                }
            }

            if (!string.IsNullOrEmpty(userName))
            {
                users = users.Where(t =>
                    t.UserName.Contains(userName) ||
                    t.Email.Contains(userName) ||
                    t.Name.Contains(userName)
                );
            }

            if (!string.IsNullOrEmpty(accountCode))
            {
                var accountCodes = db.AccountSettings.Where(t => t.AccountName.Contains(accountCode) || t.AccountCode.Contains(accountCode)).Select(t => t.AccountCode);
                var userIds = db.Members.Where(t => accountCodes.Contains(t.AccountCode)).Select(t => t.UserId);
                users = users.Where(t => userIds.Contains(t.Id));
            }
            if (!string.IsNullOrEmpty(role)) users = users.Where(t => t.Groups.Any(a => a.Name.Contains(role)));

            Helper.SetSortParameters<ApplicationUser>(this, ref users, sortOrder, "", new SortParameter() { PropertyName = "Name" },
                new List<SortParameter>()
                {
                    new SortParameter() { PropertyName = "Email"},
                    new SortParameter() { PropertyName = "UserName"}
                });

            ViewBag.AccountCode = accountCode;
            ViewBag.UserName = userName;
            ViewBag.Role = role;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            ViewBag.SearchValue = string.Format("{0} {1} {2}", accountCode, userName, role).Trim();

            return View(users.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        [Authorize(Roles = "SysAd, CanAddUsers")]
        public ActionResult Create()
        {
            var model = new ApplicationUserViewModel();

            ViewBag.Groups = Helper.GetGroups(db);
            ViewBag.PASSWORD_DISPLAY = PASSWORD_DISPLAY;

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "SysAd, CanAddUsers")]
        public ActionResult Create([Bind(Include = "Id, Guid, AgentCode, AgentCodeValidated, Email, PhoneNumber, UserName, UseActiveDirectory, Name, Password, ConfirmPassword, Designation, Address, Mobile, Fax, AcceptedMemorandumOfAgreement, IsMember, Accounts, DeactivatedBy, DeactivatedDate, IsActive")] ApplicationUserViewModel applicationUser, int[] GroupId)
        {
            SetGroups(GroupId, applicationUser);

            if (ModelState.IsValid)
            {
                var user = db.Users.FirstOrDefault(t => t.UserName == User.Identity.Name);
                if (user != null)
                {
                    applicationUser.CrById = user.Id;
                    if (!applicationUser.IsActive)
                    {
                        applicationUser.DeactivatedDate = DateTime.Now;
                        applicationUser.DeactivatedBy = user.UserName;
                    }
                }
                Helper.AddUser(applicationUser, db);

                return RedirectToAction("Index");
            }

            ViewBag.Groups = Helper.GetGroups(db);
            ViewBag.PASSWORD_DISPLAY = PASSWORD_DISPLAY;

            return View(applicationUser);
        }

        [Authorize(Roles = "SysAd, CanEditUsers")]
        public async Task<ActionResult> Edit(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var applicationUser = await db.Users.Include(t => t.Groups).Include(t => t.Accounts).FirstOrDefaultAsync(t => t.Guid == guid);
            if (applicationUser == null) return HttpNotFound();

            var model = new ApplicationUserViewModel();
            Helper.MapProperties(applicationUser, model);
            model.Password = PASSWORD_DISPLAY;
            model.ConfirmPassword = PASSWORD_DISPLAY;
            model.AgentCodeValidated = !String.IsNullOrEmpty(model.AgentCode) ? true : false;

            ViewBag.Groups = Helper.GetGroups(db);
            ViewBag.PASSWORD_DISPLAY = PASSWORD_DISPLAY;
            ViewBag.DisableDropdown = model.AgentCodeValidated;

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "SysAd, CanEditUsers")]
        public async Task<ActionResult> Edit([Bind(Include = "Id, Guid, AgentCode, AgentCodeValidated, Email, PhoneNumber, UserName, UseActiveDirectory, Name, Password, ConfirmPassword, CrById, Designation, Address, Mobile, Fax, AcceptedMemorandumOfAgreement, IsMember, Accounts, DeactivatedBy, DeactivatedDate, IsActive,LastPasswordChangedDate")] ApplicationUserViewModel applicationUser, int[] GroupId)
        {
            SetGroups(GroupId, applicationUser as ApplicationUser);

            if (ModelState.IsValid)
            {
                var currentUser = db.Users
                    .Include(t => t.Groups)
                    .Include(t => t.Accounts)
                    .FirstOrDefault(t => t.Guid == applicationUser.Guid);
                var currentUserName = currentUser.UserName;
                applicationUser.PasswordHash = currentUser.PasswordHash;
                applicationUser.SecurityStamp = currentUser.SecurityStamp;

                if (currentUser != null)
                {
                    if (!applicationUser.IsActive && currentUser.IsActive != applicationUser.IsActive)
                    {
                        applicationUser.DeactivatedDate = DateTime.Now;
                        applicationUser.DeactivatedBy = User.Identity.Name;
                    }
                    else if (applicationUser.IsActive && currentUser.IsActive != applicationUser.IsActive)
                    {
                        applicationUser.DeactivatedDate = null;
                        applicationUser.DeactivatedBy = null;
                    }
                    db.Entry(currentUser).CurrentValues.SetValues(applicationUser);
                    var currentAccounts = applicationUser.Accounts.Select(a => a.Id).ToList();
                    db.Accounts.RemoveRange(db.Accounts.Where(t => t.ApplicationUser.Id == currentUser.Id && !currentAccounts.Contains(t.Id)));
                    currentUser.Accounts = applicationUser.Accounts;

                    SetGroups(GroupId, currentUser);

                    db.Entry(currentUser).State = EntityState.Modified;

                    var member = db.Members.FirstOrDefault(t => t.UserId == currentUser.Id);
                    if (member != null)
                    {
                        member.UserName = currentUser.UserName;
                    }

                    await db.SaveChangesAsync();

                    if (applicationUser.Password != PASSWORD_DISPLAY)
                    {
                        await Helper.UpdateUserPasswordAsync(applicationUser.Id, applicationUser.UserName, applicationUser.Password);
                        applicationUser.LastPasswordChangedDate = DateTime.Now;
                        db.SaveChanges();
                    }

                    return RedirectToAction("Index");
                }
            }

            ViewBag.Groups = Helper.GetGroups(db);
            ViewBag.PASSWORD_DISPLAY = PASSWORD_DISPLAY;
            ViewBag.DisableDropdown = applicationUser.AgentCodeValidated;

            return View(applicationUser);
        }

        [Authorize(Roles = "SysAd, CanDeleteUsers")]
        public async Task<ActionResult> Delete(Guid? guid)
        {
            if (guid == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            ApplicationUser applicationUser = await db.Users.FirstOrDefaultAsync(t => t.Guid == guid);
            if (applicationUser == null)
            {
                return HttpNotFound();
            }
            return View(applicationUser);
        }

        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        [Authorize(Roles = "SysAd, CanDeleteUsers")]
        public async Task<ActionResult> DeleteConfirmed(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var applicationUser = await db.Users.Include(t => t.Accounts).FirstOrDefaultAsync(t => t.Guid == guid);
            if (applicationUser == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            db.Users.Remove(applicationUser);
            if (applicationUser.Accounts.Count > 0) db.Accounts.RemoveRange(applicationUser.Accounts);
            await db.SaveChangesAsync();
            return RedirectToAction("Index", new { messageType = "Success", message = "User successfully deleted." });
        }

        public ActionResult AddNewAccount()
        {
            var model = new Account();
            return PartialView("_Account", model);
        }

        public async Task<ActionResult> GetAssociatedAccounts(string agentCode, string applicationUserId)
        {
            var legacyAccounts = await LegacyHelper.GetLegacyAccounts(legacyDb, agentCode)
                .OrderBy(t => t.Name)
                .ToListAsync();

            var model = new List<Account>();
            foreach (var legacyAccount in legacyAccounts)
            {
                var account = db.Accounts.FirstOrDefault(t => t.Code == legacyAccount.Code && t.ApplicationUser.Id == applicationUserId) ?? new Account()
                {
                    Code = legacyAccount.Code,
                    Name = legacyAccount.Name
                };
                model.Add(account);
            }

            ViewBag.DisableDropdown = true;

            return PartialView("_AssociatedAccountsTemplate", model);
        }

        public JsonResult GetLegacyAccounts(string q)
        {
            var accounts = LegacyHelper.GetLegacyAccounts(db, legacyDb, System.Web.HttpContext.Current.User);
            accounts = accounts.Where(t => t.Name.StartsWith(q) || t.Code.StartsWith(q));

            var returnValue = new List<AccountJson>();
            foreach (var account in accounts)
            {
                returnValue.Add(new AccountJson()
                {
                    id = account.Code,
                    text = account.Name
                });
            }

            return this.Json(returnValue, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region -- Functions --

        private void SetGroups(int[] GroupId, ApplicationUser applicationUser)
        {
            foreach (var group in db.Groups.ToList())
            {
                if (applicationUser.Groups.Any(t => t.Id == group.Id) && ((GroupId != null && !GroupId.Any(t => t == group.Id)) || GroupId == null))
                {
                    applicationUser.Groups.Remove(group);
                }
            }

            if (GroupId != null)
            {
                foreach (var groupId in GroupId)
                {
                    var group = db.Groups.FirstOrDefault(t => t.Id == groupId);

                    if (group != null && !applicationUser.Groups.Any(t => t.Id == group.Id))
                    {
                        applicationUser.Groups.Add(group);
                    }
                }
            }
        }

        private void SetAccount(string[] Accounts, bool[] UseAccountCode, bool[] IsReadOnly, bool[] IsCorporateAdmin, bool[] IsUnderWriter, ApplicationUser applicationUser)
        {
            var accountsToDelete = new List<Account>();
            foreach (var account in applicationUser.Accounts)
            {
                if (Accounts != null && Accounts.Any(t => t == account.Code))
                {
                    for (var index = 0; index < Accounts.Length; index++)
                    {
                        if (Accounts[index] == account.Code && !UseAccountCode[index])
                        {
                            accountsToDelete.Add(account);
                            break;
                        }
                    }
                }
                else
                {
                    accountsToDelete.Add(account);
                }
            }

            foreach (var account in accountsToDelete)
            {
                applicationUser.Accounts.Remove(account);
            }

            if (Accounts != null)
            {
                for (var index = 0; index < Accounts.Length; index++)
                {
                    var accountCode = Accounts[index];
                    if (UseAccountCode[index])
                    {
                        var account = applicationUser.Accounts.FirstOrDefault(t => t.Code == accountCode);
                        if (account == null)
                        {
                            applicationUser.Accounts.Add(new Account()
                            {
                                Code = accountCode,
                                IsReadOnly = IsReadOnly[index],
                                IsCorporateAdmin = IsCorporateAdmin[index],
                                IsUnderWriter = IsUnderWriter[index]
                            });
                        }
                        else
                        {
                            account.Code = Accounts[index];
                            account.IsReadOnly = IsReadOnly[index];
                            account.IsCorporateAdmin = IsCorporateAdmin[index];
                            account.IsUnderWriter = IsUnderWriter[index];
                        }
                    }
                }

            }
        }

        public async Task<JsonResult> ValidateAgentCode(string code)
        {
            var returnValue = new Dictionary<string, object>();
            var legacyAgent = await legacyDb.LegacyAgents.FirstOrDefaultAsync(t => t.Code == code);

            if (legacyAgent != null)
            {
                returnValue.Add("legacyAgent", legacyAgent);
            }

            return legacyAgent != null ? this.Json(returnValue, JsonRequestBehavior.AllowGet) : null;
        }

        public ActionResult UpdateActiveUer(Guid? guid, bool isActive)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var applicationUser = db.Users.Include(t => t.Accounts).FirstOrDefault(t => t.Guid == guid);
            if (applicationUser == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            applicationUser.IsActive = isActive;
            if (!applicationUser.IsActive)
            {
                applicationUser.DeactivatedDate = DateTime.Now;
                applicationUser.DeactivatedBy = System.Web.HttpContext.Current.User.Identity.Name;
            }
            else
            {
                applicationUser.DeactivatedDate = null;
                applicationUser.DeactivatedBy = null;
            }

            db.Entry(applicationUser).State = EntityState.Modified;
            db.SaveChanges();

            return PartialView("_User", applicationUser);
        }

        #endregion

        #region -- Overrides --

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
                legacyDb.Dispose();
            }
            base.Dispose(disposing);
        }

        #endregion
    }
}
