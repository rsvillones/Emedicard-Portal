using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Corelib;
using Corelib.Models;
using PagedList;
using PagedList.Mvc;
using WebUI.Models;

namespace WebUI.Controllers
{
    [Authorize(Roles = "SysAd, CanViewGroups, CanAddGroups, CanEditGroups, CanDeleteGroups")]
    public class GroupsController : Controller
    {
        #region -- Variable Declarations --

        private IdentityDataContext db = new IdentityDataContext();

        #endregion

        #region -- Constructor --

        public GroupsController()
        {
            db.User = db.Users.FirstOrDefault(t => t.UserName == System.Web.HttpContext.Current.User.Identity.Name);
        }

        #endregion

        #region -- Action Results --

        [Authorize(Roles = "SysAd, CanViewGroups")]
        public ActionResult Index(string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            var groups = from t in db.Groups where !t.Deleted select t;
            if (!string.IsNullOrEmpty(currentFilter))
            {
                groups = groups.Where(t => t.Name.Contains(currentFilter));
            }

            if (User.IsInRole("ViewOnlyCreatedGroups") && !User.IsInRole("SysAd"))
            {
                var user = db.Users.FirstOrDefault(t => t.UserName == User.Identity.Name);
                if (user != null)
                {
                    groups = groups.Where(t => t.CrById == user.Id);
                }
                else
                {
                    groups = groups.Where(t => 1 == 2);
                }
            }
            else
            {
                groups = groups.Where(t => t.IsSystemGroup);
            }

            Helper.SetSortParameters<Group>(this, ref groups, sortOrder, currentFilter, new SortParameter() { PropertyName = "Name" }, null);

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            return View(groups.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        [Authorize(Roles = "SysAd, CanAddGroups")]
        public ActionResult Create()
        {
            var model = new Group();
            model.Roles.Add(db.Roles.FirstOrDefault(t => t.Name == "ViewOnlyCreatedUsers") as ApplicationRole);
            model.Roles.Add(db.Roles.FirstOrDefault(t => t.Name == "ViewOnlyCreatedGroups") as ApplicationRole);
            model.Roles.Add(db.Roles.FirstOrDefault(t => t.Name == "CanOnlyAssignAssignedPermissions") as ApplicationRole);

            ViewBag.Groups = Helper.GetGroups(db);
            SetPermissions();

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "SysAd, CanAddGroups")]
        public async Task<ActionResult> Create([Bind(Include = "Name, Guid")] Group group, string[] RoleId, Guid[] GroupGuid)
        {
            if (RoleId != null)
            {
                foreach (var roleId in RoleId)
                {
                    var role = db.Roles.FirstOrDefault(t => t.Name == roleId) as ApplicationRole;
                    if (role != null)
                    {
                        group.Roles.Add(role);
                    }
                }
            }

            if (GroupGuid != null)
            {
                foreach (var guid in GroupGuid)
                {
                    group.AccessibleGroups.Add(new AccessibleGroup() { GroupGuid = guid });
                }
            }

            if (ModelState.IsValid)
            {
                group.IsSystemGroup = User.IsInRole("SysAd");
                db.Groups.Add(group);
                try
                {
                    await db.SaveChangesAsync();
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return RedirectToAction("Index");
            }

            ViewBag.Groups = Helper.GetGroups(db);
            SetPermissions();

            return View(group);
        }

        [Authorize(Roles = "SysAd, CanEditGroups")]
        public async Task<ActionResult> Edit(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            Group group = await db.Groups.Include(t => t.Roles).Include(t => t.AccessibleGroups).FirstOrDefaultAsync(t => t.Guid == guid);
            if (group == null) return HttpNotFound();

            ViewBag.Groups = Helper.GetGroups(db);
            SetPermissions();

            return View(group);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "SysAd, CanEditGroups")]
        public async Task<ActionResult> Edit([Bind(Include = "Id, Name, Guid, IsSystemGroup, CrById")] Group group, string[] RoleId, Guid[] GroupGuid)
        {
            if (ModelState.IsValid)
            {
                var currentGroup = db.Groups
                    .Include(t => t.Roles)
                    .Include(t => t.AccessibleGroups)
                    .Include(t => t.Users)
                    .FirstOrDefault(t => t.Guid == group.Guid);
                if (currentGroup != null && currentGroup.Roles != null)
                {
                    var forApplicationRoleDeleting = new List<ApplicationRole>();
                    foreach (var role in currentGroup.Roles)
                    {
                        if (RoleId == null || !RoleId.Any(t => t == role.Id))
                        {
                            forApplicationRoleDeleting.Add(role);
                        }
                    }
                    foreach (var role in forApplicationRoleDeleting)
                    {
                        currentGroup.Roles.Remove(role);
                    }

                    if (RoleId != null)
                    {
                        foreach (var roleId in RoleId)
                        {
                            if (!currentGroup.Roles.Any(t => t.Name == roleId))
                            {
                                var role = db.Roles.FirstOrDefault(t => t.Name == roleId) as ApplicationRole;
                                if (role != null)
                                {
                                    currentGroup.Roles.Add(role);
                                }
                            }
                        }
                    }

                    var forAccessibleGroupDeleting = new List<AccessibleGroup>();
                    foreach (var accessibleGroup in currentGroup.AccessibleGroups)
                    {
                        if (GroupGuid == null || !GroupGuid.Any(t => t == accessibleGroup.GroupGuid))
                        {
                            forAccessibleGroupDeleting.Add(accessibleGroup);
                        }
                    }
                    foreach (var accessibleGroup in forAccessibleGroupDeleting)
                    {
                        currentGroup.AccessibleGroups.Remove(accessibleGroup);
                    }

                    if (GroupGuid != null)
                    {
                        foreach (var groupGuid in GroupGuid)
                        {
                            if (!currentGroup.AccessibleGroups.Any(t => t.GroupGuid == groupGuid))
                            {
                                currentGroup.AccessibleGroups.Add(new AccessibleGroup() { GroupGuid = groupGuid });
                            }
                        }
                    }

                    db.Entry(currentGroup).CurrentValues.SetValues(group);
                    db.Entry(currentGroup).State = EntityState.Modified;
                    await db.SaveChangesAsync();

                    return RedirectToAction("Index");
                }
                else
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }

            }

            ViewBag.Groups = Helper.GetGroups(db);
            SetPermissions();

            return View(group);
        }

        [Authorize(Roles = "SysAd, CanDeleteGroups")]
        public async Task<ActionResult> Delete(Guid? guid)
        {
            if (guid == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Group group = await db.Groups.FirstOrDefaultAsync(t => t.Guid == guid);
            if (group == null)
            {
                return HttpNotFound();
            }
            return View(group);
        }

        [Authorize(Roles = "SysAd, CanDeleteGroups")]
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(Guid guid)
        {
            Group group = await db.Groups.FirstOrDefaultAsync(t => t.Guid == guid);
            db.Groups.Remove(group);
            await db.SaveChangesAsync();
            return RedirectToAction("Index", new { messageType = "Success", message = "Role successfully deleted." });
        }

        #endregion

        #region -- Functions --

        private void SetPermissions()
        {
            ViewBag.Permissions = new List<Permission>()
            {
                new Permission() { Display="Roles", Name="Groups", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=0},
                new Permission() { Display="Users", Name="Users", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=0},
                new Permission() { Display="Question Groups", Name="QuestionGroups", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=0},
                new Permission() { Display="Questions", Name="Questions", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=0},
                new Permission() { Display="Account Settings", Name="AccountSettings", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=0},
                new Permission() { Display="Use Email as Login", Name="AccountSettingsUseEmailAsLogin", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="Use Random Generated Password", Name="AccountSettingsUseRandomGeneratedPassword", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="Bypass Corporate Admin Approval", Name="AccountSettingsBypassCorporateAdminApproval", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="Bypass Medical History", Name="AccountSettingsBypassMedicalHistory", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="URG Setting", Name="AccountSettingsUrgSetting", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="Domain Email", Name="AccountSettingsDomainEmail", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="Directly Submit to Urg", Name="DirectlySubmitToUrg", HasView=false, HasAdd=false, HasEdit=true, HasDelete=false, Indent=1},
                new Permission() { Display="Document Types", Name="DocumentTypes", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=0},
                new Permission() { Display="Reasons", Name="Reasons", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=0},
                new Permission() { Display="Receiving Entries", Name="ReceivingEntries", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=0},
                new Permission() { Display="Action Memos", Name="ActionMemos", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=0},
                new Permission() { Display="eCorporate Services", Name="eCorporateServices", HasView=false, HasAdd=false, HasEdit=false, HasDelete=false, Indent=0},
                new Permission() { Display="Account Manager", Name="AccountManager", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=1},
                new Permission() { Display="Account Information", Name="AccountInformation", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="Utilization Reporting", Name="UtilizationReporting", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="Utilization Report Exception For User", Name="UtilizationReportExceptionForUser", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=2},
                new Permission() { Display="Utilization Report Exception For Plan", Name="UtilizationReportExceptionForPlan", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=2},
                new Permission() { Display="Active Members", Name="ActiveMembers", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},                
                new Permission() { Display="Resigned Members", Name="ResignedMembers", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},                
                new Permission() { Display="Benefits and Exclusions", Name="BenefitsAndExclusions", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},                
                new Permission() { Display="Hospitalization and Out-Patient Services", Name="HospitalizationAndOutPatientServices", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Preventive Healthcare Services", Name="PreventiveHealthcareServices", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Emergency Care Services", Name="EmergencyCareServices", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Member Financial Assistance", Name="MemberFinancialAssistance", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Dental Care Services", Name="DentalCareServices", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Pre-Existing Condition", Name="PreExistingCondition", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Point of Service", Name="PointOfService", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Maternity", Name="Maternity", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Executive Check Up", Name="ExecutiveCheckUp", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Exclusions", Name="Exclusions", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Dreaded Disease", Name="DreadedDisease", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Membership Eligibility", Name="MembershipEligibility", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=3},
                new Permission() { Display="Application Management", Name="ApplicationManagement", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="Application For Addition Dependents", Name="AdditionalDependents", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="Cancellation Of Dependent's Membership", Name="DependentCancellations", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="Membership Endorsements", Name="MembershipEndorsements", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="New Memberships", Name="NewMemberships", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="Membership Renewal", Name="MembershipRenewals", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="Membership Cancellation", Name="MembershipCancellations", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="Endorsement Approvals", Name="EndorsementApprovals", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="Endorsement Listings", Name="EndorsementListings", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="Request Management", Name="RequestManagement", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=2},
                new Permission() { Display="Amendments", Name="Amendments", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="ID Replacements", Name="IdReplacements", HasView=true, HasAdd=true, HasEdit=true, HasDelete=true, Indent=3},
                new Permission() { Display="Action Memo Management", Name="ActionMemoManagement", HasView=true, HasAdd=false, HasEdit=true, HasDelete=false, Indent=2},
                                
                //new Permission() { Display="Profile Management", Name="ProfileManagement", HasView=true, HasAdd=false, HasEdit=false, HasDelete=false, Indent=1},
                
            };
        }

        #endregion

        #region -- Overrides --

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        #endregion
    }
}
