using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Corelib;
using Corelib.Models;
using OfficeOpenXml;
using System.IO;
using System.Data.Entity;
using Corelib.Classes;
using System.Threading.Tasks;
using System.Net;
using Corelib.Enums;
using System.Reflection;
using System.ComponentModel.DataAnnotations;
using WebUI.Areas.CorporateAdministrator.Models;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    [Authorize(Roles = "SysAd, CanViewUtilizationReportException")]
    public class UtilizationReportExceptionsController : BaseAccountController
    {
        #region -- Action Results --

        public ActionResult Index(string accountCode, int? page, string messageType, string message)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var utilizationReportExceptions = db.UtilizationReportExceptions
                .Where(t => t.AccountCode == this.LegacyAccount.Code).OrderByDescending(t=>t.CrDate).ToList();

            var utilizationReportExceptionForPlans = db.UtilizationReportExceptionForPlans
                .Where(t => t.AccountCode == this.LegacyAccount.Code).OrderByDescending(t => t.CrDate).ToList();

            var viewModel = new UtilizationReportExceptionViewModel()
            {
                UtilizationReportExceptions = utilizationReportExceptions,
                UtilizationReportExceptionForPlans = utilizationReportExceptionForPlans
            };

            SetData(accountCode);

            return View(viewModel);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Index(UtilizationReportExceptionViewModel model,string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;
            if (ModelState.IsValid)
            {
                #region -- Utilization Report Exception For Users --
                
                if (model.UtilizationReportExceptions != null)
                {                    
                    foreach (var item in model.UtilizationReportExceptions)
                    {
                        if (item.Id == 0)
                        {
                            db.UtilizationReportExceptions.Add(item);
                        }
                        else
                        {
                            var exception = db.UtilizationReportExceptions.FirstOrDefault(t => t.Id == item.Id && !t.Deleted);
                            db.Entry(exception).CurrentValues.SetValues(item);
                            db.Entry(exception).State = EntityState.Modified;
                        }
                    }
                }

                var modelIds = model.UtilizationReportExceptions != null ? model.UtilizationReportExceptions.Select(t => t.Id).ToArray() : new int[0];
                var removeData = db.UtilizationReportExceptions.Where(t => !t.Deleted && !modelIds.Contains(t.Id)).ToList();
                db.UtilizationReportExceptions.RemoveRange(removeData);

                #endregion

                #region -- Utilization Report Exception For Users --

                if (model.UtilizationReportExceptionForPlans != null)
                {
                    foreach (var item in model.UtilizationReportExceptionForPlans)
                    {
                        if (item.Id == 0)
                        {
                            db.UtilizationReportExceptionForPlans.Add(item);
                        }
                        else
                        {
                            var exception = db.UtilizationReportExceptionForPlans.FirstOrDefault(t => t.Id == item.Id && !t.Deleted);
                            db.Entry(exception).CurrentValues.SetValues(item);
                            db.Entry(exception).State = EntityState.Modified;
                        }
                    }
                }
                var modelPlanIds = model.UtilizationReportExceptionForPlans != null ? model.UtilizationReportExceptionForPlans.Select(t => t.Id).ToArray() : new int[0];
                var removePlanData = db.UtilizationReportExceptionForPlans.Where(t => !t.Deleted && !modelPlanIds.Contains(t.Id)).ToList();
                db.UtilizationReportExceptionForPlans.RemoveRange(removePlanData);

                #endregion

                db.SaveChanges();
                return RedirectToAction("Index", new { accountCode = accountCode, messageType = "Success!", message = "Utilization Report Exception successfully saved." });
            }
            SetData(accountCode);
            if (model.UtilizationReportExceptions == null) model.UtilizationReportExceptions = new List<UtilizationReportException>();
            return View(model);
        }

        #endregion

        #region -- Functions --

        public ActionResult NewUtilizationReportException(string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            var model = new UtilizationReportException() { AccountCode = accountCode };

            IsReadOnlyAttribute();
            ViewBag.Members = db.Members.Where(t => !t.Deleted && t.AccountCode == accountCode).OrderBy(t => t.LastName);
            ViewBag.Users = GetUsers();  
            return PartialView("_UtilizationReportException",model);
        }

        public ActionResult NewUtilizationReportExceptionForPlan(string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            var model = new UtilizationReportExceptionForPlan() { AccountCode = accountCode };

            IsReadOnlyAttribute();
            ViewBag.Members = db.Members.Where(t => !t.Deleted && t.AccountCode == accountCode).OrderBy(t => t.LastName);
            ViewBag.Plans = Helper.GetAllLegacyRoomRates(this.LegacyAccount.Code);
            return PartialView("_UtilizationReportExceptionForPlan", model);
        }

        public ActionResult IsReadOnlyAttribute()
        {
            #region -- Can Add Or Edit Utilization Report Exception --

            if (User.IsInRole("SysAd") || User.IsInRole("CanAddUtilizationReportException") || User.IsInRole("CanEditUtilizationReportException"))
            {
                ViewBag.HtmlDropDownAttribute = new { @class= "form-control" };
            }
            else
            {
                ViewBag.HtmlDropDownAttribute = new { @disabled = "disabled", @class = "form-control white-readonly" };
            }

            #endregion

            #region -- Can Add Or Edit Utilization Report Exception For Plan --

            if (User.IsInRole("SysAd") || User.IsInRole("CanAddUtilizationReportExceptionForPlan") || User.IsInRole("CanEditUtilizationReportExceptionForPlan"))
            {
                ViewBag.HtmlDropDownAttributeForPlan = new { @class = "form-control" };
            }
            else
            {
                ViewBag.HtmlDropDownAttributeForPlan = new { @disabled = "disabled", @class = "form-control white-readonly" };
            }

            #endregion

            return null;
        }

        public IEnumerable<ApplicationUser> GetUsers()
        {
            var users = db.Users.ToList();

            if (User.IsInRole("ViewOnlyCreatedUsers"))
            {
                var currentUser = db.Users.FirstOrDefault(t => t.UserName == User.Identity.Name);
                if (currentUser != null)
                {
                    users = users.Where(t => t.CrById == currentUser.Id).ToList();
                }
                else
                {
                    users = users.Where(t => 1 == 2).ToList();
                }
            }

            return users;
        }

        public void SetData(string accountCode)
        {
            IsReadOnlyAttribute();
            ViewBag.Members = db.Members.Where(t => !t.Deleted && t.AccountCode == accountCode).OrderBy(t => t.LastName);
            ViewBag.Users = GetUsers();
            ViewBag.Plans = Helper.GetAllLegacyRoomRates(this.LegacyAccount.Code);
        }

        #endregion
    }
}