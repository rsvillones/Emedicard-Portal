@model AdditionalDependent
<input type="hidden" id="DependentOptionalCount" value="@ViewBag.OptionalPlanCount">
<h4 class="form-title memberName">Name of Member</h4>
<div class="row memberName">
    <div class="col-lg-12">
        <div class="form-group">
            <div class="col-lg-12" id="MemberContainer">
                <div class="form-group">
                    <label class="control-label col-lg-2">@Html.Label("MemberId", "Member Name:")</label>
                    <div class="col-lg-10">
                        @Html.DropDownList("MemberId", (IEnumerable<SelectListItem>)ViewBag.MemberList, "-- Select --", ViewBag.HtmlMemberAttributes as object)
                        @Html.ValidationMessageFor(model => model.MemberId)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<h4 class="form-title">Dependent Details</h4>
<div class="row">
    <div class="col-lg-12">
        <div class="form-group">
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.LastName)</label>
            <div class="col-lg-4">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                @Html.ValidationMessageFor(model => model.LastName)
            </div>
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.DateOfBirth)</label>
            <div class="col-lg-4">
                @if (Model.DateOfBirth == DateTime.MinValue)
                {
                    <input class="form-control disabled text-box single-line" data-val="true" data-val-date="The field Date Of Birth: must be a date." data-val-required="The Date Of Birth: field is required." id="DateOfBirth" name="DateOfBirth" onchange="OnDateOfBirthChange()" type="datetime" value="" />
                }
                else
                {
                    @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = ViewBag.HtmlDateOfBirthAttributes })
                }
                @Html.ValidationMessageFor(model => model.DateOfBirth)
            </div>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="form-group">
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.FirstName)</label>
            <div class="col-lg-4">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.Age)</label>
            <div class="col-lg-4">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Age)
            </div>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="form-group">
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.MiddleName)</label>
            <div class="col-lg-4">
                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes =  ViewBag.HtmlControlReadOnlyAttributes })
                @Html.ValidationMessageFor(model => model.MiddleName)
            </div>
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.Gender)</label>
            <div class="col-lg-4">
                @Html.DropDownList("Gender", (IEnumerable<SelectListItem>)ViewBag.GenderList, ViewBag.HtmlDropDownAttributes as object)
                @Html.ValidationMessageFor(model => model.Gender)
            </div>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="form-group">
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.Suffix)</label>
            <div class="col-lg-4">
                @Html.EditorFor(model => model.Suffix, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                @Html.ValidationMessageFor(model => model.Suffix)
            </div>
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.CivilStatus)</label>
            <div class="col-lg-4">
                @Html.DropDownList("CivilStatus", (IEnumerable<SelectListItem>)ViewBag.CivilStatusList, ViewBag.HtmlDropDownAttributes as object)
                @Html.ValidationMessageFor(model => model.CivilStatus)
            </div>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="form-group">
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.Relationship)</label>
            <div class="col-lg-4">
                @Html.DropDownList("Relationship", (IEnumerable<SelectListItem>)ViewBag.RelationshipList,ViewBag.HtmlDropDownAttributes as object)
                @Html.ValidationMessageFor(model => model.Relationship)
            </div>
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.AppliedPlan)</label>
            <div class="col-lg-4">
                @Html.DropDownList("AppliedPlan", (IEnumerable<SelectListItem>)ViewBag.AppliedPlanList, "-- Select Applied Plan --",ViewBag.HtmlDropDownAttributes as object)
                @Html.ValidationMessageFor(model => model.AppliedPlan)
            </div>
        </div>
    </div>
    <div class="col-lg-12" id="OptionalPlanCount">
        <div class="form-group">
            <label class="control-label col-lg-2">&nbsp;</label>
            <div class="col-lg-4">&nbsp;</div>
            <label class="control-label col-lg-2">@Html.LabelFor(model => model.OptionalPlan)</label>
            <div class="col-lg-4">
                @Html.DropDownList("OptionalPlan", (IEnumerable<SelectListItem>)ViewBag.OptionalPlanList, "-- Select Optional Plan --", ViewBag.HtmlOptionalPlanAttributes as object)
                @Html.ValidationMessageFor(model => model.OptionalPlan)
                <span id="OptionalPlanWarning" class="@(Model.OptionalPlan.HasValue ? "" : "hidden") alert-danger">Selecting higher plan with excess amount will be shouldered by employee.</span>
            </div>
        </div>
    </div>
</div>

<h4 class="form-title">Contact Details</h4>
<div class="row">
    <div class="col-lg-12">
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Street)</label>
                    <div class="col-lg-10">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.Street)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.City)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.EmailAddress)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.EmailAddress)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Zip)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.Zip, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.Zip)
                    </div>
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Telephone)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.Telephone, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.Telephone)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Province)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.Province, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.Province)
                    </div>
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Mobile)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.Mobile, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.Mobile)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<h4 class="form-title">Other Details</h4>
<div class="row ">
    <div class="col-lg-12">

        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label class="control-label col-lg-2">Height:</label>
                    <div class="col-lg-2 bottom">
                        <div class="input-group input-group-sm">
                            @Html.EditorFor(model => model.HeightFeet, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                            @Html.ValidationMessageFor(model => model.HeightFeet)
                            <span class="input-group-addon">ft</span>
                        </div>
                    </div>
                    <div class="col-lg-2 bottom">
                        <div class="input-group input-group-sm">
                            @Html.EditorFor(model => model.HeightInches, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                            @Html.ValidationMessageFor(model => model.HeightInches)
                            <span class="input-group-addon">in</span>
                        </div>
                    </div>
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Occupation)</label>
                    <div class="col-lg-4">
                        @Html.EditorFor(model => model.Occupation, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                        @Html.ValidationMessageFor(model => model.Occupation)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="form-group">
                    <label class="control-label col-lg-2">@Html.LabelFor(model => model.Weight)</label>
                    <div class="col-lg-4 bottom">
                        <div class="input-group input-group-sm">
                            @Html.EditorFor(model => model.Weight, new { htmlAttributes = ViewBag.HtmlControlReadOnlyAttributes })
                            @Html.ValidationMessageFor(model => model.Weight)
                            <span class="input-group-addon">lbs</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


