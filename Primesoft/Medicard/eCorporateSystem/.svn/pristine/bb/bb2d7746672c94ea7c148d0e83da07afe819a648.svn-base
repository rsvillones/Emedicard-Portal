using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Corelib;
using Corelib.Models;
using OfficeOpenXml;
using System.IO;
using System.Data.Entity;
using Corelib.Classes;
using System.Threading.Tasks;
using System.Net;
using Corelib.Enums;
using System.Reflection;
using System.ComponentModel.DataAnnotations;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    [Authorize(Roles = "SysAd, CanViewApplicationManagement")]
    public class AdditionalDependentsController : BaseAccountController
    {
        #region  -- Action Results --

        public ActionResult Index(string accountCode, string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.AdditionalDependents
                .Include(t => t.EndorsementBatch)
                .Where(t => t.AccountCode == this.LegacyAccount.Code && !t.Deleted &&
                    t.Status != RequestStatus.Saved)
                .OrderByDescending(t => t.ApplicationDate).ToList();

            ViewBag.Members = db.Members.Where(t => !t.Deleted).ToList();

            return View(model.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        public ActionResult Create(string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            var model = new AdditionalDependent()
            {
                AccountCode = accountCode,
                Status = RequestStatus.Submitted
            };

            var dependentPlans = Helper.GetLegacyRoomRates(accountCode, false);
            var appliedPlans = dependentPlans.ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription");
            ViewBag.OptionalPlanList = new SelectList(appliedPlans, "Id", "LongDescription");
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" });
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Divorced", "Widowed" });
            ViewBag.RelationshipList = new SelectList(new List<string>() { "Parent", "Spouse", "Child", "Sibling" });
            ViewBag.MemberList = new SelectList(db.Members.Where(t => t.AccountCode == accountCode), "Id", "FullName");
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(AdditionalDependent model)
        {
            var returnValue = base.ValidateAccountCode(model.AccountCode);
            if (returnValue != null) return returnValue;

            if (ModelState.IsValid)
            {
                var endorsementBatch = new EndorsementBatch()
                {
                    Deadline = DateTime.Now,
                    ReferenceNumber = Helper.GenerateRandomEndorsementBatchReferenceNumber(),
                    Date = DateTime.Now,
                    EndorsementType = "Additional Dependent",
                    BatchType = "Additional Dependent",
                    EndorsementCount = 1,
                    AccountCode = model.AccountCode,
                    Status = Corelib.Enums.EndorsementBatchStatus.New
                };
                db.EndorsementBatches.Add(endorsementBatch);

                model.EndorsementBatch = endorsementBatch;
                db.AdditionalDependents.Add(model);                
                db.SaveChanges();

                return RedirectToAction("Index", new { accountCode = model.AccountCode });
            }

            ProcessOtherInfo(model.MemberId, model);

            return View(model);
        }


        #endregion

        #region -- Functions --

        public string GetDependentAppliedPlan(int? memberId)
        {
            var member = db.Members.FirstOrDefault(t => t.Id == memberId);
            var sb = new System.Text.StringBuilder();
            if (member != null){
                var dependentPlans = Helper.GetLegacyRoomRates(member.AccountCode, false);
                var appliedPlans = dependentPlans.Where(t => t.Id == member.DependentAppliedPlan).ToList();
                if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();
                sb.Append(string.Format(@"<option value=''>-- Select Applied Plan --</option>"));
                foreach (var appliedPlan in appliedPlans)
                {
                    sb.Append(string.Format(@"<option value='{0}'>{1}</option>", appliedPlan.Id, appliedPlan.LongDescription));
                }
                return sb.ToString();
            }
            return sb.Append(string.Format(@"<option value=''>-- Select Member --</option>")).ToString();
        }

        public string GetDependentOptionalPlan(int? memberId)
        {
            var member = db.Members.FirstOrDefault(t => t.Id == memberId);
            var sb = new System.Text.StringBuilder();
            if (member != null){
                var dependentPlans = Helper.GetLegacyRoomRates(member.AccountCode, false);

                var allowedPlans = new List<int>();
                if (!String.IsNullOrEmpty(member.AllowedDependentPlans))
                {
                    foreach (var allowedPlan in member.AllowedDependentPlans.Split(','))
                    {
                        allowedPlans.Add(int.Parse(allowedPlan));
                    }
                }

                var optionalPlans = dependentPlans.Where(t => t.Id != member.DependentAppliedPlan && allowedPlans.Contains(t.Id)).ToList();
                
                sb.Append(string.Format(@"<option value=''>-- Select Optional Plan --</option>"));
                foreach (var optionalPlan in optionalPlans)
                {
                    sb.Append(string.Format(@"<option value='{0}'>{1}</option>", optionalPlan.Id, optionalPlan.LongDescription));
                }
                return sb.ToString();
            }
            return sb.Append(string.Format(@"<option value=''>-- Select Member --</option>")).ToString();
        }

        public int GetDependentOptionalPlanCount(int? memberId)
        {
            var member = db.Members.FirstOrDefault(t => t.Id == memberId);
            if (member != null){
                var dependentPlans = Helper.GetLegacyRoomRates(member.AccountCode, false);

                var allowedPlans = new List<int>();
                if (!String.IsNullOrEmpty(member.AllowedDependentPlans))
                {
                    foreach (var allowedPlan in member.AllowedDependentPlans.Split(','))
                    {
                        allowedPlans.Add(int.Parse(allowedPlan));
                    }
                }
                var optionalPlans = dependentPlans.Where(t => t.Id != member.DependentAppliedPlan && allowedPlans.Contains(t.Id)).ToList();

                return optionalPlans.Count(t => t.Id != member.AppliedPlan);
            }
            return 0;
        }

        #endregion

        #region -- Process Other Info --

        private void ProcessOtherInfo(int memberId,AdditionalDependent model)
        {
            var member = db.Members.FirstOrDefault(t => t.Id == memberId) ?? new Corelib.Models.Member();
            var dependentPlans = Helper.GetLegacyRoomRates(model.AccountCode, false);
            var appliedPlans = dependentPlans.Where(t => t.Id == member.DependentAppliedPlan).ToList();
            if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();

            var allowedPlans = new List<int>();
            if (!String.IsNullOrEmpty(member.AllowedDependentPlans))
            {
                foreach (var allowedPlan in member.AllowedDependentPlans.Split(','))
                {
                    allowedPlans.Add(int.Parse(allowedPlan));
                }
            }

            var optionalPlans = dependentPlans.Where(t => t.Id != member.DependentAppliedPlan && allowedPlans.Contains(t.Id)).ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription", model.AppliedPlan);
            ViewBag.OptionalPlanList = new SelectList(optionalPlans, "Id", "LongDescription",model.OptionalPlan);
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" },model.Gender);
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Divorced", "Widowed" },model.CivilStatus);
            ViewBag.RelationshipList = new SelectList(new List<string>() { "Parent", "Spouse", "Child", "Sibling" }, model.Relationship);
            ViewBag.MemberList = new SelectList(db.Members.Where(t => t.AccountCode == model.AccountCode), "Id", "FullName",model.MemberId);
        }

        #endregion
    }
}