using System.Data.Entity;
using Corelib;
using Corelib.Models;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using WebUI.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

namespace WebUI
{
    public class SortParameter
    {
        public string PropertyName { get; set; }
    }

    public static class Helper
    {
        #region -- Functions --

        public static void SetSortParameters<T>(Controller controller, ref IQueryable<T> entities, string sortOrder, string currentFilter, SortParameter defaultParameter, IEnumerable<SortParameter> parameters)
        {
            controller.ViewBag.CurrentFilter = currentFilter;
            controller.ViewBag.CurrentSort = sortOrder;

            controller.ViewData.Add(String.Format("{0}SortParam", defaultParameter.PropertyName), String.IsNullOrEmpty(sortOrder) || sortOrder == defaultParameter.PropertyName.ToLower() ? String.Format("{0}_desc", defaultParameter.PropertyName.ToLower()) : defaultParameter.PropertyName.ToLower());
            if (String.IsNullOrEmpty(sortOrder) || sortOrder == defaultParameter.PropertyName.ToLower())
            {
                entities = entities.OrderBy(defaultParameter.PropertyName);
            }
            else if (sortOrder == String.Format("{0}_desc", defaultParameter.PropertyName.ToLower()))
            {
                entities = entities.OrderByDescending(defaultParameter.PropertyName);
            }

            if (parameters != null)
            {
                foreach (var parameter in parameters)
                {
                    controller.ViewData.Add(String.Format("{0}SortParam", parameter.PropertyName), String.IsNullOrEmpty(sortOrder) || sortOrder == parameter.PropertyName.ToLower() ? String.Format("{0}_desc", parameter.PropertyName.ToLower()) : parameter.PropertyName.ToLower());
                    if (sortOrder == parameter.PropertyName.ToLower())
                    {
                        entities = entities.OrderBy(parameter.PropertyName);
                    }
                    else if (sortOrder == String.Format("{0}_desc", parameter.PropertyName.ToLower()))
                    {
                        entities = entities.OrderByDescending(parameter.PropertyName);
                    }
                }
            }
        }

        public static void AddUser(ApplicationUserViewModel applicationUser)
        {
            using (var context = new IdentityDataContext())
            {
                if (!context.Users.Any(t => t.UserName == applicationUser.UserName))
                {
                    var userGroups = new Collection<Group>();
                    var groupIds = applicationUser.Groups.Select(x => x.Id).ToList();
                    var groups = context.Groups.Where(t => groupIds.Contains(t.Id)).ToList();
                    foreach (var group in groups)
                    {
                        userGroups.Add(group);
                    }
                    var user = new ApplicationUser();
                    MapProperties(applicationUser, user);
                    user.Groups = userGroups;

                    var store = new UserStore<ApplicationUser>(context);
                    var manager = new UserManager<ApplicationUser>(store);
                    manager.Create(user, applicationUser.Password);

                    context.SaveChanges();

                    SetUserGroup(context, store, manager, user);
                }
                else
                {
                    throw new Exception("UserName already exists.");
                }
            }
        }

        public static async Task<bool> UpdateUserPasswordAsync(string id, string username, string password)
        {
            using (var context = new IdentityDataContext())
            {
                if (context.Users.Any(t => t.Id == id))
                {

                    var store = new UserStore<ApplicationUser>(context);
                    var manager = new UserManager<ApplicationUser>(store);
                    string hashedPassword = manager.PasswordHasher.HashPassword(password);
                    var user = manager.FindById(id);
                    await store.SetPasswordHashAsync(user, hashedPassword);
                    await store.UpdateAsync(user);
                    await manager.UpdateSecurityStampAsync(id);
                }
            }

            return true;
        }

        public static void SetUserGroup(IdentityDataContext context, UserStore<ApplicationUser> store, UserManager<ApplicationUser> manager, ApplicationUser applicationUser)
        {
            bool disposeContext = false;
            if (context == null)
            {
                context = new IdentityDataContext();
                disposeContext = true;
            }

            if (store == null)
            {
                store = new UserStore<ApplicationUser>(context);
            }

            if (manager == null)
            {
                manager = new UserManager<ApplicationUser>(store);
            }

            foreach (var group in context.Groups.Include(t => t.Roles).ToList())
            {
                if (applicationUser.Groups == null || !applicationUser.Groups.Any(t => t.Id == group.Id))
                {
                    foreach (var role in group.Roles)
                    {
                        if (manager.IsInRole(applicationUser.Id, role.Name))
                        {
                            manager.RemoveFromRole(applicationUser.Id, role.Name);
                        }
                    }
                }
            }

            if (applicationUser.Groups != null)
            {
                foreach (var group in applicationUser.Groups)
                {
                    var currentGroup = context.Groups.Include(t => t.Roles).FirstOrDefault(t => t.Id == group.Id);
                    if (currentGroup != null)
                    {
                        foreach (var role in currentGroup.Roles)
                        {
                            if (!manager.IsInRole(applicationUser.Id, role.Name))
                            {
                                manager.AddToRole(applicationUser.Id, role.Name);
                            }
                        }
                    }
                }
            }

            context.SaveChanges();

            if (disposeContext)
            {
                context.Dispose();
            }
        }

        public static ApplicationUser AddUser(Corelib.IdentityDataContext context, UserStore<ApplicationUser> store, UserManager<ApplicationUser> manager, string name, string username, string password, string email, string phone, bool isMember, bool isAccountOfficer, params string[] roles)
        {
            bool disposeContext = false;
            if (context == null)
            {
                context = new IdentityDataContext();
                disposeContext = true;
            }

            if (store == null)
            {
                store = new UserStore<ApplicationUser>(context);
            }

            if (manager == null)
            {
                manager = new UserManager<ApplicationUser>(store);
            }

            var user = context.Users.FirstOrDefault(t => t.UserName == username);

            if (user == null)
            {
                user = new ApplicationUser
                {
                    Name = name,
                    UserName = username,
                    Email = email,
                    PhoneNumber = phone,
                    IsMember = isMember,
                    IsAccountOfficer = isAccountOfficer
                };

                manager.Create(user, password);
            }

            if (roles != null)
            {
                foreach (var role in roles)
                {
                    if (!manager.IsInRole(user.Id, role))
                    {
                        manager.AddToRole(user.Id, role);
                    }
                }
            }

            if (disposeContext)
            {
                context.Dispose();
            }

            return user;
        }

        public static void MapProperties(object source, object destination, bool mapId = true)
        {
            foreach (var pi in destination.GetType().GetProperties())
            {
                if (!pi.CanWrite || source.GetType().GetProperty(pi.Name) == null || (!mapId && pi.Name == "Id"))
                    continue;

                destination.GetType().GetProperty(pi.Name).SetValue(destination, source.GetType().GetProperty(pi.Name).GetValue(source));
            }
        }

        #endregion

        #region -- Extension Methods --

        public static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string ordering, params object[] values)
        {
            var type = typeof(T);
            var property = type.GetProperty(ordering);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderBy", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));

            return source.Provider.CreateQuery<T>(resultExp);
        }

        public static IQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string ordering, params object[] values)
        {
            var type = typeof(T);
            var property = type.GetProperty(ordering);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderByDescending", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));

            return source.Provider.CreateQuery<T>(resultExp);
        }

        #endregion
    }
}