using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.IO;
using Corelib.Models;
using Corelib.Classes;
using Corelib;
using System.Threading;
using WebUI.Models;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    public class MembershipEndorsementController : Controller
    {
        protected IdentityDataContext db = new IdentityDataContext();

        #region -- Action Results --

        // GET: CorporateAdministrator/MembershipEndorsement 
        public ActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public ActionResult UploadApplication(ImportViewModel importViewModel)
        {
            if (ModelState.IsValid)
            {
                var listApplication = db.Applications.Where(t => !t.Deleted).ToList();
                var appVerifications = new List<ApplicationVerification>();
                var numberOfErrors = 0;
                string fileName = "";

                if (importViewModel.ApplicationVerifications != null)
                {
                    foreach (var item in importViewModel.ApplicationVerifications)
                    {
                        item.IsError = false;

                        bool isExist;
                        try { 
                            var newDate = DateTime.Parse(item.DateOfBirth);
                            isExist = listApplication.Any(t => (t.DateOfBirth == newDate && t.LastName == item.LastName && t.FirstName == item.FirstName && t.MiddleName == item.MiddleName) && !t.Deleted);
                        }
                        catch {
                            isExist = false;
                        }
                                                
                        if (isExist)
                        {
                            item.IsError = true;
                            item.ErrorMessage = "Application already exist in the database.";
                            numberOfErrors++;
                        }
                        ValidateExcel(item, ref numberOfErrors);

                        appVerifications.Add(item);
                        fileName = item.FileName;
                    }

                    if (appVerifications.Any(t => t.IsError))
                    {
                        importViewModel.UploadSummary.NumberOfErrors = numberOfErrors;
                        var viewModel = new ImportViewModel()
                        {
                            ApplicationVerifications = appVerifications,
                            UploadSummary = importViewModel.UploadSummary
                        };
                        return PartialView("_NewApplicationVerification", viewModel);
                    }
                    else
                    {
                        if (appVerifications != null)
                        {
                            foreach (var item in appVerifications)
                            {                                
                                var application = new Application(item);
                                db.Applications.Add(application);
                            }
                        }
                    }

                    var removeAppVerification = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).ToList();
                    db.ApplicationVerifications.RemoveRange(removeAppVerification);
                }

                db.SaveChanges();
                return null;
            }
            var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList().Count();
            importViewModel.UploadSummary.NumberOfErrors = errors;
            importViewModel.ApplicationVerifications.ToList().ForEach(a => { a.IsError = false; });
            return PartialView("_NewApplicationVerification", importViewModel);
        }

        [HttpPost]
        public ActionResult UploadRenewal(ImportViewModel importViewModel)
        {
            if (ModelState.IsValid){
                var listApplication = db.Applications.Where(t => !t.Deleted).ToList();
                var appVerifications = new List<ApplicationVerification>();
                var numberOfErrors = 0;
                string fileName = "";

                if (importViewModel.ApplicationVerifications != null){
                    foreach (var item in importViewModel.ApplicationVerifications){
                        item.IsError = false;

                        bool isExist;
                        try{
                            var newDate = DateTime.Parse(item.DateOfBirth);
                            isExist = listApplication.Any(t => (t.DateOfBirth == newDate && t.LastName == item.LastName && t.FirstName == item.FirstName && t.MiddleName == item.MiddleName && t.Guid != item.Guid) && !t.Deleted);
                        }
                        catch{
                            isExist = false;
                        } 

                        var isGuidExist = listApplication.Any(t => t.Guid == item.Guid && !t.Deleted);
                        if(!isGuidExist){
                            item.IsError = true;
                            item.ErrorMessage = "GUID does'nt exist or has been editted.";
                            numberOfErrors++;
                        }
                        else if(isExist){
                            item.IsError = true;
                            item.ErrorMessage = "Application already exist in the database.";
                            numberOfErrors++;
                        }

                        ValidateExcel(item,ref numberOfErrors);
                        appVerifications.Add(item);
                        fileName = item.FileName;
                    }

                    if (appVerifications.Any(t => t.IsError)){
                        importViewModel.UploadSummary.NumberOfErrors = numberOfErrors;
                        var viewModel = new ImportViewModel() {
                            ApplicationVerifications = appVerifications,
                            UploadSummary = importViewModel.UploadSummary
                        };
                        return PartialView("_RenewalVerification", viewModel);
                    }
                    else{
                        if (appVerifications != null){
                            foreach (var item in appVerifications){
                                var application = db.Applications.FirstOrDefault(t => !t.Deleted && t.Guid == item.Guid);
                                application.EmailAddress = item.EmailAddress;
                                application.EmployeeNumber = item.EmployeeNumber;
                                application.Area = item.Area;
                                application.CostCenter = item.CostCenter;
                                application.LastName = item.LastName;
                                application.FirstName = item.FirstName;
                                application.MiddleName = item.MiddleName;
                                application.Suffix = item.Suffix;
                                application.Gender = item.Gender;
                                application.DateOfBirth = Convert.ToDateTime(item.DateOfBirth);
                                application.Age = Convert.ToInt32(item.Age);
                                application.CivilStatus = item.CivilStatus;
                                application.EffectivityDate = Convert.ToDateTime(item.EffectivityDate);
                                application.ValidityDate = Convert.ToDateTime(item.ValidityDate);
                                application.DateHired = Convert.ToDateTime(item.DateHired);
                                application.AppliedPlan = item.AppliedPlan;
                                application.OptionalPlan = item.OptionalPlan;
                                application.Dependent = Convert.ToInt32(item.Dependent);
                                application.DependentAppliedPlan = item.DependentAppliedPlan;
                                application.DependentOptionalPlan = item.DependentOptionalPlan;
                                application.MemberCode = item.MemberCode;
                                application.MembershipStatus = item.MembershipStatus;
                                application.MemberType = item.MemberType;
                                db.Entry(application).State = System.Data.Entity.EntityState.Modified;
                            }
                        }
                    }

                    var removeAppVerification = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).ToList();
                    db.ApplicationVerifications.RemoveRange(removeAppVerification);
                }

                db.SaveChanges();
                return null;
            }
            var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList().Count();
            importViewModel.UploadSummary.NumberOfErrors = errors;
            importViewModel.ApplicationVerifications.ToList().ForEach(a => { a.IsError = false; });
            return PartialView("_RenewalVerification", importViewModel);
        }

        #endregion

        #region -- Functions --

        public FileResult RenewalApplicationExcelDownload()
        {
            return File(ExcelTools.RenewalApplicationExcelDownload(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Renewal.xlsx");
        }

        public FileResult NewApplicationExcelDownload()
        {
            return File(ExcelTools.NewApplicationExcelDownload(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "New Application.xlsx");
        }

        public String UploadExcel(HttpPostedFileBase fileData)
        {
            var fileExtension = fileData.FileName.Substring(fileData.FileName.LastIndexOf(".") + 1);
            if (fileExtension != "xlsx") throw new Exception("File Not Valid");
            var filename = String.Format("{0}.{1}", Guid.NewGuid().ToString(), fileExtension);
            var filepath = System.Web.HttpContext.Current.Server.MapPath(string.Format("~/Uploads/{0}", filename));
            fileData.SaveAs(filepath);

            return filename;
        }

        [HttpPost]
        public JsonResult StartThreading(string filePath, string applicationType)
        {
            var path = System.Web.HttpContext.Current.Server.MapPath(string.Format("~/Uploads/{0}", filePath));
            if (applicationType == "New Application")
            {
                var thread = new Thread(new ParameterizedThreadStart(ExcelTools.ImportNewApplication));
                thread.Start(new ExcelTools.ImportParameter()
                {
                    Path = path,
                    Username = Config.CurrentUser
                });
            }
            else if (applicationType == "Renewal")
            {
                var thread = new Thread(new ParameterizedThreadStart(ExcelTools.ImportRenewalApplication));
                thread.Start(new ExcelTools.ImportParameter()
                {
                    Path = path,
                    Username = Config.CurrentUser
                });
            }
            return Json(new { Type = applicationType });
        }

        [HttpPost]
        public JsonResult ExcelValidation(string fileName, string applicationType)
        {
            var filePath = Path.GetFileName(fileName);

            var excelValidation = fileName != null ? db.UploadLogs.FirstOrDefault(t => t.FileName == filePath) : null;

            if (excelValidation != null)
            {
                return Json(new
                {
                    currentRow = excelValidation.CurrentRow,
                    rowCompleted = excelValidation.RowsCompleted,
                    numberOfItems = excelValidation.NumberOfItems,
                    status = (int)excelValidation.UploadStatus,
                    type = applicationType
                });
            }
            return Json(new
            {
                currentRow = 0,
                rowCompleted = 0,
                numberOfItems = 0,
                status = 0,
                type = applicationType
            });
        }

        [HttpPost]
        public ActionResult ImportComfirmation(string filePath, string applicationType)
        {
            var fileName = Path.GetFileName(filePath);
            var errors = db.ExcelErrors.Where(t => t.FileName == fileName && !t.Deleted).Select(t => t.RowNumber).Distinct().ToList();
            var employee = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).OrderBy(t => t.Row).ToList();
            ViewBag.FilePath = filePath;
            var errorMessage = "";
            if (db.ExcelErrors.Any(t => t.FileName == fileName && !t.Deleted && t.ErrorMessage == "Invalid Excel Format."))
            {
                errorMessage = "Invalid Excel Format.";
            }
            var summary = new UploadSummary()
            {
                RowCompleted = employee.Count,
                FileName = fileName,
                NumberOfErrors = errors.Count,
                ErrorMessage = errorMessage
            };
            var model = new ImportViewModel()
            {
                UploadSummary = summary,
                ApplicationVerifications = employee
            };

            if (applicationType == "New Application") return PartialView("NewApplicationImport", model);

            return PartialView("RenewalImport", model);
        }

        #endregion

        #region -- Excel Validation --
                
        private bool IsValidDateTime(string dateTime)
        {
            DateTime newDateTime;
            return DateTime.TryParse(dateTime,out newDateTime);
        }

        private bool IsValidInteger(string interger)
        {
            int newInteger;
            return int.TryParse(interger, out newInteger);
        }

        private bool IsValidDecimal(string decimalValue)
        {
            decimal newDecimal;
            return decimal.TryParse(decimalValue, out newDecimal);
        }

        private void ValidateExcel(ApplicationVerification model, ref int numberOfErrors)
        {
            if (!IsValidDateTime(model.DateOfBirth))
            {
                var message = "Input value in Date of Birth is invalid.";
                model.IsError = true;
                numberOfErrors = numberOfErrors + 1;
                if (string.IsNullOrEmpty(model.DateOfBirth)) message = "Input value in Date of Birth cannot be null.";
                model.ErrorMessage = model.ErrorMessage == null ? message : string.Format("{0}, {1}", model.ErrorMessage, message);
            }
            if (!IsValidDateTime(model.EffectivityDate))
            {
                var message = "Input value in Effectivity Date is invalid.";
                model.IsError = true;
                numberOfErrors = numberOfErrors + 1;
                if (string.IsNullOrEmpty(model.EffectivityDate)) message = "Input value in Effectivity Date cannot be null.";
                model.ErrorMessage = model.ErrorMessage == null ? message : string.Format("{0}, {1}", model.ErrorMessage, message);
            }
            if (!IsValidDateTime(model.ValidityDate))
            {
                var message = "Input value in Validity Date is invalid.";
                model.IsError = true;
                numberOfErrors = numberOfErrors + 1;
                if (string.IsNullOrEmpty(model.ValidityDate)) message = "Input value in Validity Date cannot be null.";
                model.ErrorMessage = model.ErrorMessage == null ? message : string.Format("{0}, {1}", model.ErrorMessage, message);
            }
            if (!IsValidDateTime(model.DateHired))
            {
                var message = "Input value in Date Hired is invalid.";
                model.IsError = true;
                numberOfErrors = numberOfErrors + 1;
                if (string.IsNullOrEmpty(model.DateHired)) message = "Input value in Date Hired cannot be null.";
                model.ErrorMessage = model.ErrorMessage == null ? message : string.Format("{0}, {1}", model.ErrorMessage, message);
            } 
            if (!IsValidInteger(model.Age))
            {
                var message = "Input value in age is invalid.";
                model.IsError = true;
                numberOfErrors = numberOfErrors + 1;
                if (string.IsNullOrEmpty(model.Age)) message = "Input value in age cannot be null.";
                model.ErrorMessage = model.ErrorMessage == null ? message : string.Format("{0}, {1}", model.ErrorMessage, message);
            }
            if (!IsValidInteger(model.Dependent))
            {
                var message = "Input value in No. of allowed dependents is invalid.";
                model.IsError = true;
                numberOfErrors = numberOfErrors + 1;
                if (string.IsNullOrEmpty(model.Dependent)) message = "Input value in No. of allowed dependents cannot be null.";
                model.ErrorMessage = model.ErrorMessage == null ? message : string.Format("{0}, {1}", model.ErrorMessage, message);
            }
        } 

        #endregion
    }
}