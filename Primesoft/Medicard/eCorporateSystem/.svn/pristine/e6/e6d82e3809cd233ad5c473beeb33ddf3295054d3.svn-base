namespace Corelib.Migrations.IdentityDataContext
{
    using Corelib.Models;
    using Microsoft.AspNet.Identity;
    using Microsoft.AspNet.Identity.EntityFramework;
    using System;
    using System.Collections.ObjectModel;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<Corelib.IdentityDataContext>
    {
        #region -- Constructor --

        public Configuration()
        {
            AutomaticMigrationsEnabled = true;
            MigrationsDirectory = @"Migrations\IdentityDataContext";
        }
        
        #endregion

        #region -- Seed Method --

        protected override void Seed(Corelib.IdentityDataContext context)
        {
            AddRole(context, "SysAd");
            // Groups
            AddRole(context, "CanViewGroups");
            AddRole(context, "CanAddGroups");
            AddRole(context, "CanEditGroups");
            AddRole(context, "CanDeleteGroups");
            // Users
            AddRole(context, "CanViewUsers");
            AddRole(context, "CanAddUsers");
            AddRole(context, "CanEditUsers");
            AddRole(context, "CanDeleteUsers");

            // eCorporate Services
            AddRole(context, "CanViewAccountManager");
            AddRole(context, "CanViewAccountInformation");
            AddRole(context, "CanViewBenefitsAndExclusions");
            AddRole(context, "CanViewHospitalizationAndOutPatientServices");
            AddRole(context, "CanViewPreventiveHealthcareServices");
            AddRole(context, "CanViewEmergencyCareServices");
            AddRole(context, "CanViewMemberFinancialAssistance");
            AddRole(context, "CanViewDentalCareServices");
            AddRole(context, "CanViewPreExistingCondition");
            AddRole(context, "CanViewPointOfService");
            AddRole(context, "CanViewMaternity");
            AddRole(context, "CanViewExecutiveCheckUp");
            AddRole(context, "CanViewExclusions");
            AddRole(context, "CanViewProfileManagement");

            // Special Functions
            AddRole(context, "ViewOnlyCreatedUsers");
            AddRole(context, "ViewOnlyCreatedGroups");
            AddRole(context, "CanCreateUserFromLegacySystem");
            AddRole(context, "CanAssignAllAccounts");
            AddRole(context, "CanOnlyAssignAssignedPermissions");

            AddGroup(context, "Administrator", "SysAd");

            AddUser(context, "Administrator", "admin", "edcarandang@primesoft.com", "+639175321763", "SysAd");
        }

        #endregion

        #region -- Functions --

        private void AddRole(Corelib.IdentityDataContext context, string rolename)
        {
            if (!context.Roles.Any(t => t.Name == rolename))
            {
                var store = new RoleStore<ApplicationRole>(context);
                var manager = new RoleManager<ApplicationRole>(store);
                var role = new ApplicationRole { Name = rolename };

                manager.Create(role);
            }
        }

        private void AddUser(Corelib.IdentityDataContext context, string name, string username, string email, string phone, params string[] roles)
        {
            if (!context.Users.Any(t => t.UserName == username))
            {
                var store = new UserStore<ApplicationUser>(context);
                var manager = new UserManager<ApplicationUser>(store);
                var user = new ApplicationUser { 
                    Name = name,
                    UserName = username,
                    Email = email,
                    PhoneNumber = phone
                };

                manager.Create(user, "P@ssw0rd");

                foreach (var role in roles)
                {
                    AddRole(context, role);
                    manager.AddToRole(user.Id, role);
                }
            }
        }

        private void AddGroup(Corelib.IdentityDataContext context, string name, params string[] roles)
        {
            
            var store = new RoleStore<ApplicationRole>(context);
            var manager = new RoleManager<ApplicationRole>(store);

            var groupRoles = new Collection<ApplicationRole>();
            foreach (var role in roles)
            {
                var groupRole = manager.FindByName(role);
                if (groupRole != null)
                {
                    groupRoles.Add(groupRole);
                }
            }

            if (!context.Groups.Any(t => t.Name == name))
            {
                context.Groups.Add(new Group()
                {
                    Name = name,
                    Roles = groupRoles
                });
            }

        }

        #endregion

    }
}
