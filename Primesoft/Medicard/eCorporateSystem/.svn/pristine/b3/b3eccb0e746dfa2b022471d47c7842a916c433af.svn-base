
@model DependentCancellation

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/CorporateAdministrator/Views/Shared/_AccountManagerLayout.cshtml";
}
@using (Html.BeginForm("Create", "DependentCancellations", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true);
    @Html.AntiForgeryToken()
    <input type="hidden" id="IsReadOnly" value="@ViewBag.DestroyPicker">

    <div class="row">
        <div class="col-lg-12 col-centered">
            <div id="panel-title">Cancellation Details</div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="panel-container">
                        <div class="form-horizontal">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div id="PersonalDetails">
                                        <div class="row form-padding">
                                            <div class="col-lg-12">
                                                @Html.Partial("_DependentCancellation", Model)
                                                <div class="row space">
                                                    <div class="col-lg-12">
                                                        <div class="no-color pull-right">
                                                            <input type="submit" name="Submit" value="Save" class="btn btn-primary" />
                                                            <input type="submit" name="Submit" value="Submit Request" class="btn btn-primary" />
                                                            @Html.ActionLink("Back to List", "Index", new { accountCode = ViewBag.AccountCode }, new { @class = "btn btn-primary" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            dependentSelect($('#MemberId'));

            var isReadOnly = $('#IsReadOnly').val();
            if (isReadOnly == "True") {
                $('#RequestEffectivityDate').datepicker("destroy");
                $('#FileWrapper').prop('disabled', true);
                $('#ClearFile').prop('disabled', true);
                $('#ClearExistingFile').prop('disabled', true);
            } else {
                $('#RequestEffectivityDate').datepicker();
            }
        });
        function onChangeMember(input) {
            dependentSelect(input);
        }
        function dependentSelect(input) {
            var option = {
                url: '@Url.Action("GetDependents")',
                type: 'post',
                data: {
                    memberId: input.val(),
                    modelId: '@Model.Id'
                }
            };
            $.ajax(option).done(function (data) {
                $('#DependentId').html(data);
            });
        }        
        function clearFileInput() {
            var oldInput = document.getElementById("FileWrapper");
            var newInput = document.createElement("input");
            newInput.type = "file";
            newInput.id = oldInput.id;
            newInput.name = oldInput.name;
            newInput.className = oldInput.className;
            newInput.style.cssText = oldInput.style.cssText;
            // copy any other relevant attributes

            oldInput.parentNode.replaceChild(newInput, oldInput);
        }
        function clearExistingFileInput(input) {
            input.siblings('a').remove();
            input.siblings('label[for="NoFile"]').remove();
            input.siblings('label[for="CurrentUploaded"]').after('<label for="NoFile">&nbsp;Existing file deleted.<label>');
            $('#DocumentContentType').val('');
            $('#DocumentFile').val('');
            $('#DocumentFileName').val('');
        }
    </script>
    @Html.Partial("_Message")
}
