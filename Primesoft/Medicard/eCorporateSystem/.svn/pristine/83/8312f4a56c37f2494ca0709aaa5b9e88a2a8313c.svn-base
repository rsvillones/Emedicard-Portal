using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Corelib;
using Corelib.Models;
using WebUI.Models;
using PagedList;
using PagedList.Mvc;

namespace WebUI.Controllers
{
    [Authorize(Roles = "SysAd, CanViewCorporateAdmins, CanAddCorporateAdmins, CanEditCorporateAdmins, CanDeleteCorporateAdmins")]
    public class CorporateAdminsController : Controller
    {
        #region -- Variable Declarations --

        private IdentityDataContext db = new IdentityDataContext();
        private LegacyDataContext legacyDb = new LegacyDataContext();
        private const string PASSWORD_DISPLAY = "###PASSWORD###";
        
        #endregion

        #region -- ActionResults --

        [Authorize(Roles = "SysAd, CanViewCorporateAdmins")]
        public ActionResult Index(string sortOrder, string currentFilter, int? page)
        {
            var corporateAdmins = from t in db.CorporateAdmins where !t.Deleted select t;
            if (!string.IsNullOrEmpty(currentFilter))
            {
                corporateAdmins = corporateAdmins.Where(t =>
                    t.FirstName.Contains(currentFilter) ||
                    t.LastName.Contains(currentFilter) ||
                    t.MiddleInitial.Contains(currentFilter) ||
                    t.UserName.Contains(currentFilter) ||
                    t.EmailAddress.Contains(currentFilter)
                );
            }

            Helper.SetSortParameters<CorporateAdmin>(this, ref corporateAdmins, sortOrder, currentFilter, new SortParameter()
            {
                PropertyName = "UserName"
            }, new List<SortParameter>()
            {
                new SortParameter() { PropertyName = "FirstName" },
                new SortParameter() { PropertyName = "MiddleInitial" },
                new SortParameter() { PropertyName = "LastName" },
                new SortParameter() { PropertyName = "EmailAddress" }
            });

            return View(corporateAdmins.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        [Authorize(Roles = "SysAd, CanAddCorporateAdmins")]
        public ActionResult Create()
        {
            var model = new CorporateAdminViewModel();

            ViewBag.LegacyAccounts = LegacyAccount.GetLegacyAccounts(db, legacyDb, User);

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "SysAd, CanAddCorporateAdmins")]
        public async Task<ActionResult> Create([Bind(Include = "FirstName, MiddleInitial, LastName, EmailAddress, Phone, UserName, Password, ConfirmPassword, Guid")] CorporateAdminViewModel corporateAdmin, string[] AccountCode, bool[] UseAccountCode, bool[] UseEmailAsLogin, bool[] UseRandomGeneratedPassword)
        {
            if (ModelState.IsValid)
            {
                var user = Helper.AddUser(db, null, null, String.Format("{0} {1} {2}", corporateAdmin.FirstName, corporateAdmin.MiddleInitial, corporateAdmin.LastName), corporateAdmin.UserName, corporateAdmin.Password, corporateAdmin.EmailAddress, corporateAdmin.Phone, false, true, null);

                var entity = new CorporateAdmin();
                Helper.MapProperties(corporateAdmin, entity);
                entity.UserId = user.Id;
                entity.UserName = user.UserName;

                if (AccountCode != null)
                {
                    for (var index = 0; index < AccountCode.Length; index++)
                    {
                        if (UseAccountCode[index])
                        {
                            var accountCode = AccountCode[index];
                            var legacyAccount = legacyDb.LegacyAccounts.FirstOrDefault(t => t.Code == accountCode);
                            if (legacyAccount != null)
                            {
                                entity.Accounts.Add(new Account()
                                {
                                    Code = accountCode,
                                    Name = legacyAccount.Name,
                                    UseEmailAsLogin = UseEmailAsLogin[index],
                                    UseRandomGeneratedPassword = UseRandomGeneratedPassword[index]
                                });
                            }
                        }
                    }
                }

                db.CorporateAdmins.Add(entity);
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }

            return View(corporateAdmin);
        }

        // GET: CorporateAdmins/Edit/5
        public async Task<ActionResult> Edit(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var corporateAdmin = await db.CorporateAdmins.Include(t => t.Accounts).FirstOrDefaultAsync(t => t.Guid == guid && !t.Deleted);
            if (corporateAdmin == null) return HttpNotFound();

            var model = new CorporateAdminViewModel();
            Helper.MapProperties(corporateAdmin, model);
            model.Password = PASSWORD_DISPLAY;
            model.ConfirmPassword = PASSWORD_DISPLAY;

            ViewBag.LegacyAccounts = LegacyAccount.GetLegacyAccounts(db, legacyDb, User);

            return View(model);
        }

        // POST: CorporateAdmins/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "Id, FirstName, MiddleInitial, LastName, EmailAddress, Phone, UserId, UserName, Password, ConfirmPassword, Guid")] CorporateAdminViewModel corporateAdmin)
        {
            if (ModelState.IsValid)
            {
                if (corporateAdmin.Password != PASSWORD_DISPLAY)
                {
                    await Helper.UpdateUserPasswordAsync(corporateAdmin.UserId, corporateAdmin.UserName, corporateAdmin.Password);
                }

                var entity = db.CorporateAdmins.FirstOrDefault(t => t.Guid == corporateAdmin.Guid);
                if (entity != null)
                {
                    if (entity.UserName != corporateAdmin.UserName)
                    {
                        var applicationUser = db.Users.FirstOrDefault(t => t.Id == corporateAdmin.UserId);
                        applicationUser.UserName = corporateAdmin.UserName;
                        db.Entry(applicationUser).State = EntityState.Modified;
                    };

                    Helper.MapProperties(corporateAdmin, entity);
                    db.Entry(entity).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                    return RedirectToAction("Index");
                }
            }

            return View(corporateAdmin);
        }

        // GET: CorporateAdmins/Delete/5
        public async Task<ActionResult> Delete(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var corporateAdmin = await db.CorporateAdmins.FirstOrDefaultAsync(t => t.Guid == guid && !t.Deleted);
            if (corporateAdmin == null) return HttpNotFound();

            return View(corporateAdmin);
        }

        // POST: CorporateAdmins/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(Guid guid)
        {
            var corporateAdmin = await db.CorporateAdmins.FirstOrDefaultAsync(t => t.Guid == guid && !t.Deleted);
            db.CorporateAdmins.Remove(corporateAdmin);
            var user = await db.Users.FirstOrDefaultAsync(t => t.Id == corporateAdmin.UserId);
            db.Users.Remove(user);
            await db.SaveChangesAsync();
            return RedirectToAction("Index");
        }

        #endregion

        #region -- Overrides --

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #endregion
    }
}
