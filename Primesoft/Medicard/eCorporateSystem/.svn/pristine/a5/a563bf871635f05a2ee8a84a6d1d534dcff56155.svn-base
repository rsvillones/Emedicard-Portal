using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Web;
using System.Web.Mvc;
using Corelib.Models;
using Corelib.Classes;
using Corelib.ViewModels;
using Corelib;
using System.Threading;

namespace WebUI.Controllers
{
    public class ApplicationController : Controller
    {
        protected IdentityDataContext db = new IdentityDataContext();

        public ActionResult DataUpload()
        {
            return View();
        }

        #region -- New Application --

        public FileResult NewApplicationExcelDownload()
        {
            return File(ExcelTools.NewApplicationExcelDownload(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "New Application.xlsx");
        }

        public String UploadExcel(HttpPostedFileBase fileData)
        {
            var fileExtension = fileData.FileName.Substring(fileData.FileName.LastIndexOf(".") + 1);
            if (fileExtension != "xlsx") throw new Exception("File Not Valid");
            var filename = String.Format("{0}.{1}", Guid.NewGuid().ToString(), fileExtension);
            var filepath = System.Web.HttpContext.Current.Server.MapPath(string.Format("~/Uploads/{0}", filename));
            fileData.SaveAs(filepath);

            return filename;
        }

        [HttpPost]
        public JsonResult StartThreading(string filePath)
        {
            var path = System.Web.HttpContext.Current.Server.MapPath(string.Format("~/Uploads/{0}", filePath));
            var thread = new Thread(new ParameterizedThreadStart(ExcelTools.ImportNewApplication));
            thread.Start(new ExcelTools.ImportParameter()
            {
                Path = path,
                Username = "Vino"
            });
            return Json(new { status = "Ok" });
        }

        [HttpPost]
        public JsonResult ExcelValidation(string fileName)
        {
            var filePath = Path.GetFileName(fileName);

            var excelValidation = fileName != null ? db.UploadLogs.FirstOrDefault(t => t.FileName == filePath) : null;

            if (excelValidation != null)
            {
                return Json(new
                {
                    currentRow = excelValidation.CurrentRow,
                    rowCompleted = excelValidation.RowsCompleted,
                    numberOfItems = excelValidation.NumberOfItems,
                    status = (int)excelValidation.UploadStatus
                });
            }
            return Json(new
            {
                currentRow = 0,
                rowCompleted = 0,
                numberOfItems = 0,
                status = 0
            });
        }

        [HttpPost]
        public ActionResult ImportComfirmation(string filePath)
        {
            var fileName = Path.GetFileName(filePath);
            var errors = db.ExcelErrors.Where(t => t.FileName == fileName && !t.Deleted).Select(t => t.RowNumber).Distinct().ToList();
            var employee = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).OrderBy(t => t.Row).ToList();
            ViewBag.FilePath = filePath;

            var summary = new UploadSummary()
            {
                RowCompleted = employee.Count,
                FileName = fileName,
                NumberOfErrors = errors.Count
            };
            var model = new ImportViewModel()
            {
                UploadSummary = summary,
                ApplicationVerifications = employee
            };
            return PartialView("ExcelImport", model);
        }

        #endregion
    }
}