using Corelib;
using Corelib.Models;
using RazorEngine;
using RazorEngine.Configuration;
using RazorEngine.Templating;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity.EntityFramework;
using System.Data.Entity;
using System.Threading;

namespace Emailer
{
    public static class Emailer
    {
        #region -- Functions --

        #region -- New --

        public static void SendProcessNewEmailInstant(EndorsementBatch endorsementBatch)
        {
            SendProcessNewEndorsementBatchByCorporateAdminToCorporateAdmin(endorsementBatch);
            SendProcessNewEndorsementBatchByCorporateAdminToMember(endorsementBatch);
        }

        public static void SendNewAccessInstant(Member member, string username, string password)
        {
            SendNewAccess(member, username, password);
        }

        public static void SendSubmitNewEmailInstant(Member member)
        {
            using (var db = new IdentityDataContext())
            {
                var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == member.AccountCode) ?? new AccountSetting();
                SendSubmitNewMemberByMemberToMember(member, accountSetting.BypassHRManagerApproval);
            }
        }

        public static void SendSubmitNewEmailEndOfDay()
        {
            DateTime from, to;
            SetEndOfDayDates(out from, out to);

            using (var db = new IdentityDataContext())
            {
                var endorsementBatchesToCorporateAdmin = db.EndorsementBatches
                    .Include(t => t.Members)
                    .Where(t => t.Members.Any(m => m.DateSubmittedToCorporateAdmin >= from && m.DateSubmittedToCorporateAdmin <= to)).ToList();

                foreach (var endorsementBatch in endorsementBatchesToCorporateAdmin)
                {
                    SendSubmitNewMemberByMemberToCorporateAdmin(endorsementBatch, from, to);
                }

                var endorsementBatchesToUrg = db.EndorsementBatches
                    .Include(t => t.Members)
                    .Where(t => t.Members.Any(m => m.DateSubmittedToUrg >= from && m.DateSubmittedToUrg <= to)).ToList();

                foreach (var endorsementBatch in endorsementBatchesToUrg)
                {
                    SendSubmitNewMemberByMemberToUrg(endorsementBatch, from, to);
                }
            }
        }
        
        #endregion

        #region -- Renewal --

        public static void SendProcessRenewalEmailInstant(EndorsementBatch endorsementBatch)
        {
            SendProcessRenewalByCorporateAdminToCorporateAdmin(endorsementBatch);
            SendProcessRenewalByCorporateAdminToMember(endorsementBatch);
        }
        
        #endregion

        #region -- Member Cancellation --

        public static void SendProcessCancelledMemberInstant(EndorsementBatch endorsementBatch)
        {
            SendProcessCancelledMemberByCorporateAdminToUrg(endorsementBatch);
        }

        #endregion

        public static void SendApproveNewMemberInstant(Member member)
        {
            SendApproveNewMemberByUrgToMember(member);
        }

        public static void SendActionMemoInstant(EndorsementBatch endorsementBatch)
        {
            SendActionMemoByUrgToCorporateAdmin(endorsementBatch);
            SendActionMemoByUrgToAllAccess(endorsementBatch);
            foreach (var actionMemo in endorsementBatch.ActionMemos)
            {
                SendActionMemoByUrgToMember(actionMemo);
            }
        }

        public static void SendActionMemoReplyInstant(ActionMemo actionMemo)
        {
            SendActionMemoReplyByCorporateAdminToMember(actionMemo);
        }

        public static void SentActionMemoReplyEndOfDay()
        {
            DateTime from, to;
            SetEndOfDayDates(out from, out to);

            using (var db = new IdentityDataContext())
            {
                var actionMemosToCorporateAdmin = db.ActionMemos
                    .Include(t => t.Member)
                    .Include(t => t.Dependent)
                    .Include(t => t.EndorsementBatch)
                    .Where(t => t.DateSubmittedToCorporateAdmin >= from && t.DateSubmittedToCorporateAdmin <= to).ToList();

                var accountCodes = actionMemosToCorporateAdmin.Select(t => t.EndorsementBatch.AccountCode).Distinct();
                foreach (var accountCode in accountCodes)
                {
                    SendActionMemoReplyByMemberToCorporateAdmin(accountCode, actionMemosToCorporateAdmin.Where(t => t.EndorsementBatch.AccountCode == accountCode).ToList());
                }

                var actionMemosToUrg = db.ActionMemos
                    .Include(t => t.Member)
                    .Include(t => t.Dependent)
                    .Include(t => t.EndorsementBatch)
                    .Where(t => t.DateSubmittedToUrg >= from && t.DateSubmittedToUrg <= to).ToList();

                accountCodes = actionMemosToUrg.Select(t => t.EndorsementBatch.AccountCode).Distinct();
                foreach (var accountCode in accountCodes)
                {
                    SendActionMemoReplyByMemberToUrg(accountCode, actionMemosToUrg.Where(t => t.EndorsementBatch.AccountCode == accountCode).ToList());
                }

            }
        }

        #region -- ID Replacement --

        public static void SendSubmitIdReplacementEmailInstant(IdReplacement idReplacement)
        {
            using (var db = new IdentityDataContext())
            {
                var member = db.Members.FirstOrDefault(t => t.Code == idReplacement.MemberCode) ?? new Member();
                var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == member.AccountCode) ?? new AccountSetting();
                if (accountSetting.BypassHRManagerApproval){
                    SendSubmitIdReplacementByMemberToUrg(idReplacement, member);
                }
                else{
                    SendSubmitIdReplacementByMemberToCorporateAdmin(idReplacement, member);
                }
                SendSubmitIdReplacementByMemberToMember(member, accountSetting.BypassHRManagerApproval);
            }
        }        

        public static void SendSubmitIdReplacementCorporateAdminEmailInstant(IdReplacement idReplacement)
        {
            using (var db = new IdentityDataContext())
            {
                var member = db.Members.FirstOrDefault(t => t.Code == idReplacement.MemberCode) ?? new Member();
                SendSubmitIdReplacementByCorporateAdminToMember(member);
                SendSubmitIdReplacementByCorporateAdminToUrg(idReplacement);
            }
        }


        #endregion

        #endregion

        #region -- Sending Emails --

        #region -- New Access --

        private static void SendNewAccess(Member member, string username, string password)
        {
            if (string.IsNullOrEmpty(member.EmailAddress) || string.IsNullOrEmpty(member.EmailAddress)) return;

            var body = ParseEmailTemplate(Config.NewAccess, new EmailViewModel()
            {
                Member = member,
                Username = username,
                Password = password
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "New Member Access",
                Body = body,
                IsBodyHtml = true
            };

            mailMessage.To.Add(member.EmailAddress);
            SendMailMessage(mailMessage);
        }

        #endregion

        #region -- Process New Endorsement --

        private static void SendProcessNewEndorsementBatchByCorporateAdminToCorporateAdmin(EndorsementBatch endorsementBatch)
        {
            var body = ParseEmailTemplate(Config.ProcessNewEndorsementBatchByCorporateAdminToCorporateAdmin, new EmailViewModel()
            {
                EndorsementBatch = endorsementBatch
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "New Endorsement Processed By Corporate Admin To Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };
            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendProcessNewEndorsementBatchByCorporateAdminToMember(EndorsementBatch endorsementBatch)
        {
            foreach (var member in endorsementBatch.Members)
            {
                if (string.IsNullOrEmpty(member.EmailAddress) || string.IsNullOrEmpty(member.EmailAddress)) continue;

                var body = ParseEmailTemplate(Config.ProcessNewEndorsementBatchByCorporateAdminToMember, new EmailViewModel()
                {
                    Member = member
                });
                var mailMessage = new MailMessage()
                {
                    From = new MailAddress(Config.NotificationFromEmail),
                    Subject = "New Endorsement Processed By Corporate Admin To Member",
                    Body = body,
                    IsBodyHtml = true
                };

                mailMessage.To.Add(member.EmailAddress);
                SendMailMessage(mailMessage);
            }
        }

        #endregion

        #region -- Submit New Endorsement --

        private static void SendSubmitNewMemberByMemberToMember(Member member, bool bypassCorporateAdminApproval)
        {
            if (string.IsNullOrEmpty(member.EmailAddress)) return;

            var body = ParseEmailTemplate(Config.SubmitNewMemberByMemberToMember, new EmailViewModel()
            {
                Member = member,
                BypassCorporateAdminApproval = bypassCorporateAdminApproval
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Submit New Member By Member To Member",
                Body = body,
                IsBodyHtml = true
            };
            mailMessage.To.Add(new MailAddress(member.EmailAddress));

            SendMailMessage(mailMessage);
        }

        private static void SendSubmitNewMemberByMemberToCorporateAdmin(EndorsementBatch endorsementBatch, DateTime from, DateTime to)
        {
            var body = ParseEmailTemplate(Config.SubmitNewMemberByMemberToCorporateAdmin, new EmailViewModel()
            {
                From = from,
                To = to,
                EndorsementBatch = endorsementBatch
            });

            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Submit New Member by Member to Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendSubmitNewMemberByMemberToUrg(EndorsementBatch endorsementBatch, DateTime from, DateTime to)
        {
            var body = ParseEmailTemplate(Config.SubmitNewMemberByMemberToUrg, new EmailViewModel()
            {
                From = from,
                To = to,
                EndorsementBatch = endorsementBatch
            });

            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Submit New Member by Member to Urg",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetUnderwriterEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.CC.Add(new MailAddress(email));
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        #endregion

        #region -- Approve New Endorsement --

        private static void SendApproveNewMemberByUrgToCorporateAdmin(EndorsementBatch endorsementBatch)
        {
            var body = ParseEmailTemplate(Config.ApproveNewMemberByUrgToCorporateAdmin, new EmailViewModel()
            {
                EndorsementBatch = endorsementBatch
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Approve New Member By Urg To Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };
            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            foreach (var email in GetOtherEmails(endorsementBatch.AccountCode))
            {
                mailMessage.CC.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendApproveNewMemberByUrgToMember(Member member)
        {
            var body = ParseEmailTemplate(Config.ApproveNewMemberByUrgToMember, new EmailViewModel()
            {
                Member = member
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Approve New Member By Urg To Member",
                Body = body,
                IsBodyHtml = true
            };

            if (String.IsNullOrEmpty(member.EmailAddress))
            {
                mailMessage.To.Add(new MailAddress(member.EmailAddress));

                SendMailMessage(mailMessage);
            }
        }

        #endregion

        #region -- Action Memo --

        private static void SendActionMemoByUrgToCorporateAdmin(EndorsementBatch endorsementBatch)
        {
            var body = ParseEmailTemplate(Config.ActionMemoByUrgToCorporateAdmin, new EmailViewModel()
            {
                EndorsementBatch = endorsementBatch
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Action Memo By Urg To Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };

            var di = new DirectoryInfo(Config.ActionMemoDocumentsPath);
            foreach (var fi in di.GetFiles(String.Format("A_{0}*.pdf", endorsementBatch.ReplyTo)))
            {
                mailMessage.Attachments.Add(new System.Net.Mail.Attachment(fi.FullName));
            }

            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendActionMemoByUrgToAllAccess(EndorsementBatch endorsementBatch)
        {
            var body = ParseEmailTemplate(Config.ActionMemoByUrgToCorporateAdmin, new EmailViewModel()
            {
                EndorsementBatch = endorsementBatch
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Action Memo By Urg To All Access",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetOtherEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendActionMemoByUrgToMember(ActionMemo actionMemo)
        {
            var body = ParseEmailTemplate(Config.ActionMemoByUrgToMember, new EmailViewModel()
            {
                ActionMemo = actionMemo
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Action Memo By Urg To Member",
                Body = body,
                IsBodyHtml = true
            };

            if (!String.IsNullOrEmpty(actionMemo.Member.EmailAddress))
            {
                mailMessage.To.Add(new MailAddress(actionMemo.Member.EmailAddress));
                SendMailMessage(mailMessage);
            }
        }

        private static void SendActionMemoReplyByMemberToCorporateAdmin(string accountCode, IEnumerable<ActionMemo> actionMemos)
        {
            var body = ParseEmailTemplate(Config.ActionMemoReplyByMemberToCorporateAdmin, new EmailViewModel()
            {
                ActionMemos = actionMemos
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Action Memo Reply By Member to Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(accountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendActionMemoReplyByMemberToUrg(string accountCode, IEnumerable<ActionMemo> actionMemos)
        {
            var body = ParseEmailTemplate(Config.ActionMemoReplyByMemberToUrg, new EmailViewModel()
            {
                ActionMemos = actionMemos
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Action Memo Reply By Member to Urg",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetUnderwriterEmails(accountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }
            foreach (var email in GetCorporateAdminEmails(accountCode))
            {
                mailMessage.CC.Add(new MailAddress(email));
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendActionMemoReplyByCorporateAdminToMember(ActionMemo actionMemo)
        {
            var body = ParseEmailTemplate(Config.ActionMemoReplyByCorporateAdminToMember, new EmailViewModel()
            {
                ActionMemo = actionMemo
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Action Memo Reply By Corporate Admin To Member",
                Body = body,
                IsBodyHtml = true
            };

            if (!String.IsNullOrEmpty(actionMemo.Member.EmailAddress))
            {
                mailMessage.To.Add(new MailAddress(actionMemo.Member.EmailAddress));

                foreach (var email in GetCorporateAdminEmails(actionMemo.EndorsementBatch.AccountCode))
                {
                    mailMessage.CC.Add(new MailAddress(email));
                }

                SendMailMessage(mailMessage);
            }
        }

        #endregion

        #region -- Process Renewal --

        private static void SendProcessRenewalByCorporateAdminToCorporateAdmin(EndorsementBatch endorsementBatch)
        {
            var body = ParseEmailTemplate(Config.ProcessRenewalByCorporateAdminToCorporateAdmin, new EmailViewModel()
            {
                EndorsementBatch = endorsementBatch
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Renewal Processed By Corporate Admin To Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };
            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        private static void SendProcessRenewalByCorporateAdminToMember(EndorsementBatch endorsementBatch)
        {
            foreach (var member in endorsementBatch.Members)
            {
                if (string.IsNullOrEmpty(member.EmailAddress) || string.IsNullOrEmpty(member.EmailAddress)) return;

                var body = ParseEmailTemplate(Config.ProcessRenewalByCorporateAdminToMember, new EmailViewModel()
                {
                    Member = member
                });
                var mailMessage = new MailMessage()
                {
                    From = new MailAddress(Config.NotificationFromEmail),
                    Subject = "Renewal Processed By Corporate Admin To Member",
                    Body = body,
                    IsBodyHtml = true
                };

                mailMessage.To.Add(member.EmailAddress);
                SendMailMessage(mailMessage);
            }
        }

        #region -- ID Replacement --

        private static void SendSubmitIdReplacementByMemberToMember(Member member, bool bypassCorporateAdminApproval)
        {
            if (string.IsNullOrEmpty(member.EmailAddress)) return;

            var body = ParseEmailTemplate(Config.SubmitIdReplacementByMemberToMember, new EmailViewModel()
            {
                Member = member,
                BypassCorporateAdminApproval = bypassCorporateAdminApproval
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Submit Request For ID Replacement By Member To Member",
                Body = body,
                IsBodyHtml = true
            };
            mailMessage.To.Add(new MailAddress(member.EmailAddress));

            SendMailMessage(mailMessage);
        }

        private static void SendSubmitIdReplacementByMemberToCorporateAdmin(IdReplacement idReplacement, Member member)
        {
            var body = ParseEmailTemplate(Config.SubmitIdReplacementByMemberToCorporateAdmin, new EmailViewModel()
            {
                IdReplacement = idReplacement
            });

            var mailMessage = new MailMessage()
            {
                From = new MailAddress(member.EmailAddress),
                Subject = "Submit Request For ID Replacement by Member to Corporate Admin",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetCorporateAdminEmails(idReplacement.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }
            if (sendEmail) SendMailMessage(mailMessage);

        }

        private static void SendSubmitIdReplacementByMemberToUrg(IdReplacement idReplacement, Member member)
        {
            if (string.IsNullOrEmpty(member.EmailAddress)) return;

            var body = ParseEmailTemplate(Config.SubmitIdReplacementByMemberToUrg, new EmailViewModel()
            {
                IdReplacement = idReplacement
            });

            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Submit Request for ID Replacement by Member to Urg",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetUnderwriterEmails(idReplacement.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }
            foreach (var email in GetCorporateAdminEmails(idReplacement.AccountCode))
            {
                mailMessage.CC.Add(new MailAddress(email));
            }

            if (sendEmail) SendMailMessage(mailMessage);

        }

        private static void SendSubmitIdReplacementByCorporateAdminToMember(Member member)
        {
            if (string.IsNullOrEmpty(member.EmailAddress)) return;

            var body = ParseEmailTemplate(Config.SubmitIdReplacementByCorporateAdminToMember, new EmailViewModel()
            {
                Member = member
            });

            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Notification of Request for ID Replacements by Corporate Administrator to Member",
                Body = body,
                IsBodyHtml = true
            };

            mailMessage.To.Add(new MailAddress(member.EmailAddress));
            SendMailMessage(mailMessage);
        }

        private static void SendSubmitIdReplacementByCorporateAdminToUrg(IdReplacement idReplacement)
        {
            var body = ParseEmailTemplate(Config.SubmitIdReplacementByCorporateAdminToUrg, new EmailViewModel()
            {
                IdReplacement = idReplacement
            });

            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Submit Request for ID Replacements by Corporate Administrator to URG",
                Body = body,
                IsBodyHtml = true
            };

            var sendEmail = false;
            foreach (var email in GetUnderwriterEmails(idReplacement.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }
            foreach (var email in GetCorporateAdminEmails(idReplacement.AccountCode))
            {
                mailMessage.CC.Add(new MailAddress(email));
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        #endregion

        #region -- Process Member Cancellation --

        private static void SendProcessCancelledMemberByCorporateAdminToUrg(EndorsementBatch endorsementBatch)
        {
            var body = ParseEmailTemplate(Config.ProcessCancelledMemberByCorporateAdminToUrg, new EmailViewModel()
            {
                EndorsementBatch = endorsementBatch
            });
            var mailMessage = new MailMessage()
            {
                From = new MailAddress(Config.NotificationFromEmail),
                Subject = "Process Cancelled Member By Corporate Admin To Urg",
                Body = body,
                IsBodyHtml = true
            };
            var sendEmail = false;
            foreach (var email in GetUnderwriterEmails(endorsementBatch.AccountCode))
            {
                mailMessage.To.Add(new MailAddress(email));
                sendEmail = true;
            }
            foreach (var email in GetCorporateAdminEmails(endorsementBatch.AccountCode))
            {
                mailMessage.CC.Add(new MailAddress(email));
            }

            if (sendEmail) SendMailMessage(mailMessage);
        }

        #endregion

        #endregion

        #endregion

        #region  -- Functions --

        private static string ParseEmailTemplate(string path, object model)
        {
            var templateConfig = new TemplateServiceConfiguration();
            templateConfig.Resolver = new DelegateTemplateResolver(name =>
            {
                return System.IO.File.ReadAllText(name);
            });

            Razor.SetTemplateService(new TemplateService(templateConfig));
            var template = Razor.Resolve(path, model);
            var returnValue = template.Run(new ExecuteContext());
            return returnValue;
        }

        private static void SendMailMessage(MailMessage mailMessage)
        {
            //var thread = new Thread(new ParameterizedThreadStart(SendMailMessageAsync));
            //thread.Start(mailMessage);

            var smtpClient = new SmtpClient(Config.SmtpServer)
            {
                Port = Config.SmtpPort,
                Credentials = new NetworkCredential(Config.SmtpUsername, Config.SmtpPassword)
            };

            try
            {
                smtpClient.Send(mailMessage);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        private static void SendMailMessageAsync(object parameter)
        {
            MailMessage mailMessage = parameter as MailMessage;

            var smtpClient = new SmtpClient(Config.SmtpServer)
            {
                Port = Config.SmtpPort,
                Credentials = new NetworkCredential(Config.SmtpUsername, Config.SmtpPassword)
            };

            smtpClient.SendMailAsync(mailMessage);
        }

        private static IEnumerable<string> GetCorporateAdminEmails(string accountCode)
        {
            using (var db = new IdentityDataContext())
            {
                return db.Accounts.Where(t => t.Code == accountCode && t.IsCorporateAdmin && !string.IsNullOrEmpty(t.ApplicationUser.Email)).Select(t => t.ApplicationUser.Email).ToList();
            }
        }

        private static IEnumerable<string> GetUnderwriterEmails(string accountCode)
        {
            using (var db = new IdentityDataContext())
            {
                return db.Accounts.Where(t => t.Code == accountCode && t.IsUnderWriter && !string.IsNullOrEmpty(t.ApplicationUser.Email)).Select(t => t.ApplicationUser.Email).ToList();
            }
        }

        private static IEnumerable<string> GetOtherEmails(string accountCode)
        {
            using (var db = new IdentityDataContext())
            {
                return db.Accounts.Where(t => t.Code == accountCode && !t.IsCorporateAdmin && !t.IsUnderWriter && !string.IsNullOrEmpty(t.ApplicationUser.Email)).Select(t => t.ApplicationUser.Email).ToList();
            }
        }

        private static void SetEndOfDayDates(out DateTime from, out DateTime to)
        {
            var now = DateTime.Now;
            from = new DateTime(now.Year, now.Month, now.Day);
            to = new DateTime(now.Year, now.Month, now.Day, 23, 59, 59);
        }

        #endregion
    }
}
