using Corelib.Enums;
using Corelib.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace Corelib
{
    public static class LegacyHelper
    {
        #region -- Public Functions --

        public static IQueryable<LegacyAccount> GetLegacyAccounts(LegacyDataContext legacyDb, string agentCode)
        {
            var disposeLegacyDb = false;
            if (legacyDb == null)
            {
                legacyDb = new LegacyDataContext();
                disposeLegacyDb = true;
            }

            var returnValue = !String.IsNullOrEmpty(agentCode) ? legacyDb.LegacyAccounts.Where(t => t.AgentCode == agentCode).OrderBy(t => t.Name) : new List<LegacyAccount>() as IQueryable<LegacyAccount>;

            if (disposeLegacyDb)
            {
                legacyDb.Dispose();
                legacyDb = null;
            }

            return returnValue;
        }

        public static IQueryable<LegacyAccount> GetLegacyAccounts(IdentityDataContext db, LegacyDataContext legacyDb, IPrincipal user)
        {
            var disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                disposeDb = true;
            }

            var disposeLegacyDb = false;
            if (legacyDb == null)
            {
                legacyDb = new LegacyDataContext();
                disposeLegacyDb = true;
            }

            IQueryable<LegacyAccount> returnValue;

            var activeStatus = "ASC0000003";

            if (user.IsInRole("SysAd") || user.IsInRole("CanAssignAllAccounts"))
            {
                returnValue = legacyDb.LegacyAccounts.Where(t => t.AccountStatusCode == activeStatus).OrderBy(t => t.Name);
            }
            else
            {
                var username = user.Identity.Name;

                var accountCodes = new List<string>();
                var applicationUser = db.Users.FirstOrDefault(t => t.UserName == user.Identity.Name) ?? new ApplicationUser();
                var agentCode = applicationUser.AgentCode;
                if (user != null && !string.IsNullOrEmpty(agentCode))
                {
                    returnValue = legacyDb.LegacyAccounts.Where(t => t.AgentCode == agentCode && t.AccountStatusCode == activeStatus).OrderBy(t => t.Name);
                }
                else
                {
                    accountCodes = db.Accounts.Where(t => t.ApplicationUser.UserName == username).Select(t => t.Code).ToList();
                    returnValue = legacyDb.LegacyAccounts.Where(t => accountCodes.Contains(t.Code)).OrderBy(t => t.Name);
                }
            }

            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            if (disposeLegacyDb)
            {
                legacyDb.Dispose();
                legacyDb = null;
            }

            return returnValue;
        }

        public static IEnumerable<IActionMemo> GetLegacyActionMemos(IdentityDataContext db, LegacyDataContext legacyDb, string memberCode, string accountCode, IEnumerable<string> accountCodes)
        {
            IEnumerable<IActionMemo> returnValue = null;

            var principalActionMemos = legacyDb.LegacyPrincipalActionMemos as IQueryable<IActionMemo>;
            var dependentActionMemos = legacyDb.LegacyDependentActionMemos as IQueryable<IActionMemo>;

            if (!String.IsNullOrEmpty(memberCode))
            {
                principalActionMemos = principalActionMemos.Where(t => t.Code == memberCode);
                dependentActionMemos = dependentActionMemos.Where(t => t.Code == memberCode);
            }
            else if (!String.IsNullOrEmpty(accountCode))
            {
                principalActionMemos = principalActionMemos.Where(t => t.AccountCode == accountCode);
                dependentActionMemos = dependentActionMemos.Where(t => t.AccountCode == accountCode);
            }
            else if (accountCodes != null)
            {
                principalActionMemos = principalActionMemos.Where(t => accountCodes.Contains(t.AccountCode));
                dependentActionMemos = dependentActionMemos.Where(t => accountCodes.Contains(t.AccountCode));
            }

            returnValue = principalActionMemos.AsEnumerable().Concat<IActionMemo>(dependentActionMemos);

            var resignAmendmentDate = DateTime.Now.AddDays(Constants.RESIGNED_AMENDMENT_DAYS);
            var resignResignedDate = DateTime.Now.AddDays(Constants.RESIGNED_RESIGNED_DAYS);

            returnValue = returnValue.Where(t =>
                // Resigned Condition
                (
                    Constants.RESIGNED_STAT_CODES.Contains(t.StatCode)
                    &&
                    !String.IsNullOrEmpty(t.StatusRemarks)
                    &&
                    (
                        t.StatusRemarks.Contains("LETTER")
                        || t.StatusRemarks.Contains("RCV")
                        || t.StatusRemarks.Contains("ATTACHMENT")
                        || t.StatusRemarks.Contains("PRE-TERMINATION")
                    )
                    &&
                    (
                        t.AmmendmentDate >= resignAmendmentDate
                        || t.ResignedDate >= resignAmendmentDate
                    )
                )
                ||
                    // Disapproved Condition
                (
                    !String.IsNullOrEmpty(t.StatusRemarks)
                    && !String.IsNullOrEmpty(t.StatusRemarks.Trim())
                    && !t.StatusRemarks.Contains("Cancel")
                    &&
                    (
                        (Constants.DISAPPROVED_STAT_CODES_CONTRACT_YEAR.Contains(t.StatCode) && t.StatusRemarks.Contains("Contract Year"))
                        || (t.StatCode == 1 && t.Posted == 1)
                        || (t.StatCode == 9 &&
                            (
                                t.StatusRemarks.Contains("Change")
                                || t.StatusRemarks.Contains("Over")
                                || t.StatusRemarks.Contains("No Extended")
                                || t.StatusRemarks.Contains("Not")
                            )
                        )
                    )
                )
                ||
                    // Encoding Condition
                (
                    t.StatCode == 2
                    && t.Posted == 1
                )
                ||
                    // Medical Examination Condition
                (
                    t.StatCode == 3
                    && t.Posted == 1
                )
                ||
                    // Cancellation Condition
                (
                    (
                        (
                            t.StatCode == 1
                            && t.Posted == 1
                        )
                        || t.StatCode == 9
                    )
                    && t.StatusRemarks.Contains("Cancel")
                )
                ||
                    // Resigned Automatically
                (
                    (
                        t.StatCode == 9
                        || t.StatCode == 9
                    )
                    && t.StatusRemarks.Contains("Automatically deleted")
                    &&
                    (
                        t.AmmendmentDate >= resignAmendmentDate
                        || t.ResignedDate >= resignAmendmentDate
                    )
                )
                ||
                    // On Hold Others
                (
                    t.StatCode == 4
                    && (
                            !t.ActionMemoRemarks.Contains("Less Than")
                            || t.ActionMemoRemarks.Contains("Less Than 10")
                            || t.ActionMemoRemarks.Contains("Less Than 5")
                    )
                    && !String.IsNullOrEmpty(t.ActionMemoRemarks)
                    && !String.IsNullOrEmpty(t.ActionMemoRemarks.Trim())
                    && String.IsNullOrEmpty(t.Code)
                )
                ||
                    // On Hold Active
                (
                    t.StatCode == 4
                    && (
                            !t.ActionMemoRemarks.Contains("Less Than")
                            || t.ActionMemoRemarks.Contains("Less Than 10")
                            || t.ActionMemoRemarks.Contains("Less Than 5")
                    )
                    && !String.IsNullOrEmpty(t.ActionMemoRemarks)
                    && !String.IsNullOrEmpty(t.ActionMemoRemarks.Trim())
                    && !String.IsNullOrEmpty(t.Code)
                )
            );
                       
            return returnValue;
        }

        public static IEnumerable<LegacyMember> GetActiveMembers(LegacyDataContext legacyDb, string accountCode)
        {
            var disposeLegacyDb = false;

            if (legacyDb == null)
            {
                legacyDb = new LegacyDataContext();
                disposeLegacyDb = true;
            }

            var returnValue = ExecuteSp<LegacyMember>(legacyDb, "emed_active_member_prin_and_dep",
                new List<string>() { "accountCode" },
                new List<object>() { accountCode }
            );
            
            if (disposeLegacyDb)
            {
                legacyDb.Dispose();
                legacyDb = null;
            }

            return returnValue;
        }

        #endregion

        #region -- Private Functions --

        private static IEnumerable<T> ExecuteSp<T>(LegacyDataContext db, string sp, List<string> parameterNames, List<object> parameterValues) where T : new()
        {
            var returnValue = new List<T>();

            var connection = db.Database.Connection as SqlConnection;
            using (var command = new SqlCommand(sp, connection))
            {
                connection.Open();
                command.CommandType = CommandType.StoredProcedure;


                for (var index = 0; index <= parameterNames.Count - 1; index++)
                {
                    command.Parameters.Add(new SqlParameter(parameterNames[index], parameterValues[index]));
                }

                using (var reader = command.ExecuteReader())
                {
                    MapSpResult<T>(returnValue, reader);

                    reader.Close();
                }

            }

            return returnValue;
        }

        private static void MapSpResult<T>(List<T> list, SqlDataReader reader) where T : new()
        {
            while (reader.Read())
            {
                var entity = new T();
                foreach (var property in entity.GetType().GetProperties())
                {
                    string columnName;
                    var attribute = property.CustomAttributes.FirstOrDefault(t => t.AttributeType == typeof(ColumnAttribute));
                    if (attribute != null)
                    {
                        columnName = attribute.ConstructorArguments[0].Value.ToString();
                    }
                    else
                    {
                        columnName = property.Name;
                    }

                    if (HasColumn(reader, columnName))
                    {
                        if (reader[columnName].GetType() != typeof(DBNull)) property.SetValue(entity, reader[columnName]);
                    }
                }
                list.Add(entity);
            }

        }

        public static bool HasColumn(IDataRecord dr, string columnName)
        {
            for (int i = 0; i < dr.FieldCount; i++)
            {
                if (dr.GetName(i).Equals(columnName, StringComparison.InvariantCultureIgnoreCase)) return true;
            }
            return false;
        }

        public static ActionMemoType GetActionMemoType(IActionMemo actionMemo)
        {
            var resignAmendmentDate = DateTime.Now.AddDays(Constants.RESIGNED_AMENDMENT_DAYS);
            var resignResignedDate = DateTime.Now.AddDays(Constants.RESIGNED_RESIGNED_DAYS);
            if (
                Constants.RESIGNED_STAT_CODES.Contains(actionMemo.StatCode)
                &&
                !String.IsNullOrEmpty(actionMemo.StatusRemarks)
                &&
                (
                    actionMemo.StatusRemarks.Contains("LETTER")
                    || actionMemo.StatusRemarks.Contains("RCV")
                    || actionMemo.StatusRemarks.Contains("ATTACHMENT")
                    || actionMemo.StatusRemarks.Contains("PRE-TERMINATION")
                )
                &&
                (
                    actionMemo.AmmendmentDate >= resignAmendmentDate
                    || actionMemo.ResignedDate >= resignAmendmentDate
                )
            ) return ActionMemoType.Resigned;
            else if (
                !String.IsNullOrEmpty(actionMemo.StatusRemarks)
                && !String.IsNullOrEmpty(actionMemo.StatusRemarks.Trim())
                && !actionMemo.StatusRemarks.Contains("Cancel")
                &&
                (
                    (Constants.DISAPPROVED_STAT_CODES_CONTRACT_YEAR.Contains(actionMemo.StatCode) && actionMemo.StatusRemarks.Contains("Contract Year"))
                    || (actionMemo.StatCode == 1 && actionMemo.Posted == 1)
                    || (actionMemo.StatCode == 9 &&
                        (
                            actionMemo.StatusRemarks.Contains("Change")
                            || actionMemo.StatusRemarks.Contains("Over")
                            || actionMemo.StatusRemarks.Contains("No Extended")
                            || actionMemo.StatusRemarks.Contains("Not")
                        )
                    )
                )
            ) return ActionMemoType.Disapproved;
            else if (
                actionMemo.StatCode == 2
                && actionMemo.Posted == 1
            ) return ActionMemoType.Encoding;
            else if (
                actionMemo.StatCode == 3
                && actionMemo.Posted == 1
            ) return ActionMemoType.MedicalExamination;
            else if (
                (
                    (
                        actionMemo.StatCode == 1
                        && actionMemo.Posted == 1
                    )
                    || actionMemo.StatCode == 9
                )
                && actionMemo.StatusRemarks.Contains("Cancel")
            ) return ActionMemoType.Cancellation;
            else if (
                (
                    actionMemo.StatCode == 9
                    || actionMemo.StatCode == 0
                )
                && actionMemo.StatusRemarks.Contains("Automatically deleted")
                &&
                (
                    actionMemo.AmmendmentDate >= resignAmendmentDate
                    || actionMemo.ResignedDate >= resignAmendmentDate
                )
            ) return ActionMemoType.ResignedAutomatically;
            else if (
                actionMemo.StatCode == 4
                && (
                    !actionMemo.ActionMemoRemarks.Contains("Less Than")
                    || actionMemo.ActionMemoRemarks.Contains("Less Than 10")
                    || actionMemo.ActionMemoRemarks.Contains("Less Than 5")
                )
                && !String.IsNullOrEmpty(actionMemo.ActionMemoRemarks)
                && !String.IsNullOrEmpty(actionMemo.ActionMemoRemarks.Trim())
                && String.IsNullOrEmpty(actionMemo.Code)
            ) return ActionMemoType.OnHoldOthers;
            else if (
                actionMemo.StatCode == 4
                && (
                    !actionMemo.ActionMemoRemarks.Contains("Less Than")
                    || actionMemo.ActionMemoRemarks.Contains("Less Than 10")
                    || actionMemo.ActionMemoRemarks.Contains("Less Than 5")
                )
                && !String.IsNullOrEmpty(actionMemo.ActionMemoRemarks)
                && !String.IsNullOrEmpty(actionMemo.ActionMemoRemarks.Trim())
                && !String.IsNullOrEmpty(actionMemo.Code)
            ) return ActionMemoType.OnHoldActive;

            return ActionMemoType.Undefined;
        }

        #endregion
    }
}
