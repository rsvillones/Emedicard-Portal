using Corelib.Enums;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Corelib.Models
{
    public class Amendment : BaseModel,IValidatableObject
    {
        public Amendment()
        {
            this.EffectivityDate = DateTime.Now;
        }

        #region -- Properties --

        [DisplayFormat(DataFormatString = BaseModel.DateFormat, ApplyFormatInEditMode = true)]
        [Display(Name="Request Effectivity Date:")]
        public DateTime EffectivityDate { get; set; }

        [Display(Name = "Request For:")]
        public RequestFor RequestFor { get; set; }

        [Display(Name = "Data Type:")]
        public AmendmentDataType DataType { get; set; }

        [Display(Name = "Change Data From:")]
        public string ChangeDataFrom { get; set; }

        [Display(Name = "Change Data To:")]
        public string ChangeDataTo { get; set; }

        public string Remarks { get; set; }

        #endregion

        #region -- Foreign Keys --

        [ForeignKey("Reason")]
        [Display(Name = "Request Reason:")]
        public int ReasonId { get; set; }
        public Reason Reason { get; set; }
         
        [ForeignKey("EndorsementBatch")]
        public int EndorsementBatchId { get; set; }
        public EndorsementBatch EndorsementBatch { get; set; }

        [ForeignKey("DocumentType")]
        [Display(Name = "Document Type:")]
        public int DocumentTypeId { get; set; }
        public DocumentType DocumentType { get; set; }

        [Index]
        [Display(Name = "Name of Dependent:")]
        public int? DependentId { get; set; }

        [Index]
        public int MemberId { get; set; }

        #endregion

        #region -- IValidatableObject Members --

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            using (var db = new IdentityDataContext())
            {
                if (RequestFor == Enums.RequestFor.Dependent && DependentId == null)
                {
                    yield return new ValidationResult("Dependent Name is required.", new List<string>() { "DependentId" });
                }
            }
        }

        #endregion
    }
}
