using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Corelib;
using Corelib.Models;
using OfficeOpenXml;
using System.IO;
using System.Data.Entity;
using Corelib.Classes;
using System.Threading.Tasks;
using System.Net;
using Corelib.Enums;
using System.Reflection;
using System.ComponentModel.DataAnnotations;

namespace WebUI.Areas.Member.Controllers
{
    [Authorize(Roles = "Member")]
    public class DependentCancellationsController : BaseMemberController
    {
        #region -- Action Result --

        public ActionResult Index(string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.DependentCancellations
                .Include(t => t.EndorsementBatch)
                .Include(t => t.Reason)
                .Include(t => t.DocumentType)
                .Where(t => t.MemberCode == this.Member.Code && !t.Deleted)
                .OrderByDescending(t => t.RequestDate).ToList();

            return View(model.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        public ActionResult Create()
        {
            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            var model = new DependentCancellation()
            {
                MemberCode = this.Member.Code,
                AccountCode = this.Member.AccountCode,
                Status = RequestStatus.Saved
            };

            base.DependentCancellationReadOnlyAttribute(model);
            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.DependentCancellation).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, this.Member.AccountCode, this.Member.Code);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Name);
            ViewBag.Members = LegacyHelper.GetActiveMembers(legacyDb, model.AccountCode).Where(t => t.Type == "Principal");

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(DependentCancellation model, string submit)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (ModelState.IsValid)
            {
                if (model.FileWrapper != null)
                {
                    using (var binaryReader = new BinaryReader(model.FileWrapper.InputStream))
                    {
                        model.DocumentFile = binaryReader.ReadBytes(model.FileWrapper.ContentLength);
                        model.DocumentFileName = model.FileWrapper.FileName;
                        model.DocumentContentType = model.FileWrapper.ContentType;
                    }
                }

                var endorsementBatch = new EndorsementBatch()
                {
                    Deadline = DateTime.Now,
                    ReferenceNumber = Helper.GenerateRandomEndorsementBatchReferenceNumber(),
                    Date = DateTime.Now,
                    EndorsementType = Constants.DEPENDENT_CANCELLATION_ENDORSEMENT_TYPE,
                    BatchType = Constants.DEPENDENT_CANCELLATION_ENDORSEMENT_TYPE,
                    EndorsementCount = 1,
                    AccountCode = model.AccountCode,
                    Status = Corelib.Enums.EndorsementBatchStatus.New
                };
                db.EndorsementBatches.Add(endorsementBatch);

                model.EndorsementBatch = endorsementBatch;
                if (submit == "Submit Request")
                {
                    var setting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == this.Member.AccountCode) ?? new AccountSetting();
                    if (setting.BypassHRManagerApproval)
                    {
                        model.Status = Corelib.Enums.RequestStatus.CorporateAdminApproved;
                        endorsementBatch.Status = EndorsementBatchStatus.ApprovedByCorporateAdmin;
                    }
                    else
                    {
                        model.Status = Corelib.Enums.RequestStatus.Submitted;
                        endorsementBatch.Status = EndorsementBatchStatus.ForCorporateAdminApproval;
                    }
                    Emailer.Emailer.SendSubmitDependentCancellationEmailInstant(model, setting.BypassHRManagerApproval);
                }
                db.DependentCancellations.Add(model);
                db.SaveChanges();

                return RedirectToAction("Index", new { accountCode = model.AccountCode });
            }

            base.DependentCancellationReadOnlyAttribute(model);
            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.DependentCancellation).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, model.AccountCode, model.MemberCode);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Name);

            return View(model);
        }

        public ActionResult Edit(Guid? guid)
        {
            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var model = db.DependentCancellations.FirstOrDefault(t => t.Guid == guid && !t.Deleted);
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            base.DependentCancellationReadOnlyAttribute(model);
            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.DependentCancellation).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, model.AccountCode, model.MemberCode);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Name);

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(DependentCancellation model, string submit)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (model.FileWrapper != null)
            {
                using (var binaryReader = new BinaryReader(model.FileWrapper.InputStream))
                {
                    model.DocumentFile = binaryReader.ReadBytes(model.FileWrapper.ContentLength);
                    model.DocumentFileName = model.FileWrapper.FileName;
                    model.DocumentContentType = model.FileWrapper.ContentType;
                }
            }

            if (ModelState.IsValid)
            {
                var dependentCancellation = db.DependentCancellations.FirstOrDefault(t => t.Id == model.Id && !t.Deleted);
                db.Entry(dependentCancellation).CurrentValues.SetValues(model);
                if (submit == "Submit Request")
                {
                    var setting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == this.Member.AccountCode) ?? new AccountSetting();
                    var endorsementBatch = db.EndorsementBatches.FirstOrDefault(t => t.Id == dependentCancellation.EndorsementBatchId);
                    if (setting.BypassHRManagerApproval)
                    {
                        dependentCancellation.Status = Corelib.Enums.RequestStatus.CorporateAdminApproved;
                        endorsementBatch.Status = EndorsementBatchStatus.ApprovedByCorporateAdmin;
                    }
                    else
                    {
                        dependentCancellation.Status = Corelib.Enums.RequestStatus.Submitted;
                        endorsementBatch.Status = EndorsementBatchStatus.ForCorporateAdminApproval;
                    }
                    Emailer.Emailer.SendSubmitDependentCancellationEmailInstant(model, setting.BypassHRManagerApproval);
                }
                db.Entry(dependentCancellation).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index", new { accountCode = model.AccountCode });
            }

            base.DependentCancellationReadOnlyAttribute(model);
            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.DependentCancellation).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, model.AccountCode, model.MemberCode);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Name);
            ViewBag.Members = LegacyHelper.GetActiveMembers(legacyDb, model.AccountCode).Where(t => t.Type == "Principal");

            return View(model);
        }

        public ActionResult Delete(Guid? guid)
        {
            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var model = db.DependentCancellations.Include(t => t.EndorsementBatch).FirstOrDefault(t => t.Guid == guid && !t.Deleted);
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            if (model.MemberCode != this.Member.Code) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            EndorsementBatch endorsementBatch = null;
            if (model.EndorsementBatch != null) endorsementBatch = db.EndorsementBatches.FirstOrDefault(t => t.Id == model.EndorsementBatchId);

            db.Entry(model).State = EntityState.Deleted;
            if (endorsementBatch != null) db.Entry(endorsementBatch).State = EntityState.Deleted;
            db.SaveChanges();

            return RedirectToAction("Index", new { messageType = "Success", message = "Cancellation of Dependent's Membership successfully deleted." });
        }

        public ActionResult Cancel(Guid? guid)
        {
            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            var dependentCancellation = db.DependentCancellations.FirstOrDefault(t => !t.Deleted && t.Guid == guid);
            if (dependentCancellation == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            dependentCancellation.Status = Corelib.Enums.RequestStatus.Saved;
            db.Entry(dependentCancellation).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index", new { messageType = "Success!", message = "Successfully Cancelled Dependent Cancellation." });
        }

        #endregion
    }
}