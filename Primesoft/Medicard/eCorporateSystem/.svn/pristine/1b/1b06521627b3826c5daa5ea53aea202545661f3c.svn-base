using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Web;
using System.Web.Mvc;
using Corelib.Models;
using Corelib.Classes;
using Corelib;
using System.Threading;
using WebUI.Models;

namespace WebUI.Controllers
{
    public class ApplicationController : Controller
    {
        protected IdentityDataContext db = new IdentityDataContext();

        #region -- Action Results --

        public ActionResult DataUpload()
        {
            return View();
        }

        [HttpPost]
        public ActionResult UploadApplication(ImportViewModel importViewModel)
        {
            if (ModelState.IsValid){
                var listApplication = db.Applications.Where(t => !t.Deleted).ToList();
                var appVerifications = new List<ApplicationVerification>();
                var numberOfErrors = 0;
                string fileName = "";

                if(importViewModel.ApplicationVerifications != null){
                    foreach (var item in importViewModel.ApplicationVerifications){
                        var isExist = listApplication.Any(t => (t.DateOfBirth == item.DateOfBirth && t.LastName == item.LastName && t.FirstName == item.FirstName && t.MiddleName == item.MiddleName) && !t.Deleted);
                        if (isExist){
                            item.IsError = true;
                            item.ErrorMessage = "Application already exist in the database.";
                            numberOfErrors++;
                        }
                        else{
                            item.IsError = false;
                        }
                        appVerifications.Add(item);
                        fileName = item.FileName;
                    }

                    if (appVerifications.Any(t => t.IsError)){
                        importViewModel.UploadSummary.NumberOfErrors = numberOfErrors;
                        var viewModel = new ImportViewModel(){
                            ApplicationVerifications = appVerifications,
                            UploadSummary = importViewModel.UploadSummary
                        };
                        return PartialView("_NewApplicationVerification", viewModel);
                    }
                    else{
                        if (appVerifications != null){
                            foreach(var item in appVerifications){
                                var application = new Application(item);
                                db.Applications.Add(application);
                            }
                        }
                    }

                    var removeAppVerification = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).ToList();
                    db.ApplicationVerifications.RemoveRange(removeAppVerification);
                }

                db.SaveChanges();                
                return null;
            }
            var errors = ModelState.Values.Select(v => v.Errors).ToList().Count();
            importViewModel.UploadSummary.NumberOfErrors = errors;
            importViewModel.ApplicationVerifications.ToList().ForEach(a => { a.IsError = false; });
            return PartialView("_NewApplicationVerification", importViewModel);
        }

        [HttpPost]
        public ActionResult UploadRenewal(ImportViewModel importViewModel)
        {
            if (ModelState.IsValid)
            {
                var listApplication = db.Applications.Where(t => !t.Deleted).ToList();
                var appVerifications = new List<ApplicationVerification>();
                var numberOfErrors = 0;
                string fileName = "";

                if (importViewModel.ApplicationVerifications != null)
                {
                    foreach (var item in importViewModel.ApplicationVerifications)
                    {
                        var isExist = listApplication.Any(t => (t.DateOfBirth == item.DateOfBirth && t.LastName == item.LastName && t.FirstName == item.FirstName && t.MiddleName == item.MiddleName && t.Guid != item.Guid) && !t.Deleted);
                        if (isExist)
                        {
                            item.IsError = true;
                            item.ErrorMessage = "Application already exist in the database.";
                            numberOfErrors++;
                        }
                        else
                        {
                            item.IsError = false;
                        }
                        appVerifications.Add(item);
                        fileName = item.FileName;
                    }

                    if (appVerifications.Any(t => t.IsError))
                    {
                        importViewModel.UploadSummary.NumberOfErrors = numberOfErrors;
                        var viewModel = new ImportViewModel()
                        {
                            ApplicationVerifications = appVerifications,
                            UploadSummary = importViewModel.UploadSummary
                        };
                        return PartialView("_RenewalVerification", viewModel);
                    }
                    else
                    {
                        if (appVerifications != null)
                        {
                            foreach (var item in appVerifications)
                            {
                                var application = new Application(item);
                                db.Applications.Add(application);
                            }
                        }
                    }

                    var removeAppVerification = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).ToList();
                    db.ApplicationVerifications.RemoveRange(removeAppVerification);
                }

                db.SaveChanges();
                return null;
            }
            var errors = ViewData.ModelState.Where(n => n.Value.Errors.Count > 0).ToList().Count();
            importViewModel.UploadSummary.NumberOfErrors = errors;
            importViewModel.ApplicationVerifications.ToList().ForEach(a => { a.IsError = false; });
            return PartialView("_RenewalVerification", importViewModel);
        }

        #endregion

        #region -- Functions --

        public FileResult RenewalApplicationExcelDownload()
        {
            return File(ExcelTools.RenewalApplicationExcelDownload(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Renewal.xlsx");
        }

        public FileResult NewApplicationExcelDownload()
        {
            return File(ExcelTools.NewApplicationExcelDownload(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "New Application.xlsx");
        }

        public String UploadExcel(HttpPostedFileBase fileData)
        {
            var fileExtension = fileData.FileName.Substring(fileData.FileName.LastIndexOf(".") + 1);
            if (fileExtension != "xlsx") throw new Exception("File Not Valid");
            var filename = String.Format("{0}.{1}", Guid.NewGuid().ToString(), fileExtension);
            var filepath = System.Web.HttpContext.Current.Server.MapPath(string.Format("~/Uploads/{0}", filename));
            fileData.SaveAs(filepath);

            return filename;
        }

        [HttpPost]
        public JsonResult StartThreading(string filePath, string applicationType)
        {
            var path = System.Web.HttpContext.Current.Server.MapPath(string.Format("~/Uploads/{0}", filePath));
            if (applicationType == "New Application")
            {
                var thread = new Thread(new ParameterizedThreadStart(ExcelTools.ImportNewApplication));
                thread.Start(new ExcelTools.ImportParameter()
                {
                    Path = path,
                    Username = Config.CurrentUser
                });
            }
            else if (applicationType == "Renewal")
            {
                var thread = new Thread(new ParameterizedThreadStart(ExcelTools.ImportRenewalApplication));
                thread.Start(new ExcelTools.ImportParameter()
                {
                    Path = path,
                    Username = Config.CurrentUser
                });
            }
            return Json(new { Type = applicationType });
        }

        [HttpPost]
        public JsonResult ExcelValidation(string fileName, string applicationType)
        {
            var filePath = Path.GetFileName(fileName);

            var excelValidation = fileName != null ? db.UploadLogs.FirstOrDefault(t => t.FileName == filePath) : null;

            if (excelValidation != null)
            {
                return Json(new
                {
                    currentRow = excelValidation.CurrentRow,
                    rowCompleted = excelValidation.RowsCompleted,
                    numberOfItems = excelValidation.NumberOfItems,
                    status = (int)excelValidation.UploadStatus,
                    type = applicationType
                });
            }
            return Json(new
            {
                currentRow = 0,
                rowCompleted = 0,
                numberOfItems = 0,
                status = 0,
                type = applicationType
            });
        }

        [HttpPost]
        public ActionResult ImportComfirmation(string filePath, string applicationType)
        {
            var fileName = Path.GetFileName(filePath);
            var errors = db.ExcelErrors.Where(t => t.FileName == fileName && !t.Deleted).Select(t => t.RowNumber).Distinct().ToList();
            var employee = db.ApplicationVerifications.Where(t => !t.Deleted && t.FileName == fileName).OrderBy(t => t.Row).ToList();
            ViewBag.FilePath = filePath;
            var errorMessage = "";
            if(db.ExcelErrors.Any(t => t.FileName == fileName && !t.Deleted && t.ErrorMessage == "Invalid Excel Format.")){
                errorMessage = "Invalid Excel Format.";
            }
            var summary = new UploadSummary()
            {
                RowCompleted = employee.Count,
                FileName = fileName,
                NumberOfErrors = errors.Count,
                ErrorMessage = errorMessage
            };
            var model = new ImportViewModel()
            {
                UploadSummary = summary,
                ApplicationVerifications = employee
            };

            if (applicationType == "New Application") return PartialView("NewApplicationImport", model);

            return PartialView("RenewalImport", model);
        }

        #endregion
    }
}