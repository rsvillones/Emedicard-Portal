using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Corelib;
using Corelib.Models;
using OfficeOpenXml;
using System.IO;
using System.Data.Entity;
using Corelib.Classes;
using System.Threading.Tasks;
using System.Net;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    [Authorize(Roles = "SysAd, CanViewRequestManagement")]
    public class RequestManagementController : BaseAccountController
    {
        #region  -- Action Results --

        public ActionResult Index(string accountCode, string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.Amendments.Include(t => t.EndorsementBatch).Include(t => t.Reason).Include(t => t.DocumentType).Where(t => t.AccountCode == this.LegacyAccount.Code && !t.Deleted).ToList();

            return View(model.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        #endregion

        #region -- Amendment --

        public ActionResult Amendment(string accountCode, Guid? guid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            Amendment model;
            if (guid != null && db.Amendments.Any(t => t.Guid == guid))
            {
                model = db.Amendments.Include(t => t.EndorsementBatch).FirstOrDefault(t => t.Guid == guid);
            }
            else
            {
                model = new Amendment();
            }

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);
            ViewBag.Dependents = db.Dependents.Where(t => !t.Deleted).OrderBy(t => t.LastName);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);
            ViewBag.Members = db.Members.Where(t => !t.Deleted && t.AccountCode == accountCode).OrderBy(t => t.LastName);

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Amendment(EndorsementBatch endorsementBatch, string accountCode, string submit)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            endorsementBatch.Date = DateTime.Now;
            endorsementBatch.EndorsementType = "New";
            endorsementBatch.BatchType = "Single Amendment";
            endorsementBatch.AccountCode = accountCode;
            endorsementBatch.Status = Corelib.Enums.EndorsementBatchStatus.New;

            var request = Request;
            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == accountCode) ?? new AccountSetting();

            if (ModelState.IsValid)
            {
                if (endorsementBatch.Id == 0)
                {
                    db.EndorsementBatches.Add(endorsementBatch);
                    if (endorsementBatch.Amendments != null)
                    {
                        foreach (var amendment in endorsementBatch.Amendments)
                        {
                            if (submit == "Submit Request")
                            {
                                if (!accountSetting.BypassHRManagerApproval)
                                {
                                    amendment.Status = Corelib.Enums.RequestStatus.ForProcessing;
                                }
                                else
                                {
                                    amendment.Status = Corelib.Enums.RequestStatus.HrForProcessing;
                                }
                            }
                            byte[] fileData = null;
                            if (amendment.FileWrapper != null)
                            {
                                using (var binaryReader = new BinaryReader(amendment.FileWrapper.InputStream))
                                {
                                    fileData = binaryReader.ReadBytes(amendment.FileWrapper.ContentLength);
                                }
                            }
                            amendment.DocumentFile = fileData;
                            amendment.EndorsementBatchId = endorsementBatch.Id;
                            db.Amendments.Add(amendment);
                        }
                    }
                }
                else
                {
                    var currentBatch = db.EndorsementBatches.FirstOrDefault(t => t.Id == endorsementBatch.Id && !t.Deleted);
                    db.Entry(currentBatch).CurrentValues.SetValues(endorsementBatch);
                    db.Entry(currentBatch).State = EntityState.Modified;
                    if (endorsementBatch.Amendments != null)
                    {
                        foreach (var amendment in endorsementBatch.Amendments)
                        {
                            if (submit == "Submit Request")
                            {
                                if (!accountSetting.BypassHRManagerApproval)
                                {
                                    amendment.Status = Corelib.Enums.RequestStatus.ForProcessing;
                                }
                                else
                                {
                                    amendment.Status = Corelib.Enums.RequestStatus.HrForProcessing;
                                }
                            }
                            byte[] fileData = null;
                            if (amendment.FileWrapper != null)
                            {
                                using (var binaryReader = new BinaryReader(amendment.FileWrapper.InputStream))
                                {
                                    fileData = binaryReader.ReadBytes(amendment.FileWrapper.ContentLength);
                                }
                            }

                            var currentAmendment = db.Amendments.FirstOrDefault(t => t.Id == amendment.Id && !t.Deleted);
                            db.Entry(currentAmendment).CurrentValues.SetValues(amendment);
                            currentAmendment.EndorsementBatchId = endorsementBatch.Id;
                            amendment.DocumentFile = fileData;
                            db.Entry(currentAmendment).State = EntityState.Modified;
                        }
                    }
                }
                db.SaveChanges();
                return RedirectToAction("Index", new { accountCode = accountCode });
            }

            base.ReadOnlyAttribute(endorsementBatch);

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);
            ViewBag.Dependents = db.Dependents.Where(t => !t.Deleted).OrderBy(t => t.LastName);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);

            return View(endorsementBatch);
        }

        #endregion

        #region -- Functions --

        public string GetPropertyValue(int memberId, int propertyName, int requestForId, int? dependentId)
        {
            var dataType = Convert.ToString((Corelib.Enums.RequestDataType)propertyName);
            var requestFor = (Corelib.Enums.RequestFor)requestForId;
            var member = db.Members.FirstOrDefault(t => !t.Deleted && t.Id == memberId);
            var dependent = db.Dependents.FirstOrDefault(t => !t.Deleted && t.MemberId == memberId && t.Id == dependentId.Value);
            var returnValue = "";
            switch (requestFor)
            {
                case Corelib.Enums.RequestFor.Principal:
                    if (member != null)
                    {
                        var propertyInfo = member.GetType().GetProperty(dataType);

                        if (propertyInfo.PropertyType == typeof(DateTime))
                        {
                            var date = Convert.ToDateTime(propertyInfo.GetValue(member, null));
                            returnValue = date.ToString("MM/dd/yyyy");
                        }
                        else
                        {
                            returnValue = Convert.ToString(propertyInfo.GetValue(member, null));
                        }
                        return returnValue;
                    }
                    return "Member not found.";
                case Corelib.Enums.RequestFor.Dependent:
                    if (dependent != null && member != null){
                        var propertyInfo = dependent.GetType().GetProperty(dataType);
                        if (propertyInfo != null)
                        {
                            if (propertyInfo.PropertyType == typeof(DateTime))
                            {
                                var date = Convert.ToDateTime(propertyInfo.GetValue(dependent, null));
                                returnValue = date.ToString("MM/dd/yyyy");
                            }
                            else
                            {
                                returnValue = Convert.ToString(propertyInfo.GetValue(dependent, null));
                            }
                            return returnValue;
                        }
                        return "Data type of dependent not found.";
                    }
                    return "Select dependent name.";
                default:
                    break;
            }
            return returnValue;            
        }

        public bool IsPropertyDateTime(int memberId, int propertyName)
        {
            var dataType = Convert.ToString((Corelib.Enums.RequestDataType)propertyName);
            var member = db.Members.FirstOrDefault(t => !t.Deleted && t.Id == memberId);
            if (member != null)
            {
                var propertyInfo = member.GetType().GetProperty(dataType);
                if (propertyInfo.PropertyType == typeof(DateTime))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            return false;
        }

        public string GetDependents(int? memberId)
        {
            var member = db.Members.FirstOrDefault(t => !t.Deleted && t.Id == memberId) ?? new Corelib.Models.Member();
            var dependents = db.Dependents.Where(t => !t.Deleted && t.MemberId == member.Id).ToList();

            var sb = new System.Text.StringBuilder();
            if (memberId != null)
            {
                sb.Append(string.Format(@"<option value=''>-- Select Dependent --</option>"));
                foreach (var dependent in dependents)
                {
                    sb.Append(string.Format(@"<option value='{0}'>{1}</option>", dependent.Id, dependent.FullName));
                }
            }
            else
            {
                sb.Append(string.Format(@"<option value=''>-- Select Member --</option>"));
            }

            return sb.ToString();
        }

        #endregion
    }
}