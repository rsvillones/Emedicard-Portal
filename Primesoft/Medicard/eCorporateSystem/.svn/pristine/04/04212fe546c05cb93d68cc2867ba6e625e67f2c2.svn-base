using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Corelib;
using Corelib.Models;

namespace WebUI.Controllers
{
    public class AccountOfficersController : Controller
    {
        #region -- Variable Declarations --

        private IdentityDataContext db = new IdentityDataContext();
        private LegacyDataContext legacyDb = new LegacyDataContext();
        
        #endregion

        #region -- Action Results --

        // GET: AccountOfficers
        public async Task<ActionResult> Index()
        {
            return View(await db.AccountOfficers.ToListAsync());
        }

        // GET: AccountOfficers/Details/5
        public async Task<ActionResult> Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            AccountOfficer accountOfficer = await db.AccountOfficers.FindAsync(id);
            if (accountOfficer == null)
            {
                return HttpNotFound();
            }
            return View(accountOfficer);
        }

        // GET: AccountOfficers/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: AccountOfficers/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "Id,Code,FirstName,MiddleInitial,LastName,EmailAddress,Guid,CrBy,CrDate,ModBy,ModDate,Deleted,Timestamp")] AccountOfficer accountOfficer)
        {
            if (ModelState.IsValid)
            {
                db.AccountOfficers.Add(accountOfficer);
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }

            return View(accountOfficer);
        }

        // GET: AccountOfficers/Edit/5
        public async Task<ActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            AccountOfficer accountOfficer = await db.AccountOfficers.FindAsync(id);
            if (accountOfficer == null)
            {
                return HttpNotFound();
            }
            return View(accountOfficer);
        }

        // POST: AccountOfficers/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "Id,Code,FirstName,MiddleInitial,LastName,EmailAddress,Guid,CrBy,CrDate,ModBy,ModDate,Deleted,Timestamp")] AccountOfficer accountOfficer)
        {
            if (ModelState.IsValid)
            {
                db.Entry(accountOfficer).State = EntityState.Modified;
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }
            return View(accountOfficer);
        }

        // GET: AccountOfficers/Delete/5
        public async Task<ActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            AccountOfficer accountOfficer = await db.AccountOfficers.FindAsync(id);
            if (accountOfficer == null)
            {
                return HttpNotFound();
            }
            return View(accountOfficer);
        }

        // POST: AccountOfficers/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(int id)
        {
            AccountOfficer accountOfficer = await db.AccountOfficers.FindAsync(id);
            db.AccountOfficers.Remove(accountOfficer);
            await db.SaveChangesAsync();
            return RedirectToAction("Index");
        }

        
        #endregion

        #region -- Functions --



        #endregion

        #region -- Overrides --

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
                legacyDb.Dispose();
            }

            base.Dispose(disposing);
        }
        
        #endregion
    }
}
