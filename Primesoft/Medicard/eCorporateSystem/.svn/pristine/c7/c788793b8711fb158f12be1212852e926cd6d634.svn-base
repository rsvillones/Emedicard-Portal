using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Corelib;
using Corelib.Models;
using OfficeOpenXml;
using System.IO;
using System.Data.Entity;
using Corelib.Classes;
using System.Threading.Tasks;
using System.Net;
using System.Threading;
using System.Security.Principal;
using Corelib.Enums;
using System.Diagnostics;
using System.Text;
using ExcelLibrary.SpreadSheet;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
    public class EndorsementHistoryController : BaseAccountController
    {
        #region -- Constants --

        private const int NEW_APPLICATION_TYPE_COLUMN = 0;
        private const int NEW_LAST_NAME_COLUMN = NEW_APPLICATION_TYPE_COLUMN + 1;
        private const int NEW_FIRST_NAME_COLUMN = NEW_LAST_NAME_COLUMN + 1;
        private const int NEW_MIDDLE_NAME_COLUMN = NEW_FIRST_NAME_COLUMN + 1;
        private const int NEW_BIRTHDAY_COLUMN = NEW_MIDDLE_NAME_COLUMN + 1;
        private const int NEW_AREA_CODE_COLUMN = NEW_BIRTHDAY_COLUMN + 1;
        private const int NEW_EMPLOYEE_ID_COLUMN = NEW_AREA_CODE_COLUMN + 1;
        private const int NEW_APPLIED_PLAN_COLUMN = NEW_EMPLOYEE_ID_COLUMN + 1;
        private const int NEW_DEPENDENT_TYPE_COLUMN = NEW_APPLIED_PLAN_COLUMN + 1;
        private const int NEW_DEPENDENT_RELATION_CODE_COLUMN = NEW_DEPENDENT_TYPE_COLUMN + 1;
        private const int NEW_GENDER_COLUMN = NEW_DEPENDENT_RELATION_CODE_COLUMN + 1;
        private const int NEW_CIVIL_STATUS_COLUMN = NEW_GENDER_COLUMN + 1;
        private const int NEW_WAIVER_COLUMN = NEW_CIVIL_STATUS_COLUMN + 1;
        private const int NEW_EFFECTIVITY_DATE_COLUMN = NEW_WAIVER_COLUMN + 1;
        private const int NEW_OTHER_REMARKS_COLUMN = NEW_EFFECTIVITY_DATE_COLUMN + 1;
        private const int NEW_ERC_COLUMN = NEW_OTHER_REMARKS_COLUMN + 1;
        private const int NEW_REFERENCE_NUMBER_COLUMN = NEW_ERC_COLUMN + 1;
        private const int NEW_DEPARTMENT_TYPE_COLUMN = NEW_REFERENCE_NUMBER_COLUMN + 1;
        private const int NEW_DEPARTMENT_PRINNAME_COLUMN = NEW_DEPARTMENT_TYPE_COLUMN + 1;
        private const int NEW_DEPARTMENT_PRINAPPNO_COLUMN = NEW_DEPARTMENT_PRINNAME_COLUMN + 1;
        private const int NEW_DATE_HIRED_COLUMN = NEW_DEPARTMENT_PRINAPPNO_COLUMN + 1;
        private const int NEW_CANCER_LIMIT_COLUMN = NEW_DATE_HIRED_COLUMN + 1;
        private const int NEW_CIB_PLAN_COLUMN = NEW_CANCER_LIMIT_COLUMN + 1;
        private const int NEW_CIB_LIMIT_COLUMN = NEW_CIB_PLAN_COLUMN + 1;
        private const int NEW_IDENTIFIER_COLUMN = NEW_CIB_LIMIT_COLUMN + 1;
        private const int NEW_GUID_COLUMN = NEW_IDENTIFIER_COLUMN + 1;


        private const int RENEWAL_MEMBER_CODE_COLUMN = 0;
        private const int RENEWAL_LAST_NAME_COLUMN = RENEWAL_MEMBER_CODE_COLUMN + 1;
        private const int RENEWAL_FIRST_NAME_COLUMN = RENEWAL_LAST_NAME_COLUMN + 1;
        private const int RENEWAL_MIDDLE_NAME_COLUMN = RENEWAL_FIRST_NAME_COLUMN + 1;
        private const int RENEWAL_BIRTHDAY_COLUMN = RENEWAL_MIDDLE_NAME_COLUMN + 1;
        private const int RENEWAL_AGE_COLUMN = RENEWAL_BIRTHDAY_COLUMN + 1;
        private const int RENEWAL_AREA_CODE_COLUMN = RENEWAL_AGE_COLUMN + 1;
        private const int RENEWAL_AREA_DESCRIPTION_COLUMN = RENEWAL_AREA_CODE_COLUMN + 1;
        private const int RENEWAL_EMPLOYEE_NUMBER_COLUMN = RENEWAL_AREA_DESCRIPTION_COLUMN + 1;
        private const int RENEWAL_ROOM_CODE_COLUMN = RENEWAL_EMPLOYEE_NUMBER_COLUMN + 1;
        private const int RENEWAL_ROOM_DESCRIPTION_COLUMN = RENEWAL_ROOM_CODE_COLUMN + 1;
        private const int RENEWAL_TYPE_COLUMN = RENEWAL_ROOM_DESCRIPTION_COLUMN + 1;
        private const int RENEWAL_RELATION_CODE_COLUMN = RENEWAL_TYPE_COLUMN + 1;
        private const int RENEWAL_RELATION_DESCRIPTION_COLUMN = RENEWAL_RELATION_CODE_COLUMN + 1;
        private const int RENEWAL_GENDER_COLUMN = RENEWAL_RELATION_DESCRIPTION_COLUMN + 1;
        private const int RENEWAL_CIVIL_STATUS_COLUMN = RENEWAL_GENDER_COLUMN + 1;
        private const int RENEWAL_WAIVER_COLUMN = RENEWAL_CIVIL_STATUS_COLUMN + 1;
        private const int RENEWAL_EFFECTIVITY_COLUMN = RENEWAL_WAIVER_COLUMN + 1;
        private const int RENEWAL_VALIDITY_COLUMN = RENEWAL_EFFECTIVITY_COLUMN + 1;
        private const int RENEWAL_STATUS = RENEWAL_VALIDITY_COLUMN + 1;
        private const int RENEWAL_REMARKS = RENEWAL_STATUS + 1;

        #endregion

        #region -- Variable Declarations --

        private IdentityDataContext db = new IdentityDataContext();
        private LegacyDataContext legacyDb = new LegacyDataContext();

        #endregion

        #region -- Constructor --

        public EndorsementHistoryController()
        {
            db.User = db.Users.FirstOrDefault(t => t.UserName == System.Web.HttpContext.Current.User.Identity.Name);
        }

        #endregion

        #region -- Action Results --

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult Index(string accountCode, int? page, string messageType, string message, string endorsementType, DateTime? dateCreated, string referenceNumber, string controlNumber)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.EndorsementBatches
                .Where(t => t.AccountCode == this.LegacyAccount.Code && !t.Deleted)
                .OrderByDescending(t => t.Date).ToList();

            if (!string.IsNullOrEmpty(endorsementType)) model = model.Where(t => t.EndorsementType.Contains(endorsementType)).ToList();
            if (!string.IsNullOrEmpty(controlNumber)) model = model.Where(t => !string.IsNullOrEmpty(t.ControlNumber) && t.ControlNumber.Contains(controlNumber)).ToList();
            if (!string.IsNullOrEmpty(referenceNumber)) model = model.Where(t => !string.IsNullOrEmpty(t.ReferenceNumber) && t.ReferenceNumber.Contains(referenceNumber)).ToList();
            var dateSting = "";
            if (dateCreated != null)
            {
                model = model.Where(t => t.Date.Date == dateCreated.Value.Date).ToList();
                dateSting = dateCreated.Value.ToString("MM/dd/yyyy");
            }

            ViewBag.EndorsementType = endorsementType;
            ViewBag.DateSting = dateSting;
            ViewBag.ReferenceNumber = referenceNumber;
            ViewBag.ControlNumber = controlNumber;

            ViewBag.EndorsementTypes = new SelectList(new List<string>() { 
                Constants.ACTION_MEMO_ENDORSEMENT_TYPE,
                Constants.ADDITIONAL_DEPENDENT_ENDORSEMENT_TYPE,
                Constants.AMENDMENT_ENDORSEMENT_TYPE,
                Constants.CANCEL_MEMBERSHIP_ENDORSEMENT_TYPE,
                Constants.DEPENDENT_CANCELLATION_ENDORSEMENT_TYPE,
                Constants.ID_REPLACEMENT_ENDORSEMENT_TYPE,
                Constants.NEW_ENDORSEMENT_TYPE,
                Constants.RENEWAL_ENDORSEMENT_TYPE,
            }, endorsementType);

            ViewBag.SearchValue = String.Format("{0} {1} {2} {3}", endorsementType, dateSting, controlNumber, referenceNumber).Trim();

            return View(model.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult Amendment(Guid? guid, string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var endorsementBatch = db.EndorsementBatches
                .Include(t => t.Amendments)
                .FirstOrDefault(t => t.Guid == guid && !t.Deleted);
            if (endorsementBatch == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);
            var model = endorsementBatch.Amendments.FirstOrDefault();
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            ReadOnlyAttribute();

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.Amendment).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            //ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, model.AccountCode, model.MemberCode);
            ViewBag.Dependents = legacyDb.LegacyDependentProcesses.Where(t => t.PrincipalCode == model.MemberCode && !string.IsNullOrEmpty(t.DependentCode));
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted && t.Classification == DocumentClassification.Amendment).OrderBy(t => t.DisplayOrder);
            bool isPrincipal = model.RequestFor == RequestFor.Principal ? true : false;
            ViewBag.PlanList = new SelectList(Helper.GetLegacyRoomRates(model.AccountCode, isPrincipal), "LongDescription", "LongDescription", model.ChangeDataTo);
            ViewBag.EnumList = GetEnumSelectList(model);

            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult IdReplacement(Guid? guid, string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var endorsementBatch = db.EndorsementBatches
                .Include(t => t.IdReplacements)
                .FirstOrDefault(t => t.Guid == guid && !t.Deleted);
            if (endorsementBatch == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);
            var model = endorsementBatch.IdReplacements.FirstOrDefault();
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            ReadOnlyAttribute();

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.IdReplacement).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            //ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, model.AccountCode, model.MemberCode);
            ViewBag.Dependents = legacyDb.LegacyDependentProcesses.Where(t => t.PrincipalCode == model.MemberCode && !string.IsNullOrEmpty(t.DependentCode));
            ViewBag.Members = LegacyHelper.GetActiveMembers(legacyDb, model.AccountCode).Where(t => t.Type == "Principal");
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted && t.Classification == DocumentClassification.IdReplacement).OrderBy(t => t.DisplayOrder);

            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult AdditionalDependent(Guid? guid, string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var endorsementBatch = db.EndorsementBatches
                .Include(t => t.AdditionalDependents)
                .FirstOrDefault(t => t.Guid == guid && !t.Deleted);
            if (endorsementBatch == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);
            var model = endorsementBatch.AdditionalDependents.FirstOrDefault();
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            ReadOnlyAttribute();

            AdditionalDependentProcessOtherInfo(model);

            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult DependentCancellation(Guid? guid, string accountCode)
        {

            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var endorsementBatch = db.EndorsementBatches
                .Include(t => t.DependentCancellations)
                .FirstOrDefault(t => t.Guid == guid && !t.Deleted);
            if (endorsementBatch == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);
            var model = endorsementBatch.DependentCancellations.FirstOrDefault();
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            ReadOnlyAttribute();

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted && t.Type == ReasonType.DependentCancellation).OrderBy(t => t.DisplayOrder).ThenBy(t => t.Description);
            //ViewBag.Dependents = LegacyHelper.GetActiveDependents(legacyDb, model.AccountCode, model.MemberCode);
            ViewBag.Dependents = legacyDb.LegacyDependentProcesses.Where(t => t.PrincipalCode == model.MemberCode && !string.IsNullOrEmpty(t.DependentCode));
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted && t.Classification == DocumentClassification.DependentCancellation).OrderBy(t => t.DisplayOrder);
            ViewBag.Members = LegacyHelper.GetActiveMembers(legacyDb, model.AccountCode).Where(t => t.Type == "Principal");

            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult CancelledMembers(Guid? guid, string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var endorsementBatch = db.EndorsementBatches
                .Include(t => t.CancelledMembers)
                .FirstOrDefault(t => t.Guid == guid && !t.Deleted);

            if (endorsementBatch == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            ReadOnlyAttribute();

            return View(endorsementBatch);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult ActionMemos(string accountCode, string replyTo, string controlNumber, DateTime? dateIssued, string memberName)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            var accountCodes = Helper.GetLegacyAccountCodes(db, legacyDb);

            if (string.IsNullOrEmpty(replyTo)) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var query = db.ActionMemos
                .Include(t => t.EndorsementBatch)
                .Include(t => t.Member)
                .Include(t => t.Dependent)
                .Include(t => t.Documents)
                .Where(t => accountCodes.Contains(t.EndorsementBatch.AccountCode));

            query = query.Where(t => t.EndorsementBatch.ReplyTo.Contains(replyTo));

            if (!string.IsNullOrEmpty(controlNumber)) query = query.Where(t => t.ControlNumber.Contains(controlNumber));

            string dateIssuedString = "";
            if (dateIssued != null)
            {
                query = query.Where(t => t.DateIssued.Date == dateIssued.Value.Date);
                dateIssuedString = dateIssued.Value.ToString("MM/dd/yyyy");
            }

            if (!string.IsNullOrEmpty(memberName))
                query = query.Where(t => t.Member.FirstName.Contains(memberName) || t.Member.MiddleName.Contains(memberName) || t.Member.LastName.Contains(memberName));


            var model = query.OrderByDescending(t => t.DateIssued);

            ViewBag.ControlNumber = controlNumber;
            ViewBag.DateIssued = dateIssuedString;
            ViewBag.MemberName = memberName;
            ViewBag.ReplyTo = replyTo;

            ViewBag.SearchValue = string.Format("{0} {1} {2}", controlNumber, dateIssuedString, memberName).Trim();
            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult ActionMemoDetail(string accountCode, Guid? guid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var actionMemo = db.ActionMemos
                .Include(t => t.Member)
                .Include(t => t.Dependent)
                .Include(t => t.Documents)
                .Include(t => t.Documents.Select(d => d.DocumentType))
                .FirstOrDefault(t => t.Guid == guid);
            if (actionMemo == null) return HttpNotFound();
            var accountCodes = Helper.GetLegacyAccountCodes(db, legacyDb);
            if (!accountCodes.Any(t => t == actionMemo.Member.AccountCode)) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == accountCode) ?? new AccountSetting();

            ViewBag.ShowActionMemoDueDate = accountSetting.ShowActionMemoDueDate;

            return View(actionMemo);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult Members(Guid? guid, string sortOrder, string currentFilter, int? page)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var legacyAccountCodes = Helper.GetLegacyAccountCodes(db, legacyDb);
            var eb = db.EndorsementBatches
                .Include(t => t.Members)
                .Include(t => t.RenewalMembers)
                .FirstOrDefault(t => t.Guid == guid && legacyAccountCodes.Contains(t.AccountCode));
            if (eb == null) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            var returnValue = base.ValidateAccountCode(eb.AccountCode);
            if (returnValue != null) return returnValue;

            var members = db.Members.Where(t => t.EndorsementBatchId == eb.Id);
            Helper.SetSortParameters<Corelib.Models.Member>(this, ref members, sortOrder, currentFilter, new SortParameter() { PropertyName = "LastName" }, new List<SortParameter>()
            {
                new SortParameter() { PropertyName = "EmployeeNumber" },
                new SortParameter() { PropertyName = "FirstName" },
                new SortParameter() { PropertyName = "MiddleName" },
                new SortParameter() { PropertyName = "DateOfBirth" }
            });

            ViewBag.EndorsementGuid = eb.Guid;
            return View(members.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult MemberProfile(Guid? guid)
        {
            var accountCodes = Helper.GetLegacyAccountCodes(db, legacyDb);
            if (!guid.HasValue) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var model = db.Members
                .Include(t => t.Dependents)
                .Include(t => t.MedicalHistories)
                .Include(t => t.MedicalHistories.Select(mh => mh.Question))
                .Include(t => t.MedicalHistories.Select(mh => mh.Question.QuestionGroup))
                .Include(t => t.Dependents.Select(d => d.MedicalHistories))
                .Include(t => t.Dependents.Select(d => d.MedicalHistories.Select(mh => mh.Question)))
                .Include(t => t.Dependents.Select(d => d.MedicalHistories.Select(mh => mh.Question.QuestionGroup)))
                .FirstOrDefault(t => t.Guid == guid);

            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            if (!accountCodes.Contains(model.AccountCode)) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            Helper.IsMedicalHistoryComplete(db, model);
            Helper.IsDependentMedicalHistoryComplete(db, model);

            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == model.AccountCode) ?? new AccountSetting();
            ViewBag.BypassMedicalHistory = accountSetting.BypassMedicalHistory;

            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementHistories")]
        public ActionResult DownloadMembershipEndorsement(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var legacyAccountCodes = Helper.GetLegacyAccountCodes(db, legacyDb);
            var endorsementType = (db.EndorsementBatches.FirstOrDefault(t => t.Guid == guid && legacyAccountCodes.Contains(t.AccountCode)) ?? new EndorsementBatch()).EndorsementType;
            if (String.IsNullOrEmpty(endorsementType)) return new HttpStatusCodeResult(HttpStatusCode.NotFound);

            var query = (IQueryable<EndorsementBatch>)db.EndorsementBatches;
            switch (endorsementType)
            {
                case Constants.NEW_ENDORSEMENT_TYPE:
                    query = query
                        .Include(t => t.Members)
                        .Include(t => t.Members.Select(m => m.Dependents));
                    break;
                case Constants.RENEWAL_ENDORSEMENT_TYPE:
                    query = query
                        .Include(t => t.RenewalMembers);
                    break;
            }

            var eb = query
                .FirstOrDefault(t => t.Guid == guid && legacyAccountCodes.Contains(t.AccountCode));

            byte[] fileBuffer = new byte[0];
            switch (endorsementType)
            {
                case Constants.NEW_ENDORSEMENT_TYPE:
                    fileBuffer = PopulateNewApplication(eb, null);
                    break;
                case Constants.RENEWAL_ENDORSEMENT_TYPE:
                    fileBuffer = PopulateRenewal(eb, null);
                    break;
            }

            return File(fileBuffer, "application/vnd.ms-excel", String.Format("{0}.xls", string.IsNullOrEmpty(eb.ControlNumber) ? eb.ReferenceNumber.ToString() : eb.ControlNumber));
        }

        #endregion

        #region -- Function Action Results --

        public ActionResult ReadOnlyAttribute()
        {
            ViewBag.ReadOnly = true;
            ViewBag.HtmlControlReadOnlyAttributes = new { @class = "form-control white-readonly", @readonly = "readonly" };
            ViewBag.HtmlDropDownAttributes = new { @class = "form-control white-readonly", @disabled = "disabled" };
            ViewBag.HtmlMemberAttributes = new { @class = "form-control white-readonly", @disabled = "disabled" };
            ViewBag.HtmlRequestForAttributes = new { @class = "form-control white-readonly", @disabled = "disabled" };
            ViewBag.HtmlDataTypeAttributes = new { @class = "form-control white-readonly", @disabled = "disabled" };
            ViewBag.HtmlDependentAttributes = new { @class = "form-control white-readonly", @disabled = "disabled" };
            ViewBag.HtmlDateOfBirthAttributes = new { @class = "form-control white-readonly", @readonly = "readonly" };
            ViewBag.HtmlOptionalPlanAttributes = new { @class = "form-control white-readonly", @disabled = "disabled" };

            return null;
        }

        #endregion

        #region -- Functions --

        public FileResult DownloadFile(Guid? guid)
        {
            if (guid != null && db.Amendments.Any(t => t.Guid == guid))
            {
                var amendment = db.Amendments.FirstOrDefault(t => t.Guid == guid);
                if (amendment.DocumentFile != null || !string.IsNullOrEmpty(amendment.DocumentContentType) || !string.IsNullOrEmpty(amendment.DocumentFileName))
                { return File(amendment.DocumentFile, amendment.DocumentContentType, amendment.DocumentFileName); }
            }
            if (guid != null && db.IdReplacements.Any(t => t.Guid == guid))
            {
                var model = db.IdReplacements.FirstOrDefault(t => t.Guid == guid);
                if (model.DocumentFile != null || !string.IsNullOrEmpty(model.DocumentContentType) || !string.IsNullOrEmpty(model.DocumentFileName))
                { return File(model.DocumentFile, model.DocumentContentType, model.DocumentFileName); }
            }
            if (guid != null && db.DependentCancellations.Any(t => t.Guid == guid))
            {
                var model = db.DependentCancellations.FirstOrDefault(t => t.Guid == guid);
                if (model.DocumentFile != null || !string.IsNullOrEmpty(model.DocumentContentType) || !string.IsNullOrEmpty(model.DocumentFileName))
                { return File(model.DocumentFile, model.DocumentContentType, model.DocumentFileName); }
            }
            if (guid != null && db.AdditionalDependents.Any(t => t.Guid == guid))
            {
                var model = db.AdditionalDependents.FirstOrDefault(t => t.Guid == guid);
                if (model.DocumentFile != null || !string.IsNullOrEmpty(model.DocumentContentType) || !string.IsNullOrEmpty(model.DocumentFileName))
                { return File(model.DocumentFile, model.DocumentContentType, model.DocumentFileName); }
            }
            return null;
        }

        private void AdditionalDependentProcessOtherInfo(AdditionalDependent model)
        {
            var member = db.Members.FirstOrDefault(t => t.Code == model.MemberCode) ?? new Corelib.Models.Member();
            var dependentPlans = Helper.GetLegacyRoomRates(model.AccountCode, false);
            var appliedPlans = dependentPlans.Where(t => t.Id == member.DependentAppliedPlan).ToList();
            if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();

            var allowedPlans = new List<int>();
            if (!String.IsNullOrEmpty(member.AllowedDependentPlans))
            {
                foreach (var allowedPlan in member.AllowedDependentPlans.Split(','))
                {
                    allowedPlans.Add(int.Parse(allowedPlan));
                }
            }

            var optionalPlans = dependentPlans.Where(t => t.Id != member.DependentAppliedPlan && allowedPlans.Contains(t.Id)).ToList();
            var cities = legacyDb.LegacyCities.OrderBy(t => t.Name).ToList();
            var provinces = legacyDb.LegacyProvinces.OrderBy(t => t.Name).ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription", model.AppliedPlan);
            ViewBag.OptionalPlanList = new SelectList(optionalPlans, "Id", "LongDescription", model.OptionalPlan);
            ViewBag.CityList = new SelectList(cities, "Code", "Name", model.City);
            ViewBag.ProvinceList = new SelectList(provinces, "Code", "Name", model.Province);
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" }, model.Gender);
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Widower", "Separated", "Single Parent" }, model.CivilStatus);
            ViewBag.RelationshipList = new SelectList(db.Relationships, "Code", "Description", model.RelationshipCode);
            ViewBag.MemberList = new SelectList(LegacyHelper.GetActiveMembers(legacyDb, model.AccountCode).Where(t => t.Type == "Principal"), "Code", "FullName", model.MemberCode);
            ViewBag.OptionalPlanCount = optionalPlans.Count(t => t.Id != member.DependentAppliedPlan);
        }

        public static IEnumerable<SelectListItem> GetEnumSelectList(Amendment amendment)
        {
            var dataTypes = Enum.GetValues(typeof(RequestDataType)).Cast<RequestDataType>();
            if (amendment.RequestFor == RequestFor.Dependent)
            {
                dataTypes = dataTypes.Except(new RequestDataType[] { 
                        RequestDataType.CostCenter, 
                        RequestDataType.DateHired, 
                        RequestDataType.Area, 
                        RequestDataType.Designation, 
                        RequestDataType.Level,
                        RequestDataType.EmployeeNumber
                    }).ToList();
            }
            var requestDataTypes = dataTypes.Select(t => new
            {
                ID = ((int)t).ToString(),
                Name = EnumHelper<RequestDataType>.GetDisplayValue(t)
            }).ToList();

            var intValue = Convert.ChangeType(amendment.DataType, amendment.DataType.GetTypeCode());
            return new SelectList(requestDataTypes, "ID", "Name", intValue.ToString());
        }

        private byte[] PopulateNewApplication(EndorsementBatch eb, string controlNumber)
        {
            byte[] returnValue = new byte[0];
            var templatePath = Server.MapPath("~/ExcelTemplates/Underwriting New Application.xls");
            var targetPath = String.Format(@"{0}\{1}.xls", Server.MapPath("~/Uploads"), Guid.NewGuid());

            System.IO.File.Copy(templatePath, targetPath);

            var workbook = Workbook.Load(targetPath);
            var worksheet = workbook.Worksheets[0];
            var currentRow = 1;
            foreach (var member in eb.Members)
            {
                if (!string.IsNullOrEmpty(controlNumber) && member.ControlNumber != controlNumber) continue;

                worksheet.Cells[currentRow, NEW_APPLICATION_TYPE_COLUMN] = new Cell("P");
                worksheet.Cells[currentRow, NEW_LAST_NAME_COLUMN] = new Cell(member.LastName);
                worksheet.Cells[currentRow, NEW_FIRST_NAME_COLUMN] = new Cell(member.FirstName);
                worksheet.Cells[currentRow, NEW_MIDDLE_NAME_COLUMN] = new Cell(member.MiddleName);
                worksheet.Cells[currentRow, NEW_BIRTHDAY_COLUMN] = new Cell(member.DateOfBirth.ToString("MM/dd/yyyy"));
                worksheet.Cells[currentRow, NEW_AREA_CODE_COLUMN] = new Cell(member.Area);
                worksheet.Cells[currentRow, NEW_EMPLOYEE_ID_COLUMN] = new Cell(member.EmployeeNumber);
                worksheet.Cells[currentRow, NEW_APPLIED_PLAN_COLUMN] = new Cell(member.OptionalPlan.HasValue ? member.OptionalPlan : member.AppliedPlan);
                worksheet.Cells[currentRow, NEW_DEPENDENT_TYPE_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_DEPENDENT_RELATION_CODE_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_GENDER_COLUMN] = new Cell(member.Gender.ToUpper());
                worksheet.Cells[currentRow, NEW_CIVIL_STATUS_COLUMN] = new Cell(member.CivilStatus.ToUpper());
                worksheet.Cells[currentRow, NEW_WAIVER_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_EFFECTIVITY_DATE_COLUMN] = new Cell(member.EffectivityDate.HasValue ? member.EffectivityDate.Value.ToString("MM/dd/yyyy") : "");
                worksheet.Cells[currentRow, NEW_OTHER_REMARKS_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_ERC_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_REFERENCE_NUMBER_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_DEPARTMENT_TYPE_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_DEPARTMENT_PRINNAME_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_DEPARTMENT_PRINAPPNO_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_DATE_HIRED_COLUMN] = new Cell(member.DateHired.HasValue ? member.DateHired.Value.ToString("MM/dd/yyyy") : "");
                worksheet.Cells[currentRow, NEW_CANCER_LIMIT_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_CIB_PLAN_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_CIB_LIMIT_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_IDENTIFIER_COLUMN] = new Cell("");
                worksheet.Cells[currentRow, NEW_GUID_COLUMN] = new Cell(String.Format("EMED{0}", member.Guid));

                currentRow++;

                if (member.Dependents != null)
                {
                    foreach (var dependent in member.Dependents)
                    {
                        worksheet.Cells[currentRow, NEW_APPLICATION_TYPE_COLUMN] = new Cell("D");
                        worksheet.Cells[currentRow, NEW_LAST_NAME_COLUMN] = new Cell(dependent.LastName);
                        worksheet.Cells[currentRow, NEW_FIRST_NAME_COLUMN] = new Cell(dependent.FirstName);
                        worksheet.Cells[currentRow, NEW_MIDDLE_NAME_COLUMN] = new Cell(dependent.MiddleName);
                        worksheet.Cells[currentRow, NEW_BIRTHDAY_COLUMN] = new Cell(dependent.DateOfBirth.ToString("MM/dd/yyyy"));
                        worksheet.Cells[currentRow, NEW_AREA_CODE_COLUMN] = new Cell(dependent.Area);
                        worksheet.Cells[currentRow, NEW_EMPLOYEE_ID_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_APPLIED_PLAN_COLUMN] = new Cell(dependent.OptionalPlan.HasValue ? dependent.OptionalPlan : dependent.AppliedPlan);
                        worksheet.Cells[currentRow, NEW_DEPENDENT_TYPE_COLUMN] = new Cell(dependent.DependentType.ToString().ToUpper());
                        worksheet.Cells[currentRow, NEW_DEPENDENT_RELATION_CODE_COLUMN] = new Cell(dependent.Relationship);
                        worksheet.Cells[currentRow, NEW_GENDER_COLUMN] = new Cell(member.Gender);
                        worksheet.Cells[currentRow, NEW_CIVIL_STATUS_COLUMN] = new Cell(dependent.CivilStatus);
                        worksheet.Cells[currentRow, NEW_WAIVER_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_EFFECTIVITY_DATE_COLUMN] = new Cell(member.EffectivityDate.HasValue ? member.EffectivityDate.Value.ToString("MM/dd/yyyy") : "");
                        worksheet.Cells[currentRow, NEW_OTHER_REMARKS_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_ERC_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_REFERENCE_NUMBER_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_DEPARTMENT_TYPE_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_DEPARTMENT_PRINNAME_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_DEPARTMENT_PRINAPPNO_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_DATE_HIRED_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_CANCER_LIMIT_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_CIB_PLAN_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_CIB_LIMIT_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_IDENTIFIER_COLUMN] = new Cell("");
                        worksheet.Cells[currentRow, NEW_GUID_COLUMN] = new Cell(String.Format("EMED{0}", dependent.Guid));

                        currentRow++;
                    }
                }
            }

            for (int row = 1; row <= 101; row++)
            {
                worksheet.Cells[row, NEW_GUID_COLUMN + 1] = new Cell("");
            }

            using (var stream = new MemoryStream())
            {
                workbook.SaveToStream(stream);
                returnValue = stream.ToArray();
            }

            System.IO.File.Delete(targetPath);

            return returnValue;
        }

        private byte[] PopulateRenewal(EndorsementBatch eb, string controlNumber)
        {
            byte[] returnValue = new byte[0];
            var templatePath = Server.MapPath("~/ExcelTemplates/Underwriting Renewal.xls");
            var targetPath = String.Format(@"{0}\{1}.xls", Server.MapPath("~/Uploads"), Guid.NewGuid());

            System.IO.File.Copy(templatePath, targetPath);

            var workbook = Workbook.Load(targetPath);
            var worksheet = workbook.Worksheets[0];
            var relationships = db.Relationships.ToList();
            var currentRow = 1;

            foreach (var renewalMember in eb.RenewalMembers)
            {
                if (!string.IsNullOrEmpty(controlNumber) && renewalMember.ControlNumber != controlNumber) continue;

                var member = renewalMember.Type == "Principal" ? db.Members.FirstOrDefault(t => t.Code == renewalMember.Code) : null;
                var dependent = renewalMember.Type == "Dependent" ? db.Dependents.FirstOrDefault(t => t.Code == renewalMember.Code) : null;

                worksheet.Cells[currentRow, RENEWAL_MEMBER_CODE_COLUMN] = new Cell(renewalMember.Code);
                worksheet.Cells[currentRow, RENEWAL_LAST_NAME_COLUMN] = new Cell(renewalMember.LastName);
                worksheet.Cells[currentRow, RENEWAL_FIRST_NAME_COLUMN] = new Cell(renewalMember.FirstName);
                worksheet.Cells[currentRow, RENEWAL_MIDDLE_NAME_COLUMN] = new Cell(renewalMember.MiddleName);
                worksheet.Cells[currentRow, RENEWAL_BIRTHDAY_COLUMN] = new Cell(renewalMember.DateOfBirth.ToString("MM/dd/yyyy"));
                worksheet.Cells[currentRow, RENEWAL_AGE_COLUMN] = new Cell(renewalMember.Age);
                worksheet.Cells[currentRow, RENEWAL_AREA_CODE_COLUMN] = new Cell(renewalMember.Area);
                worksheet.Cells[currentRow, RENEWAL_AREA_DESCRIPTION_COLUMN] = new Cell((legacyDb.LegacyAreas.FirstOrDefault(t => t.AreaCode == renewalMember.Area) ?? new LegacyArea()).Description);
                worksheet.Cells[currentRow, RENEWAL_EMPLOYEE_NUMBER_COLUMN] = new Cell(renewalMember.EmployeeNumber);
                if (renewalMember.Type == "Principal")
                {
                    if (member != null)
                    {
                        var plan = member.OptionalPlan.HasValue ? member.OptionalPlan : member.AppliedPlan;
                        worksheet.Cells[currentRow, RENEWAL_ROOM_CODE_COLUMN] = new Cell(plan);
                        worksheet.Cells[currentRow, RENEWAL_ROOM_DESCRIPTION_COLUMN] = new Cell((legacyDb.LegacyRoomRates.FirstOrDefault(t => t.Id == plan) ?? new LegacyRoomRate()).For);
                    }
                }
                else
                {
                    if (dependent != null)
                    {
                        var plan = dependent.OptionalPlan.HasValue ? dependent.OptionalPlan : dependent.AppliedPlan;
                        worksheet.Cells[currentRow, RENEWAL_ROOM_CODE_COLUMN] = new Cell(plan);
                        worksheet.Cells[currentRow, RENEWAL_ROOM_DESCRIPTION_COLUMN] = new Cell((legacyDb.LegacyRoomRates.FirstOrDefault(t => t.Id == plan) ?? new LegacyRoomRate()).For);
                    }
                }

                worksheet.Cells[currentRow, RENEWAL_TYPE_COLUMN] = new Cell(renewalMember.Type.ToUpper());
                worksheet.Cells[currentRow, RENEWAL_RELATION_CODE_COLUMN] = new Cell(renewalMember.Relationship);
                worksheet.Cells[currentRow, RENEWAL_RELATION_DESCRIPTION_COLUMN] = new Cell((relationships.FirstOrDefault(t => t.Code == renewalMember.Relationship) ?? new Relationship()).Description);
                worksheet.Cells[currentRow, RENEWAL_GENDER_COLUMN] = new Cell(renewalMember.Gender.ToUpper());
                worksheet.Cells[currentRow, RENEWAL_CIVIL_STATUS_COLUMN] = new Cell(renewalMember.CivilStatus.ToUpper());
                worksheet.Cells[currentRow, RENEWAL_WAIVER_COLUMN] = new Cell(renewalMember.Waiver);
                worksheet.Cells[currentRow, RENEWAL_EFFECTIVITY_COLUMN] = new Cell(renewalMember.EffectivityDate.HasValue ? renewalMember.EffectivityDate.Value.ToString("MM/dd/yyyy") : "");
                worksheet.Cells[currentRow, RENEWAL_VALIDITY_COLUMN] = new Cell(renewalMember.ValidityDate.HasValue ? renewalMember.ValidityDate.Value.ToString("MM/dd/yyyy") : "");
                worksheet.Cells[currentRow, RENEWAL_REMARKS] = new Cell(renewalMember.Remarks);
                worksheet.Cells[currentRow, RENEWAL_STATUS] = new Cell(renewalMember.RenewalStatus == RenewalStatus.ForRenewal ? "RENEWED" : "RESIGNED");

                currentRow++;
            }

            for (int row = 1; row <= 101; row++)
            {
                worksheet.Cells[row, RENEWAL_REMARKS + 1] = new Cell("");
            }

            using (var stream = new MemoryStream())
            {
                workbook.SaveToStream(stream);
                returnValue = stream.ToArray();
            }

            System.IO.File.Delete(targetPath);

            return returnValue;
        }

        #endregion

        #region -- Overrides --

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
                legacyDb.Dispose();
                db = null;
                legacyDb = null;
            }

            base.Dispose(disposing);
        }

        #endregion
    }
}