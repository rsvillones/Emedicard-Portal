@model PagedList.IPagedList<Amendment>

@{
    ViewBag.Title = "Amendments";
    var amendment = new Amendment();
    IEnumerable<Dependent> dependents = ViewBag.Dependents;
}

<div class="row">
    <div class="col-lg-12">
        <h2 class="title">Amendments</h2>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 pageList-margin">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
        <p class="pager-padding" style="float: right">
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        </p>
    </div>
    <div class="col-lg-6">
        <p style="float: right">
            @Html.ActionLink("Add Amendment", "Amendment", null, new { @class = "btn btn-primary" })
        </p>
    </div>
</div>

<table class="table table-custom">
    <tr>
        <th>
            @Html.DisplayNameFor(modelItem => amendment.RequestDate)
        </th>
        <th>
            @Html.DisplayNameFor(modelItem => amendment.EffectivityDate)
        </th>
        <th>
            @Html.DisplayNameFor(modelItem => amendment.RequestFor)
        </th>
        <th>
            @Html.DisplayNameFor(modelItem => amendment.DataType)
        </th>
        <th>
            @Html.DisplayNameFor(modelItem => amendment.ChangeDataFrom)
        </th>
        <th>
            @Html.DisplayNameFor(modelItem => amendment.ChangeDataTo)
        </th>
        <th>
            Request Reason
        </th>
        <th>
            Dependent Name
        </th>
        <th>
            Remarks
        </th>
        <th>
            Request Status
        </th>
        <th>
            Attachment Document Type
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        var dependentName = item.DependentId != null ? dependents.FirstOrDefault(t => t.Id == item.DependentId).FullName : "";
        <tr>
            <td>
                @Html.DisplayFor(model => item.RequestDate)
            </td>
            <td>
                @Html.DisplayFor(model => item.EffectivityDate)
            </td>
            <td>
                @Html.DisplayFor(model => item.RequestFor)
            </td>
            <td>
                @Html.DisplayFor(model => item.DataType)
            </td>
            <td>
                @Html.DisplayFor(model => item.ChangeDataFrom)
            </td>
            <td>
                @Html.DisplayFor(model => item.ChangeDataTo)
            </td>
            <td>
                @Html.DisplayFor(model => item.Reason.Description)
            </td>
            <td>
                @Html.DisplayFor(model => dependentName)
            </td>
            <td>
                @Html.DisplayFor(model => item.Remarks)
            </td>
            <td>
                @Html.DisplayFor(model => item.Status)
            </td>
            <td>
                @*@Html.ActionLink(item.DocumentType.Name, "DownloadFile", new {  guid = item.Guid }, new { @class = "btn btn-primary btn-xs" })*@
                @Html.DisplayFor(model => item.DocumentType.Name)
            </td>
            <td>
                @if (item.Status == Corelib.Enums.RequestStatus.Saved || item.Status == Corelib.Enums.RequestStatus.CancelledRequest)
                {
                    @Html.ActionLink("Edit", "Amendment", new { guid = item.Guid }, new { @class = "btn btn-primary btn-xs" })
                }
                @if (item.Status != Corelib.Enums.RequestStatus.Saved && item.Status != Corelib.Enums.RequestStatus.CancelledRequest
                    && item.Status != Corelib.Enums.RequestStatus.HrDisapproved && item.Status != Corelib.Enums.RequestStatus.Disapproved){ 
                    @Html.ActionLink("Cancel", "CancelAmendment", new { guid = item.Guid }, new { @class = "btn btn-danger btn-xs" })
                }
                @if (item.Status == Corelib.Enums.RequestStatus.Saved)
                {                    
                    @Html.ActionLink("Delete", "Delete", new { guid = item.Guid }, new { @class = "btn btn-danger btn-xs" })
                }
            </td>
        </tr>
    }
</table>

@section Scripts{
    @Html.Partial("_Message")
    <script type="text/javascript">
        $(document).ready(function () {
            if (window.location.href.indexOf("name_desc") > -1) {
                $('.sort-table').find('i').toggleClass('glyphicon-chevron-down').toggleClass('glyphicon-chevron-up');
            }
        });
    </script>
}


