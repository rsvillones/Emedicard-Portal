using System.Data.Entity;
using Corelib;
using Corelib.Models;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using WebUI.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Microsoft.Owin.Security;
using Mvc.Mailer;
using RazorEngine;
using WebUI.Mailers;
using Corelib.Classes;
using System.Data.SqlClient;
using System.Text;

namespace WebUI
{
    public class SortParameter
    {
        public string PropertyName { get; set; }
    }

    public static class Helper
    {
        #region -- Functions --

        public static void SetSortParameters<T>(Controller controller, ref IQueryable<T> entities, string sortOrder, string currentFilter, SortParameter defaultParameter, IEnumerable<SortParameter> parameters)
        {
            controller.ViewBag.CurrentFilter = currentFilter;
            controller.ViewBag.CurrentSort = sortOrder;

            controller.ViewData.Add(String.Format("{0}SortParam", defaultParameter.PropertyName), String.IsNullOrEmpty(sortOrder) || sortOrder == defaultParameter.PropertyName.ToLower() ? String.Format("{0}_desc", defaultParameter.PropertyName.ToLower()) : defaultParameter.PropertyName.ToLower());
            if (String.IsNullOrEmpty(sortOrder) || sortOrder == defaultParameter.PropertyName.ToLower())
            {
                entities = entities.OrderBy(defaultParameter.PropertyName);
            }
            else if (sortOrder == String.Format("{0}_desc", defaultParameter.PropertyName.ToLower()))
            {
                entities = entities.OrderByDescending(defaultParameter.PropertyName);
            }

            if (parameters != null)
            {
                foreach (var parameter in parameters)
                {
                    controller.ViewData.Add(String.Format("{0}SortParam", parameter.PropertyName), String.IsNullOrEmpty(sortOrder) || sortOrder == parameter.PropertyName.ToLower() ? String.Format("{0}_desc", parameter.PropertyName.ToLower()) : parameter.PropertyName.ToLower());
                    if (sortOrder == parameter.PropertyName.ToLower())
                    {
                        entities = entities.OrderBy(parameter.PropertyName);
                    }
                    else if (sortOrder == String.Format("{0}_desc", parameter.PropertyName.ToLower()))
                    {
                        entities = entities.OrderByDescending(parameter.PropertyName);
                    }
                }
            }
        }

        public static ApplicationUser AddUser(IdentityDataContext db, ApplicationUserViewModel applicationUser, bool saveChanges = true)
        {
            ApplicationUser returnValue = null;
            bool disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                db.User = db.Users.FirstOrDefault(t => t.UserName == HttpContext.Current.User.Identity.Name);
                disposeDb = true;
            }

            if (!db.Users.Any(t => t.UserName == applicationUser.UserName))
            {
                var userGroups = new Collection<Group>();
                var groupIds = applicationUser.Groups.Select(x => x.Id).ToList();
                var groups = db.Groups.Where(t => groupIds.Contains(t.Id)).ToList();
                foreach (var group in groups)
                {
                    userGroups.Add(group);
                }
                var user = new ApplicationUser();
                MapProperties(applicationUser, user);
                user.Groups = userGroups;

                var store = new UserStore<ApplicationUser>(db);
                var manager = new UserManager<ApplicationUser>(store);
                manager.Create(user, applicationUser.Password);

                if (saveChanges)
                {
                    db.SaveChanges();
                    returnValue = user;
                }
            }
            else
            {
                throw new Exception("UserName already exists.");
            }

            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            return returnValue;

        }

        public static bool ValidateOldPassword(string id, string oldPassword)
        {
            using (var context = new IdentityDataContext())
            {
                if (context.Users.Any(t => t.Id == id))
                {

                    var store = new UserStore<ApplicationUser>(context);
                    var manager = new UserManager<ApplicationUser>(store);
                    //string hashedPassword = manager.PasswordHasher..HashPassword(oldPassword);
                    var user = manager.FindById(id);
                    //return user.PasswordHash == hashedPassword;
                    return manager.PasswordHasher.VerifyHashedPassword(user.PasswordHash, oldPassword) == PasswordVerificationResult.Success;
                }
            }

            return false;
        }

        public static async Task<bool> LoginUser(string id)
        {
            using (var context = new IdentityDataContext())
            {
                if (context.Users.Any(t => t.Id == id))
                {

                    var store = new UserStore<ApplicationUser>(context);
                    var manager = new UserManager<ApplicationUser>(store);
                    var user = manager.FindById(id);
                    var am = HttpContext.Current.GetOwinContext().Authentication;
                    am.SignOut(DefaultAuthenticationTypes.ExternalCookie);
                    am.SignIn(new AuthenticationProperties() { IsPersistent = false }, await user.GenerateUserIdentityAsync(manager));
                }
            }

            return true;
        }

        public static async Task<bool> UpdateUserPasswordAsync(string id, string username, string password)
        {
            using (var context = new IdentityDataContext())
            {
                if (context.Users.Any(t => t.Id == id))
                {

                    var store = new UserStore<ApplicationUser>(context);
                    var manager = new UserManager<ApplicationUser>(store);
                    string hashedPassword = manager.PasswordHasher.HashPassword(password);
                    var user = manager.FindById(id);
                    await store.SetPasswordHashAsync(user, hashedPassword);
                    await store.UpdateAsync(user);
                    await manager.UpdateSecurityStampAsync(id);
                }
            }

            return true;
        }

        public static async Task<bool> UpdateName(string id, string name)
        {
            using (var context = new IdentityDataContext())
            {
                if (context.Users.Any(t => t.Id == id))
                {

                    var store = new UserStore<ApplicationUser>(context);
                    var manager = new UserManager<ApplicationUser>(store);
                    var user = manager.FindById(id);
                    if (user != null)
                    {
                        user.Name = name;
                        await store.UpdateAsync(user);
                    }
                    else
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        public static void SetUserGroup(IdentityDataContext context, UserStore<ApplicationUser> store, UserManager<ApplicationUser> manager, ApplicationUser applicationUser)
        {
            bool disposeContext = false;
            if (context == null)
            {
                context = new IdentityDataContext();
                disposeContext = true;
            }

            if (store == null)
            {
                store = new UserStore<ApplicationUser>(context);
            }

            if (manager == null)
            {
                manager = new UserManager<ApplicationUser>(store);
            }

            foreach (var group in context.Groups.Include(t => t.Roles).ToList())
            {
                if (applicationUser.Groups == null || !applicationUser.Groups.Any(t => t.Id == group.Id))
                {
                    foreach (var role in group.Roles)
                    {
                        if (manager.IsInRole(applicationUser.Id, role.Name))
                        {
                            manager.RemoveFromRole(applicationUser.Id, role.Name);
                        }
                    }
                }
            }

            if (applicationUser.Groups != null)
            {
                foreach (var group in applicationUser.Groups)
                {
                    var currentGroup = context.Groups.Include(t => t.Roles).FirstOrDefault(t => t.Id == group.Id);
                    if (currentGroup != null)
                    {
                        foreach (var role in currentGroup.Roles)
                        {
                            if (!manager.IsInRole(applicationUser.Id, role.Name))
                            {
                                manager.AddToRole(applicationUser.Id, role.Name);
                            }
                        }
                    }
                }
            }

            context.SaveChanges();

            if (disposeContext)
            {
                context.Dispose();
            }
        }

        public static ApplicationUser AddUser(Corelib.IdentityDataContext context, UserStore<ApplicationUser> store, UserManager<ApplicationUser> manager, string name, string username, string password, string email, string phone, bool isMember, params string[] roles)
        {
            bool disposeContext = false;
            if (context == null)
            {
                context = new IdentityDataContext();
                disposeContext = true;
            }

            if (store == null)
            {
                store = new UserStore<ApplicationUser>(context);
            }

            if (manager == null)
            {
                manager = new UserManager<ApplicationUser>(store);
            }

            var user = context.Users.FirstOrDefault(t => t.UserName == username);

            if (user == null)
            {
                user = new ApplicationUser
                {
                    Name = name,
                    UserName = username,
                    Email = email,
                    PhoneNumber = phone,
                    IsMember = isMember
                };

                manager.Create(user, password);
            }

            if (roles != null)
            {
                foreach (var role in roles)
                {
                    if (!manager.IsInRole(user.Id, role))
                    {
                        manager.AddToRole(user.Id, role);
                    }
                }
            }

            if (disposeContext)
            {
                context.Dispose();
            }

            return user;
        }

        public static void MapProperties(object source, object destination, bool mapId = true, params string[] propertiesToExclude)
        {
            foreach (var pi in destination.GetType().GetProperties())
            {
                if (!pi.CanWrite || source.GetType().GetProperty(pi.Name) == null || (!mapId && pi.Name == "Id") || (propertiesToExclude != null && propertiesToExclude.Contains(pi.Name)))
                    continue;

                destination.GetType().GetProperty(pi.Name).SetValue(destination, source.GetType().GetProperty(pi.Name).GetValue(source));
            }
        }

        public static IEnumerable<Group> GetGroups(IdentityDataContext db)
        {
            var disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                disposeDb = true;
            }

            IEnumerable<Group> returnValue;

            var userContext = HttpContext.Current.User;
            if (userContext.IsInRole("SysAd"))
            {
                returnValue = db.Groups.Where(t => !t.Deleted).OrderBy(t => t.Name).ToList();
            }
            else
            {
                var currentUser = db.Users.FirstOrDefault(t => t.UserName == userContext.Identity.Name);
                var groups = db.Groups.Include(t => t.AccessibleGroups).Where(t => t.Users.Select(user => user.UserName).Contains(userContext.Identity.Name) && !t.Deleted).ToList();
                var groupGuids = groups.SelectMany(t => t.AccessibleGroups).Select(t => t.GroupGuid).Distinct().ToList();
                var createdGroupGuids = db.Groups.Where(t => t.CrById == currentUser.Id && !t.Deleted).Select(t => t.Guid).ToList();

                returnValue = db.Groups.Where(t => (groupGuids.Contains(t.Guid) || createdGroupGuids.Contains(t.Guid)) && !t.Deleted).ToList();
            }

            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            return returnValue;
        }

        public static IEnumerable<LegacyAccount> GetLegacyAccounts(LegacyDataContext legacyDb, string agentCode)
        {
            var disposeLegacyDb = false;
            if (legacyDb == null)
            {
                legacyDb = new LegacyDataContext();
                disposeLegacyDb = true;
            }

            var returnValue = !String.IsNullOrEmpty(agentCode) ? legacyDb.LegacyAccounts.Where(t => t.AgentCode == agentCode).OrderBy(t => t.Name).ToList() : new List<LegacyAccount>();

            if (disposeLegacyDb)
            {
                legacyDb.Dispose();
                legacyDb = null;
            }

            return returnValue;
        }

        public static IEnumerable<LegacyAccount> GetLegacyAccounts(IdentityDataContext db, LegacyDataContext legacyDb)
        {
            var disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                disposeDb = true;
            }

            var disposeLegacyDb = false;
            if (legacyDb == null)
            {
                legacyDb = new LegacyDataContext();
                disposeLegacyDb = true;
            }

            IEnumerable<LegacyAccount> returnValue;

            var userContext = HttpContext.Current.User;

            if (HttpContext.Current.User.IsInRole("SysAd") || userContext.IsInRole("CanAssignAllAccounts"))
            {
                returnValue = legacyDb.LegacyAccounts.OrderBy(t => t.Name).ToList();
            }
            else
            {
                var user = db.Users.FirstOrDefault(t => t.UserName == userContext.Identity.Name);
                var accountCodes = new List<string>();
                if (user != null && !string.IsNullOrEmpty(user.AgentCode))
                {
                    returnValue = legacyDb.LegacyAccounts.Where(t => t.AgentCode == user.AgentCode).OrderBy(t => t.Name).ToList();
                }
                else
                {
                    accountCodes = db.Accounts.Where(t => t.ApplicationUser.UserName == HttpContext.Current.User.Identity.Name).Select(t => t.Code).ToList();
                    returnValue = legacyDb.LegacyAccounts.Where(t => accountCodes.Contains(t.Code)).OrderBy(t => t.Name).ToList();
                }
            }

            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            if (disposeLegacyDb)
            {
                legacyDb.Dispose();
                legacyDb = null;
            }

            return returnValue;
        }

        public static IEnumerable<string> GetLegacyAccountCodes(IdentityDataContext db, LegacyDataContext legacyDb)
        {
            var disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                disposeDb = true;
            }

            var disposeLegacyDb = false;
            if (legacyDb == null)
            {
                legacyDb = new LegacyDataContext();
                disposeLegacyDb = true;
            }

            IEnumerable<string> returnValue;

            var userContext = HttpContext.Current.User;

            if (HttpContext.Current.User.IsInRole("SysAd") || userContext.IsInRole("CanAssignAllAccounts"))
            {
                returnValue = legacyDb.LegacyAccounts.Select(t => t.Code).ToList();
            }
            else
            {
                var user = db.Users.FirstOrDefault(t => t.UserName == userContext.Identity.Name);
                var accountCodes = new List<string>();
                if (user != null && !string.IsNullOrEmpty(user.AgentCode))
                {
                    returnValue = legacyDb.LegacyAccounts.Where(t => t.AgentCode == user.AgentCode).Select(t => t.Code).ToList();
                }
                else
                {
                    returnValue = db.Accounts.Where(t => t.ApplicationUser.UserName == HttpContext.Current.User.Identity.Name).Select(t => t.Code).ToList();
                }
            }

            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            if (disposeLegacyDb)
            {
                legacyDb.Dispose();
                legacyDb = null;
            }

            return returnValue;
        }

        public static bool CreateUserForBatch(int endorsementBatchId)
        {
            using (var db = new IdentityDataContext())
            {
                var endorsementBatch = db.EndorsementBatches.Include(t => t.Members).FirstOrDefault(t => t.Id == endorsementBatchId);
                if (endorsementBatch == null) throw new Exception("Invalid batch id passed.");
                Account account;
                if (HttpContext.Current.User.IsInRole("SysAd"))
                {
                    account = db.Accounts.FirstOrDefault(t => t.Code == endorsementBatch.AccountCode);
                }
                else
                {
                    account = db.Accounts.FirstOrDefault(t => t.Code == endorsementBatch.AccountCode && t.ApplicationUser.UserName == HttpContext.Current.User.Identity.Name);
                }
                if (account == null) throw new Exception("Account selected was not found.");
                var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == account.Code) ?? new AccountSetting();

                foreach (var member in endorsementBatch.Members)
                {
                    var username = "";
                    var originalUsername = "";
                    var counter = 1;
                    if (accountSetting.UseEmailAsLogin && !string.IsNullOrEmpty(member.EmailAddress))
                    {
                        username = member.EmailAddress;
                    }
                    else
                    {
                        username = string.Format("{0}{1}{2:MMddyyyy}", member.FirstName.Substring(0, 1).ToLower(), member.LastName.ToLower(), member.DateOfBirth);
                    }
                    originalUsername = username;
                    while (true)
                    {
                        if (db.Users.Any(t => t.UserName == username))
                        {
                            username = string.Format("{0}{1}", originalUsername, counter);
                            continue;
                        }
                        counter++;
                        break;
                    }
                    var password = "";
                    if (accountSetting.UseRandomGeneratedPassword)
                    {
                        password = System.Web.Security.Membership.GeneratePassword(6, 2);
                    }
                    else
                    {
                        password = string.Format("{0}{1:MMddyyyy}", member.LastName.ToLower(), member.DateOfBirth);
                    }

                    var applicationUser = new ApplicationUserViewModel()
                    {
                        Name = String.Format("{0} {1} {2}", member.FirstName, member.MiddleName, member.LastName),
                        Email = member.EmailAddress,
                        Address = member.Area,
                        IsMember = true,
                        UserName = username,
                        Password = password
                    };

                    var user = AddUser(db, applicationUser, true);
                    member.UserId = user.Id;
                    member.UserName = username;
                    var store = new UserStore<ApplicationUser>(db);
                    var manager = new UserManager<ApplicationUser>(store);
                    manager.AddToRole(user.Id, "Member");

                    MemberEmailNotification(System.Web.HttpContext.Current, member, username, password);
                }

                db.SaveChanges();
            }

            return true;
        }

        public static bool IsPlanValid(int legacyRoomRateId, string accountCode)
        {
            using (var legacyDb = new LegacyDataContext())
            {
                return legacyDb.LegacyRoomRates.Any(t => t.AccountCode == accountCode && t.Id == legacyRoomRateId);
            }
        }

        public static IEnumerable<LegacyRoomRate> GetLegacyRoomRates(string accountCode, bool principal)
        {
            var paymentMode = (principal ? 0 : 1);
            using (var legacyDb = new LegacyDataContext())
            {
                return legacyDb.LegacyRoomRates
                    .Include(t => t.LegacyPlan)
                    .Include(t => t.LegacyPaymode)
                    .Where(t => t.AccountCode == accountCode && t.LegacyPaymode.Id == paymentMode)
                    .ToList();
            }
        }

        public static bool IsMedicalHistoryComplete(IdentityDataContext db, Member member)
        {
            var disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                disposeDb = true;
            }

            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == member.AccountCode) ?? new AccountSetting();
            var returnValue = false;
            if (!accountSetting.BypassMedicalHistory)
            {
                db.Database.ExecuteSqlCommand("SpCore_ProcessMedicalHistoryQuestions @MemberId=@p0", member.Id);

                returnValue = !db.MedicalHistories.Any(t => t.MemberId == member.Id && !t.Answer.HasValue);
            }
            else
            {
                returnValue = true;
            }

            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            return returnValue;
        }

        public static bool IsDependentMedicalHistoryComplete(IdentityDataContext db, Member member)
        {
            var disposeDb = false;
            if (db == null)
            {
                db = new IdentityDataContext();
                disposeDb = true;
            }

            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == member.AccountCode) ?? new AccountSetting();
            var returnValue = false;

            if (!accountSetting.BypassMedicalHistory)
            {
                var dependents = db.Dependents.Where(t => t.MemberId == member.Id && !t.Deleted).ToList();
                foreach (var dependent in dependents)
                {
                    db.Database.ExecuteSqlCommand("SpCore_ProcessDependentMedicalHistoryQuestions @DependentId=@p0", dependent.Id);
                }

                returnValue = !db.DependentMedicalHistories.Any(t => t.Dependent.MemberId == member.Id && !t.Answer.HasValue);
            }
            else
            {
                returnValue = true;
            }


            if (disposeDb)
            {
                db.Dispose();
                db = null;
            }

            return returnValue;
        }

        public static int ComputeAge(DateTime dateOfBirth)
        {
            DateTime today = DateTime.Today;
            int age = today.Year - dateOfBirth.Year;
            if (dateOfBirth > today.AddYears(-age)) age--;

            return age;
        }

        private static string RandomString(int size)
        {
            Random random = new Random((int)DateTime.Now.Ticks);
            var sb = new StringBuilder();
            char ch;
            for (int i = 0; i < size; i++)
            {
                ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));
                sb.Append(ch);
            }

            return sb.ToString();
        }

        public static string GenerateRandomEndorsementBatchReferenceNumber()
        {
            // get 1st random string 
            var randomString = System.Web.Security.Membership.GeneratePassword(4, 0).ToUpper();
            randomString = System.Text.RegularExpressions.Regex.Replace(randomString, @"[^a-zA-Z0-9]", m => "9");
            string rand1 = randomString;
            // get 2nd random string 
            randomString = System.Web.Security.Membership.GeneratePassword(4, 0).ToUpper();
            randomString = System.Text.RegularExpressions.Regex.Replace(randomString, @"[^a-zA-Z0-9]", m => "9");
            string rand2 = randomString;
            // creat full rand string
            return String.Format("{0}-{1}", rand1, rand2);
        }

        #endregion

        #region -- Extension Methods --

        public static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string ordering, params object[] values)
        {
            var type = typeof(T);
            var property = type.GetProperty(ordering);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderBy", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));

            return source.Provider.CreateQuery<T>(resultExp);
        }

        public static IQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string ordering, params object[] values)
        {
            var type = typeof(T);
            var property = type.GetProperty(ordering);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderByDescending", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));

            return source.Provider.CreateQuery<T>(resultExp);
        }

        #endregion

        #region -- Email Helpers --

        public static string SetEmailTemplate(EmailViewModel model, string mapTemplate)
        {
            var template = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath(mapTemplate));

            return Razor.Parse(template, model);
        }

        public static void MemberEmailNotification(HttpContext context, Member member, string userName, string password)
        {
            using (var db = new IdentityDataContext())
            {
                if (!string.IsNullOrEmpty(member.EmailAddress))
                {
                    var client = new SmtpClientWrapper();
                    client.SendCompleted += client_SendCompleted;

                    MvcMailMessage emailMessage = null;
                    emailMessage = UserMailer.SendMemberNotification(member, userName, password);
                    emailMessage.To.Add(member.EmailAddress);
                    emailMessage.SendEmailAsync(context);
                }
            }
        }

        public static void BatchSummaryNotification(HttpContext context, List<Member> members, string accountCode)
        {
            var emails = HrEmailAddresses(accountCode);
            foreach (var email in emails)
            {
                var client = new SmtpClientWrapper();
                client.SendCompleted += client_SendCompleted;

                MvcMailMessage emailMessage = null;
                emailMessage = UserMailer.SendBatchSummaryNotification(members);
                emailMessage.To.Add(email);
                emailMessage.SendEmailAsync(context);
            }
        }

        public static void CorpAdminMemberProfileNotification(HttpContext context, Member member, string accountCode)
        {
            var emails = HrEmailAddresses(accountCode);
            foreach (var email in emails)
            {
                var client = new SmtpClientWrapper();
                client.SendCompleted += client_SendCompleted;

                MvcMailMessage emailMessage = null;
                emailMessage = UserMailer.SendCorpAdminMemberProfileNotification(member);
                emailMessage.To.Add(email);
                emailMessage.SendEmailAsync(context);
            }
        }

        public static void UrgMemberProfileNotification(HttpContext context, Member member, string accountCode)
        {
            var emails = UrgEmailAddresses(accountCode);
            var client = new SmtpClientWrapper();
            client.SendCompleted += client_SendCompleted;

            foreach (var email in emails)
            {
                MvcMailMessage emailMessage = null;
                emailMessage = UserMailer.SendUrgMemberProfileNotification(member);
                emailMessage.To.Add(email);
                emailMessage.SendEmailAsync(context);
            }
        }

        public static void UrgMemberProfileNotification(HttpContext context, List<Member> members)
        {
            var client = new SmtpClientWrapper();
            client.SendCompleted += client_SendCompleted;

            foreach (var member in members){
                if (!string.IsNullOrEmpty(member.EmailAddress)) continue;
                MvcMailMessage emailMessage = null;
                emailMessage = UserMailer.SendUrgActionMemo(member);
                emailMessage.To.Add(member.EmailAddress);
                emailMessage.SendEmailAsync(context);
            }
        }

        static void client_SendCompleted(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                throw new Exception(e.Error.Message);
            }
        }

        public static string AbsoluteAction(string actionName, string controllerName, object routeValues = null)
        {
            var url = new UrlHelper(HttpContext.Current.Request.RequestContext);
            string scheme = url.RequestContext.HttpContext.Request.Url.Scheme;
            var returnValue = url.Action(actionName, controllerName, routeValues, scheme);
            return returnValue;
        }

        public static List<string> HrEmailAddresses(string accountCode)
        {
            using (var db = new IdentityDataContext())
            {
                return db.Accounts.Include(t => t.ApplicationUser).Where(t => !t.Deleted && t.Code == accountCode && t.IsCorporateAdmin).Select(t => t.ApplicationUser.Email).ToList();
            }
        }

        public static List<string> UrgEmailAddresses(string accountCode)
        {
            using (var db = new IdentityDataContext())
            {
                return db.Accounts.Include(t => t.ApplicationUser).Where(t => !t.Deleted && t.Code == accountCode && t.IsUnderWriter).Select(t => t.ApplicationUser.Email).ToList();
            }
        }

        #region -- UserMailer --

        private static IUserMailer _userMailer = new UserMailer();

        public static IUserMailer UserMailer
        {
            get { return _userMailer; }
            set { _userMailer = value; }
        }

        #endregion

        #endregion

    }
}