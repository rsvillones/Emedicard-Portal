using Corelib;
using Corelib.Enums;
using Corelib.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using System.Data.Entity;

namespace WindowsService
{
    public partial class MainService : ServiceBase
    {
        #region -- Constructor --

        public MainService()
        {
            InitializeComponent();

            _actionMemoTimer.Interval = Config.CheckActionMemoMinutes * 60 * 1000;
            _corporateAccountTimer.Interval = Config.CheckActionMemoMinutes * 60 * 1000;
            _emailNotificationTimer.Interval = 60000;

            _actionMemoTimer.Elapsed += QueryActionMemos;
            _corporateAccountTimer.Elapsed += QueryCorporateAccounts;
            _emailNotificationTimer.Elapsed += SendEmailNotifications;
        }

        #endregion

        #region -- Variable Declarations --

        private Timer _actionMemoTimer = new Timer();
        private Timer _corporateAccountTimer = new Timer();
        private Timer _emailNotificationTimer = new Timer();

        private readonly string _windowsServiceUser = "eMedicardWindowsService";

        #endregion

        #region -- Event Handlers --

        protected override void OnStart(string[] args)
        {
            _actionMemoTimer.Enabled = true;
            _corporateAccountTimer.Enabled = true;
            _emailNotificationTimer.Enabled = true;
        }

        protected override void OnStop()
        {
            _actionMemoTimer.Enabled = false;
            _corporateAccountTimer.Enabled = false;
            _emailNotificationTimer.Enabled = false;
        }

        void QueryActionMemos(object sender, ElapsedEventArgs e)
        {
            CheckActionMemos();
        }

        void QueryCorporateAccounts(object sender, ElapsedEventArgs e)
        {
        }

        void SendEmailNotifications(object sender, ElapsedEventArgs e)
        {
        }

        #endregion

        #region -- Functions --

        private void CheckActionMemos()
        {
            var endorsementBatchIds = new List<int>();

            using (var db = new IdentityDataContext())
            {
                db.User = new ApplicationUser() { UserName = _windowsServiceUser, Id = Guid.NewGuid().ToString() };

                var actionMemoProcessDate = db.ActionMemoProcessDates.OrderByDescending(t => t.Date).FirstOrDefault();
                var dateTo = DateTime.Now;
                IEnumerable<IActionMemo> legacyActionMemos;

                using (var legacyDb = new LegacyDataContext())
                {
                    legacyActionMemos = LegacyHelper.GetLegacyActionMemos(legacyDb, actionMemoProcessDate.Date, dateTo).ToList();
                }

                foreach (var legacyActionMemo in legacyActionMemos)
                {
                    Member member = null;
                    Dependent dependent = null;
                    if (legacyActionMemo.PrincipalOrDependent == "Dependent")
                    {
                        member = db.Members.FirstOrDefault(t => t.PrinAppNum == legacyActionMemo.PrinAppNum);
                        dependent = db.Dependents.FirstOrDefault(t => t.DepAppNum == legacyActionMemo.DepAppNum.Value);
                    }
                    else
                    {
                        member = db.Members.FirstOrDefault(t => t.PrinAppNum == legacyActionMemo.PrinAppNum);
                    }

                    if (member != null)
                    {
                        var endorsementBatch = db.EndorsementBatches.FirstOrDefault(t => t.ReplyTo == legacyActionMemo.ControlNumber);
                        if (endorsementBatch == null)
                        {
                            endorsementBatch = new EndorsementBatch()
                            {
                                Date = legacyActionMemo.ActionMemoDate.Value,
                                Deadline = legacyActionMemo.ActionMemoDate.Value.AddDays(3),
                                Status = EndorsementBatchStatus.New,
                                EndorsementType = "Action Memo",
                                EndorsementCount = 1,
                                AccountCode = legacyActionMemo.AccountCode,
                                //ReferenceNumber = Config.GenerateLegacyMapCode(db),
                                ReplyTo = legacyActionMemo.ControlNumber
                            };
                        }
                        else
                        {
                            endorsementBatch.EndorsementCount++;
                        }

                        var actionMemo = new ActionMemo()
                        {
                            DateIssued = legacyActionMemo.ActionMemoDate.Value,
                            Type = legacyActionMemo.Type,
                            MemberId = member.Id,
                            DependentId = dependent != null ? (int?)dependent.Id : null,
                            EndorsementBatch = endorsementBatch,
                            EndorsementBatchId = endorsementBatch.Id,
                            Details = legacyActionMemo.ActionMemoRemarks,
                            IsNew = true
                        };

                        db.ActionMemos.Add(actionMemo);
                        db.SaveChanges();

                        if (!endorsementBatchIds.Contains(endorsementBatch.Id))
                        {
                            endorsementBatchIds.Add(endorsementBatch.Id);
                        }
                    }
                }

                db.ActionMemoProcessDates.Add(new ActionMemoProcessDate()
                {
                    Date = dateTo
                });
                db.SaveChanges();

                foreach (var endorsementBatchId in endorsementBatchIds)
                {
                    var endorsementBatch = db.EndorsementBatches
                        .Include(t => t.ActionMemos)
                        .Include(t => t.ActionMemos.Select(am => am.Member))
                        .Include(t => t.ActionMemos.Select(am => am.Dependent))
                        .FirstOrDefault(t => t.Id == endorsementBatchId);
                    WebUI.Helper.UrgActionMemo(null, endorsementBatch);
                }
            }
        }

        private void CheckCorporateAccounts()
        {
            var saveDb = false;
            using (var db = new IdentityDataContext())
            {
                db.User = new ApplicationUser() { 
                    CrById = Guid.NewGuid().ToString(),
                    UserName = _windowsServiceUser
                };

                using (var legacyDb = new LegacyDataContext())
                {
                    var legacyAccounts = LegacyHelper.GetAllLegacyAccounts(legacyDb);
                    foreach (var legacyAccount in legacyAccounts)
                    {
                        if (!db.AccountSettings.Any(t => t.AccountCode == legacyAccount.Code))
                        {
                            db.AccountSettings.Add(new AccountSetting()
                            {
                                AccountCode = legacyAccount.Code,
                                AccountName = legacyAccount.Name
                            });
                            saveDb = true;
                        }
                    }
                }
                if (saveDb) db.SaveChanges();
            }
        }

        private void MapProperties(object source, object destination, bool mapId = true, params string[] propertiesToExclude)
        {
            foreach (var pi in destination.GetType().GetProperties())
            {
                if (!pi.CanWrite || source.GetType().GetProperty(pi.Name) == null || (!mapId && pi.Name == "Id") || (propertiesToExclude != null && propertiesToExclude.Contains(pi.Name)))
                    continue;

                destination.GetType().GetProperty(pi.Name).SetValue(destination, source.GetType().GetProperty(pi.Name).GetValue(source));
            }
        }

        #endregion
    }
}
