using Corelib.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data.Entity;
using Corelib;
using PagedList;
using System.Net;
using Corelib.Models;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    [Authorize(Roles="SysAd, CanViewEndorsementApprovals")]
    public class EndorsementApprovalsController : BaseAccountController
    {
        #region -- ActionResults --

        [Authorize(Roles = "SysAd, CanViewEndorsementApprovals")]
        public ActionResult Index(string accountCode, string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.Members.Include(t => t.Dependents)
                .Where(t => t.AccountCode == this.LegacyAccount.Code && t.Status == MembershipStatus.SubmittedToCorporateAdmin)
                .OrderBy(t => t.LastName)
                .ThenBy(t => t.FirstName)
                .ThenBy(t => t.MiddleName);

            return View(model.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }
     
        [Authorize(Roles = "SysAd, CanViewEndorsementApprovals")]
        public ActionResult MemberProfile(string accountCode, Guid? guid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (!guid.HasValue) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var model = db.Members
                .Include(t => t.Dependents)
                .Include(t => t.MedicalHistories)
                .Include(t => t.MedicalHistories.Select(mh => mh.Question))
                .Include(t => t.MedicalHistories.Select(mh => mh.Question.QuestionGroup))
                .Include(t => t.Dependents.Select(d => d.MedicalHistories))
                .Include(t => t.Dependents.Select(d => d.MedicalHistories.Select(mh => mh.Question)))
                .Include(t => t.Dependents.Select(d => d.MedicalHistories.Select(mh => mh.Question.QuestionGroup)))
                .Include(t => t.Dependents.Select(d => d.RelationshipClass))
                .FirstOrDefault(t => t.Guid == guid);

            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            if (model.AccountCode != accountCode) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == model.AccountCode) ?? new AccountSetting();
            ViewBag.BypassMedicalHistory = accountSetting.BypassMedicalHistory;
            
            return View(model);
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementApprovals")]
        public ActionResult Approve(string accountCode, Guid? guid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (!guid.HasValue) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var model = db.Members.FirstOrDefault(t => t.Guid == guid);
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            if (model.AccountCode != accountCode) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            model.Status = MembershipStatus.CorporateAdminApproved;
            model.DateSubmittedToUrg = DateTime.Now;
            db.SaveChanges();

            var eb = db.EndorsementBatches.FirstOrDefault(t => t.Id == model.EndorsementBatchId);
            if (eb != null)
            {
                if (db.Members.Any(t => (t.Status == MembershipStatus.New || t.Status == MembershipStatus.Saved) && t.EndorsementBatchId == eb.Id))
                {
                }
                else if (db.Members.Where(t => t.EndorsementBatchId == eb.Id).All(t => (t.Status == MembershipStatus.CorporateAdminApproved || t.Status == MembershipStatus.Cancelled)))
                {
                    eb.Status = EndorsementBatchStatus.ApprovedByCorporateAdmin;
                    db.SaveChanges();
                    Emailer.Emailer.SendApprovedNewEndorsementByCorpAdminToUrg(eb);
                }
            }

            return RedirectToAction("Index", new { accountCode = accountCode, messageType = "Success", message = "Endorsement accepted for review and processing." });
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementApprovals")]
        public ActionResult CancelMember(string accountCode, Guid? guid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (!guid.HasValue) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var model = db.Members.FirstOrDefault(t => t.Guid == guid);
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            if (model.AccountCode != accountCode) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            if (!string.IsNullOrEmpty(model.UserId))
            {
                db.Users.Remove(db.Users.FirstOrDefault(t => t.Id == model.UserId));
            }

            //db.Members.Remove(model);
            model.Status = MembershipStatus.Cancelled;
            db.SaveChanges();

            var eb = db.EndorsementBatches.FirstOrDefault(t => t.Id == model.EndorsementBatchId);
            if (eb != null)
            {
                if (db.Members.Where(t => t.EndorsementBatchId == eb.Id).All(t => (t.Status == MembershipStatus.Cancelled)))
                {
                    eb.Status = EndorsementBatchStatus.Cancelled;
                    db.SaveChanges();
                }
                else if (db.Members.Where(t => t.EndorsementBatchId == eb.Id).All(t => (t.Status == MembershipStatus.CorporateAdminApproved || t.Status == MembershipStatus.Cancelled)))
                {
                    eb.Status = EndorsementBatchStatus.ApprovedByCorporateAdmin;
                    db.SaveChanges();
                    Emailer.Emailer.SendApprovedNewEndorsementByCorpAdminToUrg(eb);
                }
            }
            Emailer.Emailer.SendCancelMembershipCorporateAdminToMemberEmailInstant(model);
            return RedirectToAction("Index", new { accountCode = accountCode, messageType = "Success", message = "Membership endorsement disapproved." });
        }

        [Authorize(Roles = "SysAd, CanViewEndorsementApprovals")]
        public ActionResult ReturnMember(string accountCode, Guid? guid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            if (!guid.HasValue) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var model = db.Members.FirstOrDefault(t => t.Guid == guid);
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            if (model.AccountCode != accountCode) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            model.Status = MembershipStatus.Saved;
            db.SaveChanges();

            var eb = db.EndorsementBatches.FirstOrDefault(t => t.Id == model.EndorsementBatchId);
            if (eb != null)
            {
                if (db.Members.Where(t => t.EndorsementBatchId == eb.Id).All(t => (t.Status == MembershipStatus.New || t.Status == MembershipStatus.Saved)))
                {
                    eb.Status = EndorsementBatchStatus.ForEmployeeUpdating;
                    db.SaveChanges();
                }
            }
            Emailer.Emailer.SendCancelMembershipCorporateAdminToMemberEmailInstant(model);
            return RedirectToAction("Index", new { accountCode = accountCode, messageType = "Success", message = "Cancellation successful." });
        }

        #endregion
    }
}