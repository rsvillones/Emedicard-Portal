using Corelib.Enums;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Corelib.Models
{
    public class EndorsementBatch : BaseModel, IValidatableObject
    {
        #region -- Constructor --

        public EndorsementBatch()
        {
            this.Members = new Collection<Member>();
            this.Deadline = DateTime.Now.AddDays(30);
        }

        #endregion

        #region -- Properties --

        public string ControlNumber { get; set; }

        [Required]
        [StringLength(16)]
        [Index]
        public string ReferenceNumber { get; set; }

        [DisplayFormat(DataFormatString = "{0:MM/dd/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime Date { get; set; }

        [DisplayFormat(DataFormatString = "{0:MM/dd/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? DateReceived { get; set; }

        [DisplayFormat(DataFormatString = "{0:MM/dd/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? DateForwarded { get; set; }

        [DisplayFormat(DataFormatString = "{0:MM/dd/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime? DateEndorsed { get; set; }

        [DisplayFormat(DataFormatString = "{0:MM/dd/yyyy}", ApplyFormatInEditMode = true)]
        public DateTime Deadline { get; set; }

        [StringLength(128)]
        public string Filename { get; set; }

        [StringLength(64)]
        public string GuidFilename { get; set; }

        public EndorsementBatchStatus Status { get; set; }

        public int EndorsementCount { get; set; }

        private string _accountCode;
        [StringLength(25)]
        [Index]
        public string AccountCode { 
            get 
            {
                return _accountCode;
            } 
            set 
            {
                _accountCode = value;

                using (var legacyDb = new LegacyDataContext())
                {
                    var legacyAccount = legacyDb.LegacyAccounts.FirstOrDefault(t => t.Code == this.AccountCode) ?? new LegacyAccount();
                    this.CompanyName = legacyAccount.Name;
                }
            } 
        }

        [StringLength(150)]
        public string CompanyName { get; set; }

        [StringLength(32)]
        [Index]
        public string EndorsementType { get; set; }

        [StringLength(32)]
        public string BatchType { get; set; }

        public string Remarks { get; set; }

        public ICollection<Member> Members { get; set; }

        public ICollection<RenewalMember> RenewalMembers { get; set; }

        public ICollection<ActionMemo> ActionMemos { get; set; }

        public ICollection<CancelledMember> CancelledMembers { get; set; }

        public ICollection<Amendment> Amendments { get; set; }

        [NotMapped]
        public bool CanBeReceived {
            get
            {
                using (var db = new IdentityDataContext())
                {
                    UrgSetting urgSetting = (db.AccountSettings.FirstOrDefault(t => t.AccountCode == this.AccountCode) ?? new AccountSetting()).UrgSetting;

                    if (urgSetting == UrgSetting.All)
                    {
                        switch (this.EndorsementType)
                        {
                            case "New":
                            case "Renewal":
                                return this.Members.Count > 0 && !this.Members.Any(t => t.Status != MembershipStatus.CorporateAdminApproved);
                            case "Action Memo":
                                return this.ActionMemos.Count > 0 && !this.ActionMemos.Any(t => t.Status != ActionMemoStatus.Replied);
                            case "Amendment":
                                return this.Amendments.Count > 0 && !this.Amendments.Any(t => t.Status != RequestStatus.CorporateAdminApproved);
                            case "ID Replacement":
                                return false;
                            case "Additional Dependent":
                                return false;
                            case "Dependent Cancellation":
                                return false;
                            case "Cancel Membership":
                                return false;
                        }
                    }
                    else if (urgSetting == UrgSetting.Partial)
                    {
                        switch (this.EndorsementType)
                        {
                            case "New":
                            case "Renewal":
                                return this.Members.Count > 0 && this.Members.Any(t => t.Status == MembershipStatus.CorporateAdminApproved);
                            case "Action Memo":
                                return this.ActionMemos.Count > 0 && this.ActionMemos.Any(t => t.Status == ActionMemoStatus.Replied);
                            case "Amendment":
                                return this.Amendments.Count > 0 && !this.Amendments.Any(t => t.Status == RequestStatus.CorporateAdminApproved);
                            case "ID Replacement":
                                return false;
                            case "Additional Dependent":
                                return false;
                            case "Dependent Cancellation":
                                return false;
                            case "Cancel Membership":
                                return false;
                        }
                    }
                }

                return false;
            }
        }

        #endregion

        #region -- Functions --

        #endregion

        #region -- IValidatableObject Members --

        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            var duplicates = this.Members.GroupBy(t => new { t.LastName, t.FirstName, t.MiddleName, t.DateOfBirth }).SelectMany(group => group.Skip(1));
            if (duplicates != null && duplicates.Count() > 0)
            {
                foreach (var duplicate in duplicates)
                {
                    yield return new ValidationResult(String.Format("Duplicate entries found for {1}, {0} {2} ({3:MM/dd/yyyy})", duplicate.FirstName, duplicate.LastName, duplicate.MiddleName, duplicate.DateOfBirth));
                }
            }
        }
        
        #endregion
    }
}
