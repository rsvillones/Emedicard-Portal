using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Corelib;
using Corelib.Models;
using PagedList;
using PagedList.Mvc;
using WebUI.Models;
using WebUI.Areas.Member.Models;

namespace WebUI.Areas.Member.Controllers
{
    public class DependentsController : BaseMemberController
    {
        #region -- Action Results --

        [Authorize(Roles = "Member")]
        public ActionResult Index(string messageType, string message)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var dependents = db.Dependents.Where(t => !t.Deleted && t.ApplicationId == this.Application.Id).ToList();

            var model = new DependentViewModel(){
                Dependents = dependents
            };

            return View(model);
        }

        [Authorize(Roles = "Member")]
        public ActionResult Create()
        {           
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            var dependents = db.Dependents.Where(t => !t.Deleted && t.ApplicationId == this.Application.Id).ToList();
            var isMaxDependent = false;
            if (dependents.Count() == this.Application.Dependent) isMaxDependent = true;
            if (isMaxDependent){               
                return RedirectToAction("Index",new { @messageType = "Warning!", @message = string.Format("You have only {0} allowed dependent/s.",this.Application.Dependent) });;
            }
            var model = new Dependent();

            var dependentPlans = Helper.GetLegacyRoomRates(this.Application.AccountCode, false);
            var appliedPlans = dependentPlans.Where(t => t.Id == this.Application.DependentAppliedPlan).ToList();
            if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();

            var optionalPlansFilter = new List<int>();
            if (!String.IsNullOrEmpty(this.Application.DependentOptionalPlan))
            {
                foreach (var optionalPlan in this.Application.DependentOptionalPlan.Split(','))
                {
                    optionalPlansFilter.Add(int.Parse(optionalPlan));
                }
            }

            var optionalPlans = dependentPlans.Where(t => t.Id != this.Application.DependentAppliedPlan && optionalPlansFilter.Contains(t.Id)).ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription");
            ViewBag.OptionalPlanList = new SelectList(optionalPlans, "Id", "LongDescription");
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" });
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Divorced", "Widowed" });
            ViewBag.RelationshipList = new SelectList(new List<string>() { "Parent", "Spouse", "Child", "Sibling" });
            ViewBag.OptionalPlanCount = optionalPlans.Count(t => t.Id != this.Application.AppliedPlan);

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Member")]
        public async Task<ActionResult> Create([Bind(Include = "Id, Guid, LastName, FirstName, MiddleName, Suffix, DateOfBirth, Age, Relationship, Gender, CivilStatus, EmailAddress, OptionalPlan, Street, City, Zip, Province, Telephone, Mobile, HeightFeet, HeightInches, Weight, Occupation")] Dependent dependent)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (ModelState.IsValid)
            {
                dependent.ApplicationId = this.Application.Id;
                db.Dependents.Add(dependent);
                await db.SaveChangesAsync();
                Helper.IsDependentMedicalHistoryComplete(db, this.Application.Id);
                return RedirectToAction("MedicalHistory", new { @guid = dependent.Guid });
            }

            var dependentPlans = Helper.GetLegacyRoomRates(this.Application.AccountCode, false);
            var appliedPlans = dependentPlans.Where(t => t.Id == this.Application.DependentAppliedPlan).ToList();
            if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();
            var optionalPlans = dependentPlans.Where(t => t.Id != this.Application.DependentAppliedPlan).ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription");
            ViewBag.OptionalPlanList = new SelectList(optionalPlans, "Id", "LongDescription");
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" });
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Divorced", "Widowed" });
            ViewBag.RelationshipList = new SelectList(new List<string>() { "Parent", "Spouse", "Child", "Sibling" });
            ViewBag.OptionalPlanCount = dependentPlans.Count(t => t.Id != this.Application.AppliedPlan);

            return View(dependent);
        }

        [Authorize(Roles = "Member")]
        public ActionResult Edit(Guid? guid)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var model = db.Dependents.FirstOrDefault(t => t.Guid == guid && !t.Deleted && t.ApplicationId == this.Application.Id);
            if (model == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            var dependentPlans = Helper.GetLegacyRoomRates(this.Application.AccountCode, false);
            var appliedPlans = dependentPlans.Where(t => t.Id == this.Application.DependentAppliedPlan).ToList();
            if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();
            var optionalPlans = dependentPlans.Where(t => t.Id != this.Application.DependentAppliedPlan).ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription");
            ViewBag.OptionalPlanList = new SelectList(optionalPlans, "Id", "LongDescription");
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" });
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Divorced", "Widowed" });
            ViewBag.RelationshipList = new SelectList(new List<string>() { "Parent", "Spouse", "Child", "Sibling" });
            ViewBag.OptionalPlanCount = dependentPlans.Count(t => t.Id != this.Application.AppliedPlan);

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Member")]
        public async Task<ActionResult> Edit([Bind(Include = "Id, Guid, LastName, FirstName, MiddleName, Suffix, DateOfBirth, Age, Relationship, Gender, CivilStatus, EmailAddress, OptionalPlan, Street, City, Zip, Province, Telephone, Mobile, HeightFeet, HeightInches, Weight, Occupation")] Dependent model)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (ModelState.IsValid)
            {
                var dependent = db.Dependents.FirstOrDefault(t => t.Id == model.Id && !t.Deleted);
                db.Entry(dependent).CurrentValues.SetValues(model);
                dependent.ApplicationId = this.Application.Id;                
                db.Entry(dependent).State = EntityState.Modified;
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }

            var dependentPlans = Helper.GetLegacyRoomRates(this.Application.AccountCode, false);
            var appliedPlans = dependentPlans.Where(t => t.Id == this.Application.DependentAppliedPlan).ToList();
            if (appliedPlans.Count == 0) appliedPlans = dependentPlans.ToList();
            var optionalPlans = dependentPlans.Where(t => t.Id != this.Application.DependentAppliedPlan).ToList();

            ViewBag.AppliedPlanList = new SelectList(appliedPlans, "Id", "LongDescription");
            ViewBag.OptionalPlanList = new SelectList(optionalPlans, "Id", "LongDescription");
            ViewBag.GenderList = new SelectList(new List<string>() { "Male", "Female" });
            ViewBag.CivilStatusList = new SelectList(new List<string>() { "Single", "Married", "Divorced", "Widowed" });
            ViewBag.RelationshipList = new SelectList(new List<string>() { "Parent", "Spouse", "Child", "Sibling" });
            ViewBag.OptionalPlanCount = dependentPlans.Count(t => t.Id != this.Application.AppliedPlan);

            return View(model);
        }

        [Authorize(Roles = "Member")]
        public async Task<ActionResult> Delete(Guid? guid)
        {
            if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            var dependent = await db.Dependents.FirstOrDefaultAsync(t => t.Guid == guid);
            db.Dependents.Remove(dependent);
            await db.SaveChangesAsync();
            return RedirectToAction("Index", new { @messageType = "Success!", @message = "Dependent is successfully deleted." });
        }
        
        //[Authorize(Roles = "Member")]
        //public ActionResult MedicalHistory(Guid? guid)
        //{ 
        //    var returnValue = base.ValidateRequest();
        //    if (returnValue != null) return returnValue;

        //    if (guid == null) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            
        //    Helper.IsMedicalHistoryComplete(db, this.Application.Id);

        //    var model = new MedicalHistoryViewModel()
        //    {
        //        MedicalHistories = db.MedicalHistories.Include(t => t.Question).Where(t => t.ApplicationId == this.Application.Id).OrderBy(t => t.Question.DisplayOrder).ThenBy(t => t.Question.Description).ToList()
        //    };

        //    return View(model);
        //}

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //[Authorize(Roles = "Member")]
        //public async Task<ActionResult> Index(MedicalHistoryViewModel model)
        //{
        //    var returnValue = base.ValidateRequest();
        //    if (returnValue != null) return returnValue;

        //    if (ModelState.IsValid)
        //    {
        //        foreach (var medicalHistory in model.MedicalHistories)
        //        {
        //            db.Entry(medicalHistory).State = EntityState.Modified;
        //        }
        //        await db.SaveChangesAsync();
        //        return RedirectToAction("Index", new { @messageType = "Success", @message = "Successfully saved information." });
        //    }

        //    foreach (var medicalHistory in model.MedicalHistories)
        //    {
        //        medicalHistory.Question = db.Questions.Find(medicalHistory.QuestionId);
        //    }

        //    return View(model);

        //}

        [Authorize(Roles = "Member")]
        public ActionResult MedicalHistory(Guid? guid, string messageType, string message)
        {
            
            //if(guid == null) return new Http
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            var dependent = db.Dependents.FirstOrDefault(t => t.Guid == guid);
            if (dependent == null || dependent.ApplicationId != this.Application.Id) return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = new DependentMedicalHistoryViewModel()
            {
                DependentMedicalHistories = db.DependentMedicalHistories.Include(t => t.Question).Where(t => t.DependentId == dependent.Id).OrderBy(t => t.Question.DisplayOrder).ThenBy(t => t.Question.Description).ToList()
            };

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Member")]
        public async Task<ActionResult> MedicalHistory(DependentMedicalHistoryViewModel model)
        {
            var returnValue = base.ValidateUser();
            if (returnValue != null) return returnValue;

            if (ModelState.IsValid)
            {
                foreach (var dependentMedicalHistory in model.DependentMedicalHistories)
                {
                    db.Entry(dependentMedicalHistory).State = EntityState.Modified;
                }
                await db.SaveChangesAsync();
                return RedirectToAction("Index", new { @messageType = "Success", @message = "Successfully saved information." });
            }

            foreach (var dependentMedicalHistory in model.DependentMedicalHistories)
            {
                dependentMedicalHistory.Question = db.Questions.Find(dependentMedicalHistory.QuestionId);
            }

            return View(model);
        }

        #endregion
    }
}