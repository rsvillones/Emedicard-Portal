using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Corelib;
using Corelib.Models;
using OfficeOpenXml;
using System.IO;
using System.Data.Entity;
using Corelib.Classes;
using System.Threading.Tasks;
using System.Net;

namespace WebUI.Areas.CorporateAdministrator.Controllers
{
    [Authorize(Roles = "SysAd, CanViewRequestManagement")]
    public class RequestManagementController : BaseAccountController
    {
        #region  -- Action Results --

        public ActionResult Index(string accountCode, string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.Amendments.Include(t => t.EndorsementBatch).Include(t => t.Reason).Include(t => t.DocumentType).Where(t => t.AccountCode == this.LegacyAccount.Code && !t.Deleted).ToList();

            var amendments = Amendments(model);

            //if (!string.IsNullOrEmpty(currentFilter))
            //{
            //    amendments = amendments.Where(t => t.ChangeDataFrom.Contains(currentFilter));
            //}

            Helper.SetSortParameters<Amendment>(this, ref amendments, sortOrder, currentFilter, new SortParameter() { PropertyName = "ChangeDataFrom" }, new List<SortParameter>() { });

            ViewBag.Dependents = db.Dependents.Where(t => !t.Deleted).ToList();
            ViewBag.Members = db.Members.Where(t => !t.Deleted).ToList();

            return View(amendments.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        public ActionResult MemberList(string accountCode, string sortOrder, string currentFilter, int? page, string messageType, string message)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            ViewBag.MessageType = messageType;
            ViewBag.Message = message;

            var model = db.Members.Include(t => t.EndorsementBatch).Where(t => t.AccountCode == this.LegacyAccount.Code && !t.Deleted).ToList();

            return View(model.ToPagedList(page ?? 1, Config.RecordCountPerPage));
        }

        #endregion

        #region -- Amendment --

        public ActionResult Amendment(string accountCode, Guid? guid,Guid? memberGuid)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            int memberId = new int();
            if (memberGuid != null && db.Members.Any(t => t.Guid == memberGuid)) memberId = db.Members.FirstOrDefault(t => !t.Deleted && t.Guid == memberGuid).Id;
            
            Amendment model;
            if (guid != null && db.Amendments.Any(t => t.Guid == guid)){
                model = db.Amendments.Include(t => t.EndorsementBatch).FirstOrDefault(t => t.Guid == guid);
            }
            else{
                model = new Amendment(){
                    MemberId = memberId
                };
            }

            base.ReadOnlyAttribute(model.EndorsementBatch ?? new EndorsementBatch());

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);
            ViewBag.Dependents = db.Dependents.Where(t => !t.Deleted).OrderBy(t => t.LastName);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);
            ViewBag.Members = db.Members.Where(t => !t.Deleted && t.AccountCode == accountCode).OrderBy(t => t.LastName);

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Amendment(Amendment model, string accountCode, string submit)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;
            var accountSetting = db.AccountSettings.FirstOrDefault(t => t.AccountCode == accountCode) ?? new AccountSetting();

            if (submit == "Submit Request"){
                if (!accountSetting.BypassHRManagerApproval){
                    model.Status = Corelib.Enums.RequestStatus.ForProcessing;
                }
                else{
                    model.Status = Corelib.Enums.RequestStatus.HrForProcessing;
                }
            }
            byte[] fileData = null;
            string contentType = "";
            string fileName = "";
            if (model.FileWrapper != null){
                using (var binaryReader = new BinaryReader(model.FileWrapper.InputStream)){
                    fileData = binaryReader.ReadBytes(model.FileWrapper.ContentLength);
                    contentType = model.FileWrapper.ContentType;
                    fileName = model.FileWrapper.FileName;
                }
            }
            if (ModelState.IsValid){
                if (model.Id == 0){
                    var endorsementBatch = new EndorsementBatch(){
                        Deadline = DateTime.Now,
                        ReferenceNumber = Helper.GenerateRandomEndorsementBatchReferenceNumber(),
                        Date = DateTime.Now,
                        EndorsementType = "New",
                        BatchType = "Amendment",
                        AccountCode = accountCode,
                        Status = Corelib.Enums.EndorsementBatchStatus.New
                    };
                    db.EndorsementBatches.Add(endorsementBatch);                  
                    
                    model.DocumentFile = fileData;
                    model.DocumentFileName = fileName;
                    model.DocumentContentType = contentType;
                    model.EndorsementBatchId = endorsementBatch.Id;
                    db.Amendments.Add(model);
                }
                else{                    
                    var currentAmendment = db.Amendments.FirstOrDefault(t => t.Id == model.Id && !t.Deleted);
                    db.Entry(currentAmendment).CurrentValues.SetValues(model);
                    currentAmendment.DocumentFile = fileData;
                    currentAmendment.DocumentFileName = fileName;
                    currentAmendment.DocumentContentType = contentType;
                    db.Entry(currentAmendment).State = EntityState.Modified;
                }

                db.SaveChanges();
                return RedirectToAction("Index", new { accountCode = accountCode });
            }

            model.EndorsementBatch = db.EndorsementBatches.FirstOrDefault(t => t.Id == model.EndorsementBatch.Id);
            base.ReadOnlyAttribute(model.EndorsementBatch);

            ViewBag.Reasons = db.Reasons.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);
            ViewBag.Dependents = db.Dependents.Where(t => !t.Deleted).OrderBy(t => t.LastName);
            ViewBag.DocumentTypes = db.DocumentTypes.Where(t => !t.Deleted).OrderBy(t => t.DisplayOrder);

            return View(model);
        }

        public ActionResult DeleteAmendment(Guid? guid, string accountCode)
        {
            var returnValue = base.ValidateAccountCode(accountCode);
            if (returnValue != null) return returnValue;

            var amendment = db.Amendments.FirstOrDefault(t => !t.Deleted && t.Guid == guid);
            if (amendment == null) throw new Exception("Amendment Not Found!.");

            db.Amendments.Remove(amendment);
            db.SaveChanges();
            return RedirectToAction("Index", new { accountCode = accountCode, messageType = "Success!", message = "Successfully deleted amendment." });
        }

        #endregion

        #region -- Functions --

        public string GetPropertyValue(int memberId, int propertyName, int requestForId, int? dependentId)
        {
            var dataType = Convert.ToString((Corelib.Enums.RequestDataType)propertyName);
            var requestFor = (Corelib.Enums.RequestFor)requestForId;
            var member = db.Members.FirstOrDefault(t => !t.Deleted && t.Id == memberId);
            var dependent = db.Dependents.FirstOrDefault(t => !t.Deleted && t.MemberId == memberId && t.Id == dependentId.Value);
            var returnValue = "";
            switch (requestFor)
            {
                case Corelib.Enums.RequestFor.Principal:
                    if (member != null)
                    {
                        var propertyInfo = member.GetType().GetProperty(dataType);

                        if (propertyInfo.PropertyType == typeof(DateTime))
                        {
                            var date = Convert.ToDateTime(propertyInfo.GetValue(member, null));
                            returnValue = date.ToString("MM/dd/yyyy");
                        }
                        else
                        {
                            returnValue = Convert.ToString(propertyInfo.GetValue(member, null));
                        }
                        return returnValue;
                    }
                    return "Member not found.";
                case Corelib.Enums.RequestFor.Dependent:
                    if (dependent != null && member != null)
                    {
                        var propertyInfo = dependent.GetType().GetProperty(dataType);
                        if (propertyInfo != null)
                        {
                            if (propertyInfo.PropertyType == typeof(DateTime))
                            {
                                var date = Convert.ToDateTime(propertyInfo.GetValue(dependent, null));
                                returnValue = date.ToString("MM/dd/yyyy");
                            }
                            else
                            {
                                returnValue = Convert.ToString(propertyInfo.GetValue(dependent, null));
                            }
                            return returnValue;
                        }
                        return "Data type of dependent not found.";
                    }
                    return "Select dependent name.";
                default:
                    break;
            }
            return returnValue;
        }

        public bool IsPropertyDateTime(int memberId, int propertyName)
        {
            var dataType = Convert.ToString((Corelib.Enums.RequestDataType)propertyName);
            var member = db.Members.FirstOrDefault(t => !t.Deleted && t.Id == memberId);
            if (member != null)
            {
                var propertyInfo = member.GetType().GetProperty(dataType);
                if (propertyInfo.PropertyType == typeof(DateTime))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            return false;
        }

        public string GetDependents(int? memberId,int? amendmentId)
        {
            var member = db.Members.FirstOrDefault(t => !t.Deleted && t.Id == memberId) ?? new Corelib.Models.Member();
            var dependents = db.Dependents.Where(t => !t.Deleted && t.MemberId == member.Id).ToList();
            var amendment = db.Amendments.FirstOrDefault(t => t.Id == amendmentId && !t.Deleted) ?? new Amendment();
            var sb = new System.Text.StringBuilder();
            if (memberId != null)
            {
                sb.Append(string.Format(@"<option value=''>-- Select Dependent --</option>"));
                foreach (var dependent in dependents)
                {
                    if (dependent.Id == amendment.DependentId)
                    {
                        sb.Append(string.Format(@"<option value='{0}' selected='selected'>{1}</option>", dependent.Id, dependent.FullName));
                    }
                    else
                    {
                        sb.Append(string.Format(@"<option value='{0}'>{1}</option>", dependent.Id, dependent.FullName));
                    }
                }
            }
            else
            {
                sb.Append(string.Format(@"<option value=''>-- Select Member --</option>"));
            }

            return sb.ToString();
        }

        public FileResult DownloadFile(Guid? guid)
        {
            if (guid != null && db.Amendments.Any(t => t.Guid == guid))
            {
                var amendment = db.Amendments.FirstOrDefault(t => t.Guid == guid);
                if (amendment.DocumentFile != null || !string.IsNullOrEmpty(amendment.DocumentContentType) || !string.IsNullOrEmpty(amendment.DocumentFileName))
                { return File(amendment.DocumentFile, amendment.DocumentContentType, amendment.DocumentFileName); }
            }            
            return null;
        }

        private IQueryable<Amendment> Amendments(List<Amendment> amendments)
        {
            return amendments.AsQueryable();
        }


        #endregion
    }
}