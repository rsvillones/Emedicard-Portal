using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;

namespace WebUI
{
    public class SortParameter
    {
        public string PropertyName { get; set; }
    }

    public static class Helper
    {
        #region -- Functions --

        public static void SetSortParameters<T>(Controller controller, ref IQueryable<T> entities, string sortOrder, string currentFilter, SortParameter defaultParameter, IEnumerable<SortParameter> parameters)
        {
            controller.ViewBag.CurrentFilter = currentFilter;
            controller.ViewBag.CurrentSort = sortOrder;

            controller.ViewData.Add(String.Format("{0}SortParam", defaultParameter.PropertyName), String.IsNullOrEmpty(sortOrder) || sortOrder == defaultParameter.PropertyName.ToLower() ? String.Format("{0}_desc", defaultParameter.PropertyName.ToLower()) : defaultParameter.PropertyName.ToLower());
            if (String.IsNullOrEmpty(sortOrder) || sortOrder == defaultParameter.PropertyName.ToLower())
            {
                entities = entities.OrderBy(defaultParameter.PropertyName);
            }
            else if (sortOrder == String.Format("{0}_desc", defaultParameter.PropertyName.ToLower()))
            {
                entities = entities.OrderByDescending(defaultParameter.PropertyName);
            }

            if (parameters != null)
            {
                foreach (var parameter in parameters)
                {
                    controller.ViewData.Add(String.Format("{0}SortParam", parameter.PropertyName), String.IsNullOrEmpty(sortOrder) || sortOrder == parameter.PropertyName.ToLower() ? String.Format("{0}_desc", parameter.PropertyName.ToLower()) : parameter.PropertyName.ToLower());
                    if (sortOrder == parameter.PropertyName.ToLower())
                    {
                        entities = entities.OrderBy(parameter.PropertyName);
                    }
                    else if (sortOrder == String.Format("{0}_desc", parameter.PropertyName.ToLower()))
                    {
                        entities = entities.OrderByDescending(parameter.PropertyName);
                    }
                }
            }
        }
        
        #endregion

        #region -- Extension Methods --

        public static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string ordering, params object[] values)
        {
            var type = typeof(T);
            var property = type.GetProperty(ordering);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderBy", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));

            return source.Provider.CreateQuery<T>(resultExp);
        }

        public static IQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string ordering, params object[] values)
        {
            var type = typeof(T);
            var property = type.GetProperty(ordering);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderByDescending", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));

            return source.Provider.CreateQuery<T>(resultExp);
        }

        #endregion
    }
}